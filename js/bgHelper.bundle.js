!function(e){function t(t){for(var n,a,s=t[0],c=t[1],u=t[2],d=0,p=[];d<s.length;d++)a=s[d],Object.prototype.hasOwnProperty.call(o,a)&&o[a]&&p.push(o[a][0]),o[a]=0;for(n in c)Object.prototype.hasOwnProperty.call(c,n)&&(e[n]=c[n]);for(l&&l(t);p.length;)p.shift()();return i.push.apply(i,u||[]),r()}function r(){for(var e,t=0;t<i.length;t++){for(var r=i[t],n=!0,s=1;s<r.length;s++){var c=r[s];0!==o[c]&&(n=!1)}n&&(i.splice(t--,1),e=a(a.s=r[0]))}return e}var n={},o={1:0},i=[];function a(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,a),r.l=!0,r.exports}a.m=e,a.c=n,a.d=function(e,t,r){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(a.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)a.d(r,n,function(t){return e[t]}.bind(null,n));return r},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="";var s=window.webpackJsonp=window.webpackJsonp||[],c=s.push.bind(s);s.push=t,s=s.slice();for(var u=0;u<s.length;u++)t(s[u]);var l=c;i.push([289,0]),r()}({127:function(e,t,r){const n=r(22);e.exports=(e,t,r)=>0!==n(e,t,r)},128:function(e,t,r){const n=r(77),o=r(127),i=r(51),a=r(80),s=r(79),c=r(81);e.exports=(e,t,r,u)=>{switch(t){case"===":return"object"==typeof e&&(e=e.version),"object"==typeof r&&(r=r.version),e===r;case"!==":return"object"==typeof e&&(e=e.version),"object"==typeof r&&(r=r.version),e!==r;case"":case"=":case"==":return n(e,r,u);case"!=":return o(e,r,u);case">":return i(e,r,u);case">=":return a(e,r,u);case"<":return s(e,r,u);case"<=":return c(e,r,u);default:throw new TypeError(`Invalid operator: ${t}`)}}},129:function(e,t,r){const n=r(20);e.exports=(e,t,r)=>{try{t=new n(t,r)}catch(e){return!1}return t.test(e)}},141:function(e,t){e.exports=function(e){for(var t=-1,r=null==e?0:e.length,n={};++t<r;){var o=e[t];n[o[0]]=o[1]}return n}},142:function(e,t,r){var n=r(52),o=r(18);e.exports=function(e,t,r){var i=!0,a=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return o(r)&&(i="leading"in r?!!r.leading:i,a="trailing"in r?!!r.trailing:a),n(e,t,{leading:i,maxWait:t,trailing:a})}},15:function(e,t,r){const n=r(50),{MAX_LENGTH:o,MAX_SAFE_INTEGER:i}=r(49),{re:a,t:s}=r(30),{compareIdentifiers:c}=r(76);class u{constructor(e,t){if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof u){if(e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease)return e;e=e.version}else if("string"!=typeof e)throw new TypeError(`Invalid Version: ${e}`);if(e.length>o)throw new TypeError(`version is longer than ${o} characters`);n("SemVer",e,t),this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease;const r=e.trim().match(t.loose?a[s.LOOSE]:a[s.FULL]);if(!r)throw new TypeError(`Invalid Version: ${e}`);if(this.raw=e,this.major=+r[1],this.minor=+r[2],this.patch=+r[3],this.major>i||this.major<0)throw new TypeError("Invalid major version");if(this.minor>i||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>i||this.patch<0)throw new TypeError("Invalid patch version");r[4]?this.prerelease=r[4].split(".").map(e=>{if(/^[0-9]+$/.test(e)){const t=+e;if(t>=0&&t<i)return t}return e}):this.prerelease=[],this.build=r[5]?r[5].split("."):[],this.format()}format(){return this.version=`${this.major}.${this.minor}.${this.patch}`,this.prerelease.length&&(this.version+=`-${this.prerelease.join(".")}`),this.version}toString(){return this.version}compare(e){if(n("SemVer.compare",this.version,this.options,e),!(e instanceof u)){if("string"==typeof e&&e===this.version)return 0;e=new u(e,this.options)}return e.version===this.version?0:this.compareMain(e)||this.comparePre(e)}compareMain(e){return e instanceof u||(e=new u(e,this.options)),c(this.major,e.major)||c(this.minor,e.minor)||c(this.patch,e.patch)}comparePre(e){if(e instanceof u||(e=new u(e,this.options)),this.prerelease.length&&!e.prerelease.length)return-1;if(!this.prerelease.length&&e.prerelease.length)return 1;if(!this.prerelease.length&&!e.prerelease.length)return 0;let t=0;do{const r=this.prerelease[t],o=e.prerelease[t];if(n("prerelease compare",t,r,o),void 0===r&&void 0===o)return 0;if(void 0===o)return 1;if(void 0===r)return-1;if(r!==o)return c(r,o)}while(++t)}compareBuild(e){e instanceof u||(e=new u(e,this.options));let t=0;do{const r=this.build[t],o=e.build[t];if(n("prerelease compare",t,r,o),void 0===r&&void 0===o)return 0;if(void 0===o)return 1;if(void 0===r)return-1;if(r!==o)return c(r,o)}while(++t)}inc(e,t){switch(e){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",t);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",t);break;case"prepatch":this.prerelease.length=0,this.inc("patch",t),this.inc("pre",t);break;case"prerelease":0===this.prerelease.length&&this.inc("patch",t),this.inc("pre",t);break;case"major":0===this.minor&&0===this.patch&&0!==this.prerelease.length||this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":0===this.patch&&0!==this.prerelease.length||this.minor++,this.patch=0,this.prerelease=[];break;case"patch":0===this.prerelease.length&&this.patch++,this.prerelease=[];break;case"pre":if(0===this.prerelease.length)this.prerelease=[0];else{let e=this.prerelease.length;for(;--e>=0;)"number"==typeof this.prerelease[e]&&(this.prerelease[e]++,e=-2);-1===e&&this.prerelease.push(0)}t&&(this.prerelease[0]===t?isNaN(this.prerelease[1])&&(this.prerelease=[t,0]):this.prerelease=[t,0]);break;default:throw new Error(`invalid increment argument: ${e}`)}return this.format(),this.raw=this.version,this}}e.exports=u},20:function(e,t,r){class n{constructor(e,t){if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof n)return e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease?e:new n(e.raw,t);if(e instanceof o)return this.raw=e.value,this.set=[[e]],this.format(),this;if(this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease,this.raw=e,this.set=e.split(/\s*\|\|\s*/).map(e=>this.parseRange(e.trim())).filter(e=>e.length),!this.set.length)throw new TypeError(`Invalid SemVer Range: ${e}`);this.format()}format(){return this.range=this.set.map(e=>e.join(" ").trim()).join("||").trim(),this.range}toString(){return this.range}parseRange(e){const t=this.options.loose;e=e.trim();const r=t?s[c.HYPHENRANGELOOSE]:s[c.HYPHENRANGE];e=e.replace(r,R),i("hyphen replace",e),e=e.replace(s[c.COMPARATORTRIM],u),i("comparator trim",e,s[c.COMPARATORTRIM]),e=(e=(e=e.replace(s[c.TILDETRIM],l)).replace(s[c.CARETTRIM],d)).split(/\s+/).join(" ");const n=t?s[c.COMPARATORLOOSE]:s[c.COMPARATOR];return e.split(" ").map(e=>h(e,this.options)).join(" ").split(/\s+/).filter(this.options.loose?e=>!!e.match(n):()=>!0).map(e=>new o(e,this.options))}intersects(e,t){if(!(e instanceof n))throw new TypeError("a Range is required");return this.set.some(r=>p(r,t)&&e.set.some(e=>p(e,t)&&r.every(r=>e.every(e=>r.intersects(e,t)))))}test(e){if(!e)return!1;if("string"==typeof e)try{e=new a(e,this.options)}catch(e){return!1}for(let t=0;t<this.set.length;t++)if($(this.set[t],e,this.options))return!0;return!1}}e.exports=n;const o=r(82),i=r(50),a=r(15),{re:s,t:c,comparatorTrimReplace:u,tildeTrimReplace:l,caretTrimReplace:d}=r(30),p=(e,t)=>{let r=!0;const n=e.slice();let o=n.pop();for(;r&&n.length;)r=n.every(e=>o.intersects(e,t)),o=n.pop();return r},h=(e,t)=>(i("comp",e,t),e=v(e,t),i("caret",e),e=E(e,t),i("tildes",e),e=b(e,t),i("xrange",e),e=g(e,t),i("stars",e),e),f=e=>!e||"x"===e.toLowerCase()||"*"===e,E=(e,t)=>e.trim().split(/\s+/).map(e=>m(e,t)).join(" "),m=(e,t)=>{const r=t.loose?s[c.TILDELOOSE]:s[c.TILDE];return e.replace(r,(t,r,n,o,a)=>{let s;return i("tilde",e,t,r,n,o,a),f(r)?s="":f(n)?s=`>=${r}.0.0 <${+r+1}.0.0`:f(o)?s=`>=${r}.${n}.0 <${r}.${+n+1}.0`:a?(i("replaceTilde pr",a),s=`>=${r}.${n}.${o}-${a} <${r}.${+n+1}.0`):s=`>=${r}.${n}.${o} <${r}.${+n+1}.0`,i("tilde return",s),s})},v=(e,t)=>e.trim().split(/\s+/).map(e=>I(e,t)).join(" "),I=(e,t)=>{i("caret",e,t);const r=t.loose?s[c.CARETLOOSE]:s[c.CARET];return e.replace(r,(t,r,n,o,a)=>{let s;return i("caret",e,t,r,n,o,a),f(r)?s="":f(n)?s=`>=${r}.0.0 <${+r+1}.0.0`:f(o)?s="0"===r?`>=${r}.${n}.0 <${r}.${+n+1}.0`:`>=${r}.${n}.0 <${+r+1}.0.0`:a?(i("replaceCaret pr",a),s="0"===r?"0"===n?`>=${r}.${n}.${o}-${a} <${r}.${n}.${+o+1}`:`>=${r}.${n}.${o}-${a} <${r}.${+n+1}.0`:`>=${r}.${n}.${o}-${a} <${+r+1}.0.0`):(i("no pr"),s="0"===r?"0"===n?`>=${r}.${n}.${o} <${r}.${n}.${+o+1}`:`>=${r}.${n}.${o} <${r}.${+n+1}.0`:`>=${r}.${n}.${o} <${+r+1}.0.0`),i("caret return",s),s})},b=(e,t)=>(i("replaceXRanges",e,t),e.split(/\s+/).map(e=>w(e,t)).join(" ")),w=(e,t)=>{e=e.trim();const r=t.loose?s[c.XRANGELOOSE]:s[c.XRANGE];return e.replace(r,(r,n,o,a,s,c)=>{i("xRange",e,r,n,o,a,s,c);const u=f(o),l=u||f(a),d=l||f(s),p=d;return"="===n&&p&&(n=""),c=t.includePrerelease?"-0":"",u?r=">"===n||"<"===n?"<0.0.0-0":"*":n&&p?(l&&(a=0),s=0,">"===n?(n=">=",l?(o=+o+1,a=0,s=0):(a=+a+1,s=0)):"<="===n&&(n="<",l?o=+o+1:a=+a+1),r=`${n+o}.${a}.${s}${c}`):l?r=`>=${o}.0.0${c} <${+o+1}.0.0${c}`:d&&(r=`>=${o}.${a}.0${c} <${o}.${+a+1}.0${c}`),i("xRange return",r),r})},g=(e,t)=>(i("replaceStars",e,t),e.trim().replace(s[c.STAR],"")),R=(e,t,r,n,o,i,a,s,c,u,l,d,p)=>`${t=f(r)?"":f(n)?`>=${r}.0.0`:f(o)?`>=${r}.${n}.0`:`>=${t}`} ${s=f(c)?"":f(u)?`<${+c+1}.0.0`:f(l)?`<${c}.${+u+1}.0`:d?`<=${c}.${u}.${l}-${d}`:`<=${s}`}`.trim(),$=(e,t,r)=>{for(let r=0;r<e.length;r++)if(!e[r].test(t))return!1;if(t.prerelease.length&&!r.includePrerelease){for(let r=0;r<e.length;r++)if(i(e[r].semver),e[r].semver!==o.ANY&&e[r].semver.prerelease.length>0){const n=e[r].semver;if(n.major===t.major&&n.minor===t.minor&&n.patch===t.patch)return!0}return!1}return!0}},22:function(e,t,r){const n=r(15);e.exports=(e,t,r)=>new n(e,r).compare(new n(t,r))},289:function(e,t,r){e.exports=r(313)},290:function(e,t,r){const n=r(31);e.exports=(e,t)=>{const r=n(e,t);return r?r.version:null}},291:function(e,t,r){const n=r(31);e.exports=(e,t)=>{const r=n(e.trim().replace(/^[=v]+/,""),t);return r?r.version:null}},292:function(e,t,r){const n=r(15);e.exports=(e,t,r,o)=>{"string"==typeof r&&(o=r,r=void 0);try{return new n(e,r).inc(t,o).version}catch(e){return null}}},293:function(e,t,r){const n=r(31),o=r(77);e.exports=(e,t)=>{if(o(e,t))return null;{const r=n(e),o=n(t),i=r.prerelease.length||o.prerelease.length,a=i?"pre":"",s=i?"prerelease":"";for(const e in r)if(("major"===e||"minor"===e||"patch"===e)&&r[e]!==o[e])return a+e;return s}}},294:function(e,t,r){const n=r(15);e.exports=(e,t)=>new n(e,t).major},295:function(e,t,r){const n=r(15);e.exports=(e,t)=>new n(e,t).minor},296:function(e,t,r){const n=r(15);e.exports=(e,t)=>new n(e,t).patch},297:function(e,t,r){const n=r(31);e.exports=(e,t)=>{const r=n(e,t);return r&&r.prerelease.length?r.prerelease:null}},298:function(e,t,r){const n=r(22);e.exports=(e,t,r)=>n(t,e,r)},299:function(e,t,r){const n=r(22);e.exports=(e,t)=>n(e,t,!0)},30:function(e,t,r){const{MAX_SAFE_COMPONENT_LENGTH:n}=r(49),o=r(50),i=(t=e.exports={}).re=[],a=t.src=[],s=t.t={};let c=0;const u=(e,t,r)=>{const n=c++;o(n,t),s[e]=n,a[n]=t,i[n]=new RegExp(t,r?"g":void 0)};u("NUMERICIDENTIFIER","0|[1-9]\\d*"),u("NUMERICIDENTIFIERLOOSE","[0-9]+"),u("NONNUMERICIDENTIFIER","\\d*[a-zA-Z-][a-zA-Z0-9-]*"),u("MAINVERSION",`(${a[s.NUMERICIDENTIFIER]})\\.`+`(${a[s.NUMERICIDENTIFIER]})\\.`+`(${a[s.NUMERICIDENTIFIER]})`),u("MAINVERSIONLOOSE",`(${a[s.NUMERICIDENTIFIERLOOSE]})\\.`+`(${a[s.NUMERICIDENTIFIERLOOSE]})\\.`+`(${a[s.NUMERICIDENTIFIERLOOSE]})`),u("PRERELEASEIDENTIFIER",`(?:${a[s.NUMERICIDENTIFIER]}|${a[s.NONNUMERICIDENTIFIER]})`),u("PRERELEASEIDENTIFIERLOOSE",`(?:${a[s.NUMERICIDENTIFIERLOOSE]}|${a[s.NONNUMERICIDENTIFIER]})`),u("PRERELEASE",`(?:-(${a[s.PRERELEASEIDENTIFIER]}(?:\\.${a[s.PRERELEASEIDENTIFIER]})*))`),u("PRERELEASELOOSE",`(?:-?(${a[s.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${a[s.PRERELEASEIDENTIFIERLOOSE]})*))`),u("BUILDIDENTIFIER","[0-9A-Za-z-]+"),u("BUILD",`(?:\\+(${a[s.BUILDIDENTIFIER]}(?:\\.${a[s.BUILDIDENTIFIER]})*))`),u("FULLPLAIN",`v?${a[s.MAINVERSION]}${a[s.PRERELEASE]}?${a[s.BUILD]}?`),u("FULL",`^${a[s.FULLPLAIN]}$`),u("LOOSEPLAIN",`[v=\\s]*${a[s.MAINVERSIONLOOSE]}${a[s.PRERELEASELOOSE]}?${a[s.BUILD]}?`),u("LOOSE",`^${a[s.LOOSEPLAIN]}$`),u("GTLT","((?:<|>)?=?)"),u("XRANGEIDENTIFIERLOOSE",`${a[s.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`),u("XRANGEIDENTIFIER",`${a[s.NUMERICIDENTIFIER]}|x|X|\\*`),u("XRANGEPLAIN",`[v=\\s]*(${a[s.XRANGEIDENTIFIER]})`+`(?:\\.(${a[s.XRANGEIDENTIFIER]})`+`(?:\\.(${a[s.XRANGEIDENTIFIER]})`+`(?:${a[s.PRERELEASE]})?${a[s.BUILD]}?`+")?)?"),u("XRANGEPLAINLOOSE",`[v=\\s]*(${a[s.XRANGEIDENTIFIERLOOSE]})`+`(?:\\.(${a[s.XRANGEIDENTIFIERLOOSE]})`+`(?:\\.(${a[s.XRANGEIDENTIFIERLOOSE]})`+`(?:${a[s.PRERELEASELOOSE]})?${a[s.BUILD]}?`+")?)?"),u("XRANGE",`^${a[s.GTLT]}\\s*${a[s.XRANGEPLAIN]}$`),u("XRANGELOOSE",`^${a[s.GTLT]}\\s*${a[s.XRANGEPLAINLOOSE]}$`),u("COERCE",`(^|[^\\d])(\\d{1,${n}})`+`(?:\\.(\\d{1,${n}}))?`+`(?:\\.(\\d{1,${n}}))?`+"(?:$|[^\\d])"),u("COERCERTL",a[s.COERCE],!0),u("LONETILDE","(?:~>?)"),u("TILDETRIM",`(\\s*)${a[s.LONETILDE]}\\s+`,!0),t.tildeTrimReplace="$1~",u("TILDE",`^${a[s.LONETILDE]}${a[s.XRANGEPLAIN]}$`),u("TILDELOOSE",`^${a[s.LONETILDE]}${a[s.XRANGEPLAINLOOSE]}$`),u("LONECARET","(?:\\^)"),u("CARETTRIM",`(\\s*)${a[s.LONECARET]}\\s+`,!0),t.caretTrimReplace="$1^",u("CARET",`^${a[s.LONECARET]}${a[s.XRANGEPLAIN]}$`),u("CARETLOOSE",`^${a[s.LONECARET]}${a[s.XRANGEPLAINLOOSE]}$`),u("COMPARATORLOOSE",`^${a[s.GTLT]}\\s*(${a[s.LOOSEPLAIN]})$|^$`),u("COMPARATOR",`^${a[s.GTLT]}\\s*(${a[s.FULLPLAIN]})$|^$`),u("COMPARATORTRIM",`(\\s*)${a[s.GTLT]}\\s*(${a[s.LOOSEPLAIN]}|${a[s.XRANGEPLAIN]})`,!0),t.comparatorTrimReplace="$1$2$3",u("HYPHENRANGE",`^\\s*(${a[s.XRANGEPLAIN]})`+"\\s+-\\s+"+`(${a[s.XRANGEPLAIN]})`+"\\s*$"),u("HYPHENRANGELOOSE",`^\\s*(${a[s.XRANGEPLAINLOOSE]})`+"\\s+-\\s+"+`(${a[s.XRANGEPLAINLOOSE]})`+"\\s*$"),u("STAR","(<|>)?=?\\s*\\*")},300:function(e,t,r){const n=r(78);e.exports=(e,t)=>e.sort((e,r)=>n(e,r,t))},301:function(e,t,r){const n=r(78);e.exports=(e,t)=>e.sort((e,r)=>n(r,e,t))},302:function(e,t,r){const n=r(15),o=r(31),{re:i,t:a}=r(30);e.exports=(e,t)=>{if(e instanceof n)return e;if("number"==typeof e&&(e=String(e)),"string"!=typeof e)return null;let r=null;if((t=t||{}).rtl){let t;for(;(t=i[a.COERCERTL].exec(e))&&(!r||r.index+r[0].length!==e.length);)r&&t.index+t[0].length===r.index+r[0].length||(r=t),i[a.COERCERTL].lastIndex=t.index+t[1].length+t[2].length;i[a.COERCERTL].lastIndex=-1}else r=e.match(i[a.COERCE]);return null===r?null:o(`${r[2]}.${r[3]||"0"}.${r[4]||"0"}`,t)}},303:function(e,t,r){const n=r(20);e.exports=(e,t)=>new n(e,t).set.map(e=>e.map(e=>e.value).join(" ").trim().split(" "))},304:function(e,t,r){const n=r(15),o=r(20);e.exports=(e,t,r)=>{let i=null,a=null,s=null;try{s=new o(t,r)}catch(e){return null}return e.forEach(e=>{s.test(e)&&(i&&-1!==a.compare(e)||(i=e,a=new n(i,r)))}),i}},305:function(e,t,r){const n=r(15),o=r(20);e.exports=(e,t,r)=>{let i=null,a=null,s=null;try{s=new o(t,r)}catch(e){return null}return e.forEach(e=>{s.test(e)&&(i&&1!==a.compare(e)||(i=e,a=new n(i,r)))}),i}},306:function(e,t,r){const n=r(15),o=r(20),i=r(51);e.exports=(e,t)=>{e=new o(e,t);let r=new n("0.0.0");if(e.test(r))return r;if(r=new n("0.0.0-0"),e.test(r))return r;r=null;for(let t=0;t<e.set.length;++t){e.set[t].forEach(e=>{const t=new n(e.semver.version);switch(e.operator){case">":0===t.prerelease.length?t.patch++:t.prerelease.push(0),t.raw=t.format();case"":case">=":r&&!i(r,t)||(r=t);break;case"<":case"<=":break;default:throw new Error(`Unexpected operation: ${e.operator}`)}})}return r&&e.test(r)?r:null}},307:function(e,t,r){const n=r(20);e.exports=(e,t)=>{try{return new n(e,t).range||"*"}catch(e){return null}}},308:function(e,t,r){const n=r(83);e.exports=(e,t,r)=>n(e,t,">",r)},309:function(e,t,r){const n=r(83);e.exports=(e,t,r)=>n(e,t,"<",r)},31:function(e,t,r){const{MAX_LENGTH:n}=r(49),{re:o,t:i}=r(30),a=r(15);e.exports=(e,t)=>{if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof a)return e;if("string"!=typeof e)return null;if(e.length>n)return null;if(!(t.loose?o[i.LOOSE]:o[i.FULL]).test(e))return null;try{return new a(e,t)}catch(e){return null}}},310:function(e,t,r){const n=r(20);e.exports=(e,t,r)=>(e=new n(e,r),t=new n(t,r),e.intersects(t))},313:function(e,t,r){"use strict";r.r(t);var n,o=r(58),i=r.n(o),a=r(141),s=r.n(a),c=r(7),u=r(90),l=r(1),d=r.n(l),p=r(33),h=r(8),f=r(6),E=r(142),m=r.n(E),v=r(4),I={throttle:m.a},b=null,w=null,g=I.throttle((function(){b=w;var e=w.map((function(e){return e.remove("chromeSessionId")})),t={savedWindowStateVersion:1,savedWindowState:JSON.stringify(e,null,2)};chrome.storage.local.set(t,(function(){d.a.debug((new Date).toString()+" succesfully wrote window state")}))}),3e4),R=r(17),$=r.n(R),O=r(10),N=(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),T=function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function a(e){try{c(n.next(e))}catch(e){i(e)}}function s(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}c((n=n.apply(e,t||[])).next())}))},L=function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},S=function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)a.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return a},y=function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},A={has:i.a,fromPairs:s.a},C=d.a.getLogger("chrome-events"),k=null,P=null,x=function(e){return!A.has(e,"url")&&"_"!==e.title[0]};function M(e,t){return T(this,void 0,void 0,(function(){var r,n,o;return L(this,(function(i){if(e.children)for(r=0;r<e.children.length;r++)if((n=e.children[r]).title.toLowerCase()===t.toLowerCase())return[2,n];return d.a.info("Child folder ",t," Not found, creating..."),o={parentId:e.id,title:t},[2,$.a.bookmarks.create(o)]}))}))}var j=function(){return T(void 0,void 0,void 0,(function(){var e,t,r,n,o,i,a,s,c;return L(this,(function(l){switch(l.label){case 0:return[4,$.a.bookmarks.getTree()];case 1:return e=l.sent(),t=e[0].children,void 0===(r=t[1])?(d.a.warn("Could not attach to Chrome predefined 'Other Bookmarks' folder"),d.a.warn("Attempting to attach to root (Boomarks Bar) as a workaround for Brave Browser issue"),d.a.warn("See https://github.com/brave/brave-browser/issues/7639 for additional info"),r=t[t.length-1]):d.a.debug("'Other Bookmarks' folder acquired"),[4,M(r,"Tabli Saved Windows")];case 2:return n=l.sent(),k=n.id,[4,M(n,"_Archive")];case 3:return o=l.sent(),P=o.id,[4,$.a.bookmarks.getSubTree(n.id)];case 4:return i=l.sent(),a=new p.a({folderId:k,archiveFolderId:P}),s=function(e,t){d.a.debug("loadManagedWindows:  tabliFolder: ",t);for(var r=[],n=0;n<t.children.length;n++){var o=t.children[n];x(o)&&r.push(O.f(o))}return e.registerTabWindows(r)}(a,i[0]),[4,$.a.storage.local.get({readRelNotesVersion:""})];case 5:return c=l.sent(),h=s,f=c.readRelNotesVersion,E=chrome.runtime.getManifest(),m=!u.valid(f)||u.gt(E.version,f),[2,h.set("showRelNotes",m)]}var h,f,E,m}))}))};function D(e,t,r){return void 0===r&&(r=!1),T(this,void 0,void 0,(function(){var n,o;return L(this,(function(i){switch(i.label){case 0:return C.debug("Chrome Event: tabs.onCreated: ",t),[4,Object(v.awaitableUpdate)(e,(function(e){var n=e.getTabWindowByChromeId(t.windowId);if(!n)return d.a.warn("tabs.onCreated: window id not found: ",t.windowId),[e,null];var o=void 0;if(t.openerTabId){var i=n.findChromeTabId(t.openerTabId);if(i){var a=S(i,2);a[0];o=a[1].url}}var s=e.handleTabCreated(n,t,o),c=s.getTabWindowByChromeId(t.windowId);return[r?s.handleTabActivated(c,t.id):s,null]}))];case 1:return n=S.apply(void 0,[i.sent(),2]),o=n[0],n[1],o.preferences.dedupeTabs&&t.id&&B(o,e,t.id,t,t),[2]}}))}))}function F(e,t,r){d.a.debug("onTabRemoved: ",t,r),Object(v.update)(e,(function(e){var n=e.getTabWindowByChromeId(t);return n?e.handleTabClosed(n,r):(d.a.info("tabs.onTabRemoved: window id not found: ",t),e)}))}var B=function(e,t,r,n,o){return T(void 0,void 0,void 0,(function(){var i,a,s,c,u,l,p,h,E,m;return L(this,(function(v){switch(v.label){case 0:(function(e){return e.map((function(e){var t=S(e,2),r=t[0],n=t[1];return[r.toJS(),n.toJS()]}))}),v.label=1;case 1:return v.trys.push([1,4,,5]),null!=(i=n.url)&&i.length>0?(a=e.getTabItemByChromeTabId(r))&&a.open&&a.openState.openerUrl===i?(d.a.debug("dedupeTab: user-initiated Duplicate of ",i,", skipping..."),[2]):(s=e.findURL(i),c=function(e,t){return e.open&&e.openWindowId===o.windowId&&t.open&&t.openState.openTabId===r},(u=s.filter((function(e){var t=S(e,2),r=t[0],n=t[1];return!c(r,n)}))).length>0?(l=S(u[0],2),p=l[0],h=l[1],d.a.debug("*** dedupeTab: closing detected duplicate tab ",r),E=e.getTabWindowByChromeId(o.windowId),[4,f.b(E,r,t)]):[3,3]):[3,3];case 2:v.sent(),f.a(p,h,0,t),v.label=3;case 3:return[3,5];case 4:return m=v.sent(),d.a.warn("caught error during tab de-dup (ignoring...): ",m),[3,5];case 5:return[2]}}))}))},G=function(e,t,r,n,o){d.a.debug("handleBookmarkUpdate: ",r),Object(v.update)(e,(function(e){var i,a=e;if(x(r))t===k&&(i=e.getSavedWindowByBookmarkId(r.id))&&(a=o(e,i));else if(i=e.getSavedWindowByBookmarkId(t)){var s=i.findChromeBookmarkId(r.id);if(s){var c=S(s,2),u=c[0],l=c[1];a=n(e,i,u,l)}}return a}))};function U(e){chrome.windows.onRemoved.addListener((function(t){C.debug("Chrome Event:: windows.onRemoved: ",t),Object(v.update)(e,(function(e){var r=e.getTabWindowByChromeId(t);return r?e.handleTabWindowClosed(r):e}))})),chrome.windows.onCreated.addListener((function(t){C.debug("Chrome Event:: windows.onCreated: ",t),Object(v.update)(e,(function(e){return e.syncChromeWindow(t)}))})),chrome.windows.onFocusChanged.addListener((function(t){C.debug("Chrome Event:: windows.onFocusChanged: ",t),t!==chrome.windows.WINDOW_ID_NONE&&Object(v.update)(e,(function(e){return e.setCurrentWindowId(t)}))})),chrome.tabs.onCreated.addListener((function(t){return D(e,t)})),chrome.tabs.onUpdated.addListener((function(t,r,n){return function(e,t,r,n){return T(void 0,void 0,void 0,(function(){var o,i;return L(this,(function(a){switch(a.label){case 0:return C.debug("Chrome Event: tabs.onUpdated: ",t,r,n),[4,Object(v.awaitableUpdate)(e,(function(e){var o=e.getTabWindowByChromeId(n.windowId);return o?[e.handleTabUpdated(o,t,r),null]:(d.a.warn("tabs.onUpdated: window id not found: ",n.windowId),[e,null])}))];case 1:return o=S.apply(void 0,[a.sent(),2]),i=o[0],o[1],i.preferences.dedupeTabs&&B(i,e,t,r,n),[2]}}))}))}(e,t,r,n)})),chrome.tabs.onActivated.addListener((function(t){C.debug("Chrome Event: tabs.onActivated: ",t),Object(v.update)(e,(function(e){var r=e.getTabWindowByChromeId(t.windowId);return r?r?e.handleTabActivated(r,t.tabId):e:(d.a.warn("tabs.onActivated: window id not found: ",t.windowId,t),e)}))})),chrome.tabs.onRemoved.addListener((function(t,r){C.debug("Chrome Event: tabs.onRemoved: ",t,r),r.isWindowClosing||F(e,r.windowId,t)})),chrome.tabs.onReplaced.addListener((function(t,r){C.debug("Chrome Event: tabs.onReplaced: added: ",t,", removed: ",r),Object(v.update)(e,(function(n){var o=n.getTabWindowByChromeTabId(r);if(!o)return d.a.info("tabs.onReplaced: could not find window for removed tab: ",r),n;var i=n.handleTabClosed(o,r);return chrome.tabs.get(t,(function(t){return D(e,t)})),i}))})),chrome.tabs.onMoved.addListener((function(t,r){C.debug("Chrome Event: tabs.onMoved: ",t,r),f.y(r.windowId,e)})),chrome.tabs.onDetached.addListener((function(t,r){C.debug("Chrome Event: tabs.onDetached: ",t,r),F(e,r.oldWindowId,t)})),chrome.tabs.onAttached.addListener((function(t,r){C.debug("Chrome Event: tabs.onAttached: ",t,r),chrome.tabs.get(t,(function(t){return D(e,t,!0)}))})),chrome.bookmarks.onCreated.addListener((function(t,r){return function(e,t,r){C.debug("Chrome Event: boomarks.onCreated: ",t,r),Object(v.update)(e,(function(e){var t,n=e;if(x(r)){if(r.parentId===k&&!(t=e.getSavedWindowByBookmarkId(r.id))){var o=O.f(r);n=e.registerTabWindow(o)}}else(t=e.getSavedWindowByBookmarkId(r.parentId))&&(t.findChromeBookmarkId(r.id)||(d.a.debug("new bookmark in saved window: ",r),n=e.handleBookmarkCreated(t,r)));return n}))}(e,t,r)})),chrome.bookmarks.onRemoved.addListener((function(t,r){return function(e,t,r){C.debug("Chrome Event: bookmarks.onRemoved: ",t,r),G(e,r.parentId,r.node,(function(e,t,r,n){return e.handleTabUnsaved(t,n)}),(function(e,t){return e.unmanageWindow(t)}))}(e,t,r)})),chrome.bookmarks.onMoved.addListener((function(t,r){return function(e,t,r){C.debug("Chrome Event: bookmarks.onMoved: ",t,r),r.oldParentId===k&&r.parentId===P&&Object(v.update)(e,(function(e){var r=e,n=e.getSavedWindowByBookmarkId(t.toString());return n&&(r=e.unmanageWindow(n)),r}))}(e,t,r)})),chrome.bookmarks.onChanged.addListener((function(t,r){return function(e,t,r){return T(void 0,void 0,void 0,(function(){var n,o;return L(this,(function(i){switch(i.label){case 0:return C.debug("Chrome Event: bookmarks.Onchanged: ",t,r),[4,$.a.bookmarks.get(t)];case 1:return(n=i.sent())&&n.length>0&&(o=n[0],G(e,o.parentId,o,(function(e,t,n,o){return e.handleBookmarkUpdated(t,o,r)}),(function(e,t){return function(e,t,r){return null==r?e:e.updateSavedWindowTitle(t,r)}(e,t,r.title)}))),[2]}}))}))}(e,t,r)}))}var _={windowId:-1,matches:c.b(),bestMatch:null,tabCount:0},X=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return N(t,e),t}(c.c(_));function W(e,t){var r=e.getUrlBookmarkIdMap(),n=c.d(t).map((function(t){return function(e,t,r){var n=r.tabs.map((function(e){return t.get(e.url,null)})).filter((function(e){return null!==e})).map((function(e){return e.countBy((function(e){return e}))})).reduce((function(e,t){return e.mergeWith((function(e,t){return e+t}),t)}),c.b());var o=n.filter((function(t,n){var o=r.tabs.length,i=e.bookmarkIdMap.get(n).tabItems.count();return t>1||1===i&&1===t||t===o||t/i>=.25})),i=h.b(o);return new X({windowId:r.id,matches:n,bestMatch:i,tabCount:r.tabs.length})}(e,r,t)})).filter((function(e){return e.bestMatch})).groupBy((function(e){return e.bestMatch})).map((function(e){var t=e.map((function(e){var t=e.matches.get(e.bestMatch);return[e.windowId,t]}));return c.b(t)})).map((function(e){return h.b(e)})).filter((function(e){return e})),o=A.fromPairs(t.map((function(e){return[e.id,e]})));return n.reduce((function(e,t,r){var n=o[t],i=e.bookmarkIdMap.get(r);return e.attachChromeWindow(i,n)}),e)}function V(e){return T(this,void 0,void 0,(function(){var t;return L(this,(function(r){switch(r.label){case 0:return[4,$.a.windows.getAll({populate:!0})];case 1:return t=r.sent(),[2,W(e,t)]}}))}))}function H(e){return T(this,void 0,void 0,(function(){var t,r,n,o,i,a,s,u,l,p,h,f,E,m,v,I,b,w;return L(this,(function(g){switch(g.label){case 0:return[4,$.a.storage.local.get("savedWindowState")];case 1:if(!(t=g.sent()))return[2,e];if(!(r=t.savedWindowState))return d.a.debug("loadSnapState: no saved window state found in local storage"),[2,e];n=JSON.parse(r),d.a.debug("loadSnapState: read: ",n),o=e.bookmarkIdMap.filter((function(e){return!e.open})),i=o.keys(),a={};try{for(s=y(i),u=s.next();!u.done;u=s.next())l=u.value,(p=n[l])&&(h=p.tabItems.filter((function(e){return e.open}))).length>0&&(f=h.map((function(e){return O.m(e)})),E=c.a(f),a[l]=E)}catch(e){b={error:e}}finally{try{u&&!u.done&&(w=s.return)&&w.call(s)}finally{if(b)throw b.error}}return m=Object.keys(a).length,d.a.debug("read window snapshot state for ",m," saved windows"),v=e.bookmarkIdMap.map((function(e,t){var r=a[t];if(null==r)return e;var n=e.tabItems.filter((function(e){return e.saved})).map(O.j),o=O.g(n,r);return e.set("tabItems",o).set("snapshot",!0)})),I=e.set("bookmarkIdMap",v),d.a.debug("merged window state snapshot from local storage"),[2,I]}}))}))}!function e(){return T(this,void 0,void 0,(function(){var t,r,n,o;return L(this,(function(i){switch(i.label){case 0:return i.trys.push([0,8,,9]),h.l(d.a),h.l(C),d.a.info("bgHelper started, env: ","production"),f.q(e),[4,j()];case 1:return[4,V(i.sent())];case 2:return[4,H(i.sent())];case 3:return t=i.sent(),r=Object(v.mkRef)(t),window.stateRef=r,window.isExtension=!0,[4,f.h(r)];case 4:return i.sent(),[4,f.z(r)];case 5:return i.sent(),d.a.debug("initial sync of chrome windows complete."),d.a.debug("before sync: stateRef: ",r),[4,f.A(r)];case 6:return i.sent(),s=r,chrome.runtime.onConnect.addListener((function(e){C.debug("Chrome Event: onConnect"),e.onMessage.addListener((function(t){C.debug("Chrome Event: onMessage ",t);var r=t.listenerId;e.onDisconnect.addListener((function(){C.debug("Chrome Event: onDisconnect"),Object(v.removeStateChangeListener)(s,r),d.a.debug("Removed view listener ",r)}))}))})),U(r),[4,f.f(r)];case 7:return n=i.sent(),d.a.info("main: popoutOnStart: ",n.preferences.popoutOnStart),n.preferences.popoutOnStart&&f.u(r),chrome.commands.onCommand.addListener((function(e){C.debug("Chrome Event: onCommand: ",e),"show_popout"===e&&f.u(r)})),a=r,Object(v.addStateChangeListener)(a,(function(e){var t;w=e.bookmarkIdMap,null==b?b=w:((t=function(e,t){var r=e.keySeq().toSet(),n=t.keySeq().toSet(),o=r.subtract(n),i=t.keySeq().filter((function(r){return!o.has(r)&&e.get(r)!==t.get(r)})).map((function(e){return t.get(e)}));return{deletes:o,updates:i}}(b,w)).deletes.count()>0||t.updates.count()>0)&&g()})),d.a.debug("savedState.init: registered state change listener"),[3,9];case 8:return o=i.sent(),d.a.error("*** caught top level exception: ",o),[3,9];case 9:return[2]}var a,s}))}))}()},49:function(e,t){const r=Number.MAX_SAFE_INTEGER||9007199254740991;e.exports={SEMVER_SPEC_VERSION:"2.0.0",MAX_LENGTH:256,MAX_SAFE_INTEGER:r,MAX_SAFE_COMPONENT_LENGTH:16}},50:function(e,t,r){(function(t){const r="object"==typeof t&&t.env&&t.env.NODE_DEBUG&&/\bsemver\b/i.test(t.env.NODE_DEBUG)?(...e)=>console.error("SEMVER",...e):()=>{};e.exports=r}).call(this,r(91))},51:function(e,t,r){const n=r(22);e.exports=(e,t,r)=>n(e,t,r)>0},76:function(e,t){const r=/^[0-9]+$/,n=(e,t)=>{const n=r.test(e),o=r.test(t);return n&&o&&(e=+e,t=+t),e===t?0:n&&!o?-1:o&&!n?1:e<t?-1:1};e.exports={compareIdentifiers:n,rcompareIdentifiers:(e,t)=>n(t,e)}},77:function(e,t,r){const n=r(22);e.exports=(e,t,r)=>0===n(e,t,r)},78:function(e,t,r){const n=r(15);e.exports=(e,t,r)=>{const o=new n(e,r),i=new n(t,r);return o.compare(i)||o.compareBuild(i)}},79:function(e,t,r){const n=r(22);e.exports=(e,t,r)=>n(e,t,r)<0},80:function(e,t,r){const n=r(22);e.exports=(e,t,r)=>n(e,t,r)>=0},81:function(e,t,r){const n=r(22);e.exports=(e,t,r)=>n(e,t,r)<=0},82:function(e,t,r){const n=Symbol("SemVer ANY");class o{static get ANY(){return n}constructor(e,t){if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof o){if(e.loose===!!t.loose)return e;e=e.value}c("comparator",e,t),this.options=t,this.loose=!!t.loose,this.parse(e),this.semver===n?this.value="":this.value=this.operator+this.semver.version,c("comp",this)}parse(e){const t=this.options.loose?i[a.COMPARATORLOOSE]:i[a.COMPARATOR],r=e.match(t);if(!r)throw new TypeError(`Invalid comparator: ${e}`);this.operator=void 0!==r[1]?r[1]:"","="===this.operator&&(this.operator=""),r[2]?this.semver=new u(r[2],this.options.loose):this.semver=n}toString(){return this.value}test(e){if(c("Comparator.test",e,this.options.loose),this.semver===n||e===n)return!0;if("string"==typeof e)try{e=new u(e,this.options)}catch(e){return!1}return s(e,this.operator,this.semver,this.options)}intersects(e,t){if(!(e instanceof o))throw new TypeError("a Comparator is required");if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),""===this.operator)return""===this.value||new l(e.value,t).test(this.value);if(""===e.operator)return""===e.value||new l(this.value,t).test(e.semver);const r=!(">="!==this.operator&&">"!==this.operator||">="!==e.operator&&">"!==e.operator),n=!("<="!==this.operator&&"<"!==this.operator||"<="!==e.operator&&"<"!==e.operator),i=this.semver.version===e.semver.version,a=!(">="!==this.operator&&"<="!==this.operator||">="!==e.operator&&"<="!==e.operator),c=s(this.semver,"<",e.semver,t)&&(">="===this.operator||">"===this.operator)&&("<="===e.operator||"<"===e.operator),u=s(this.semver,">",e.semver,t)&&("<="===this.operator||"<"===this.operator)&&(">="===e.operator||">"===e.operator);return r||n||i&&a||c||u}}e.exports=o;const{re:i,t:a}=r(30),s=r(128),c=r(50),u=r(15),l=r(20)},83:function(e,t,r){const n=r(15),o=r(82),{ANY:i}=o,a=r(20),s=r(129),c=r(51),u=r(79),l=r(81),d=r(80);e.exports=(e,t,r,p)=>{let h,f,E,m,v;switch(e=new n(e,p),t=new a(t,p),r){case">":h=c,f=l,E=u,m=">",v=">=";break;case"<":h=u,f=d,E=c,m="<",v="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(s(e,t,p))return!1;for(let r=0;r<t.set.length;++r){const n=t.set[r];let a=null,s=null;if(n.forEach(e=>{e.semver===i&&(e=new o(">=0.0.0")),a=a||e,s=s||e,h(e.semver,a.semver,p)?a=e:E(e.semver,s.semver,p)&&(s=e)}),a.operator===m||a.operator===v)return!1;if((!s.operator||s.operator===m)&&f(e,s.semver))return!1;if(s.operator===v&&E(e,s.semver))return!1}return!0}},90:function(e,t,r){const n=r(30);e.exports={re:n.re,src:n.src,tokens:n.t,SEMVER_SPEC_VERSION:r(49).SEMVER_SPEC_VERSION,SemVer:r(15),compareIdentifiers:r(76).compareIdentifiers,rcompareIdentifiers:r(76).rcompareIdentifiers,parse:r(31),valid:r(290),clean:r(291),inc:r(292),diff:r(293),major:r(294),minor:r(295),patch:r(296),prerelease:r(297),compare:r(22),rcompare:r(298),compareLoose:r(299),compareBuild:r(78),sort:r(300),rsort:r(301),gt:r(51),lt:r(79),eq:r(77),neq:r(127),gte:r(80),lte:r(81),cmp:r(128),coerce:r(302),Comparator:r(82),Range:r(20),satisfies:r(129),toComparators:r(303),maxSatisfying:r(304),minSatisfying:r(305),minVersion:r(306),validRange:r(307),outside:r(83),gtr:r(308),ltr:r(309),intersects:r(310)}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvbmVxLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2NtcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9zYXRpc2ZpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9mcm9tUGFpcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90aHJvdHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtdmVyL2NsYXNzZXMvc2VtdmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW12ZXIvY2xhc3Nlcy9yYW5nZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9jb21wYXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL3ZhbGlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2NsZWFuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2luYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9kaWZmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL21ham9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL21pbm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL3BhdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL3ByZXJlbGVhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvcmNvbXBhcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvY29tcGFyZS1sb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtdmVyL2ludGVybmFsL3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL3NvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvcnNvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvY29lcmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL3RvLWNvbXBhcmF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL21heC1zYXRpc2Z5aW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL21pbi1zYXRpc2Z5aW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL21pbi12ZXJzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL3ZhbGlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL2d0ci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtdmVyL3Jhbmdlcy9sdHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvcGFyc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbXZlci9yYW5nZXMvaW50ZXJzZWN0cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvc2F2ZWRTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvYmdIZWxwZXIudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbXZlci9pbnRlcm5hbC9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbXZlci9pbnRlcm5hbC9kZWJ1Zy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9ndC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtdmVyL2ludGVybmFsL2lkZW50aWZpZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2VxLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2NvbXBhcmUtYnVpbGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvbHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvZ3RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2x0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtdmVyL2NsYXNzZXMvY29tcGFyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtdmVyL3Jhbmdlcy9vdXRzaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW12ZXIvaW5kZXguanMiXSwibmFtZXMiOlsid2VicGFja0pzb25wQ2FsbGJhY2siLCJkYXRhIiwibW9kdWxlSWQiLCJjaHVua0lkIiwiY2h1bmtJZHMiLCJtb3JlTW9kdWxlcyIsImV4ZWN1dGVNb2R1bGVzIiwiaSIsInJlc29sdmVzIiwibGVuZ3RoIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5zdGFsbGVkQ2h1bmtzIiwicHVzaCIsIm1vZHVsZXMiLCJwYXJlbnRKc29ucEZ1bmN0aW9uIiwic2hpZnQiLCJkZWZlcnJlZE1vZHVsZXMiLCJhcHBseSIsImNoZWNrRGVmZXJyZWRNb2R1bGVzIiwicmVzdWx0IiwiZGVmZXJyZWRNb2R1bGUiLCJmdWxmaWxsZWQiLCJqIiwiZGVwSWQiLCJzcGxpY2UiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwicyIsImluc3RhbGxlZE1vZHVsZXMiLCIxIiwiZXhwb3J0cyIsIm1vZHVsZSIsImwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicCIsImpzb25wQXJyYXkiLCJ3aW5kb3ciLCJvbGRKc29ucEZ1bmN0aW9uIiwic2xpY2UiLCJjb21wYXJlIiwiYSIsImIiLCJsb29zZSIsImVxIiwibmVxIiwiZ3QiLCJndGUiLCJsdCIsImx0ZSIsIm9wIiwidmVyc2lvbiIsIlR5cGVFcnJvciIsIlJhbmdlIiwicmFuZ2UiLCJvcHRpb25zIiwiZXIiLCJ0ZXN0IiwicGFpcnMiLCJpbmRleCIsInBhaXIiLCJkZWJvdW5jZSIsImlzT2JqZWN0IiwiZnVuYyIsIndhaXQiLCJsZWFkaW5nIiwidHJhaWxpbmciLCJkZWJ1ZyIsIk1BWF9MRU5HVEgiLCJNQVhfU0FGRV9JTlRFR0VSIiwicmUiLCJjb21wYXJlSWRlbnRpZmllcnMiLCJTZW1WZXIiLCJpbmNsdWRlUHJlcmVsZWFzZSIsInRoaXMiLCJ0cmltIiwibWF0Y2giLCJMT09TRSIsIkZVTEwiLCJyYXciLCJtYWpvciIsIm1pbm9yIiwicGF0Y2giLCJwcmVyZWxlYXNlIiwic3BsaXQiLCJtYXAiLCJpZCIsIm51bSIsImJ1aWxkIiwiZm9ybWF0Iiwiam9pbiIsIm90aGVyIiwiY29tcGFyZU1haW4iLCJjb21wYXJlUHJlIiwidW5kZWZpbmVkIiwicmVsZWFzZSIsImlkZW50aWZpZXIiLCJpbmMiLCJpc05hTiIsIkVycm9yIiwiQ29tcGFyYXRvciIsInNldCIsInBhcnNlUmFuZ2UiLCJmaWx0ZXIiLCJjb21wcyIsImhyIiwiSFlQSEVOUkFOR0VMT09TRSIsIkhZUEhFTlJBTkdFIiwicmVwbGFjZSIsImh5cGhlblJlcGxhY2UiLCJDT01QQVJBVE9SVFJJTSIsImNvbXBhcmF0b3JUcmltUmVwbGFjZSIsIlRJTERFVFJJTSIsInRpbGRlVHJpbVJlcGxhY2UiLCJDQVJFVFRSSU0iLCJjYXJldFRyaW1SZXBsYWNlIiwiY29tcFJlIiwiQ09NUEFSQVRPUkxPT1NFIiwiQ09NUEFSQVRPUiIsImNvbXAiLCJwYXJzZUNvbXBhcmF0b3IiLCJzb21lIiwidGhpc0NvbXBhcmF0b3JzIiwiaXNTYXRpc2ZpYWJsZSIsInJhbmdlQ29tcGFyYXRvcnMiLCJldmVyeSIsInRoaXNDb21wYXJhdG9yIiwicmFuZ2VDb21wYXJhdG9yIiwiaW50ZXJzZWN0cyIsInRlc3RTZXQiLCJjb21wYXJhdG9ycyIsInJlbWFpbmluZ0NvbXBhcmF0b3JzIiwidGVzdENvbXBhcmF0b3IiLCJwb3AiLCJvdGhlckNvbXBhcmF0b3IiLCJyZXBsYWNlQ2FyZXRzIiwicmVwbGFjZVRpbGRlcyIsInJlcGxhY2VYUmFuZ2VzIiwicmVwbGFjZVN0YXJzIiwiaXNYIiwidG9Mb3dlckNhc2UiLCJyZXBsYWNlVGlsZGUiLCJUSUxERUxPT1NFIiwiVElMREUiLCJfIiwiTSIsInByIiwicmV0IiwicmVwbGFjZUNhcmV0IiwiQ0FSRVRMT09TRSIsIkNBUkVUIiwicmVwbGFjZVhSYW5nZSIsIlhSQU5HRUxPT1NFIiwiWFJBTkdFIiwiZ3RsdCIsInhNIiwieG0iLCJ4cCIsImFueVgiLCJTVEFSIiwiJDAiLCJmcm9tIiwiZk0iLCJmbSIsImZwIiwiZnByIiwiZmIiLCJ0byIsInRNIiwidG0iLCJ0cCIsInRwciIsInRiIiwic2VtdmVyIiwiQU5ZIiwiYWxsb3dlZCIsInBhcnNlIiwidiIsInZlcnNpb24xIiwidmVyc2lvbjIiLCJ2MSIsInYyIiwiaGFzUHJlIiwicHJlZml4IiwiZGVmYXVsdFJlc3VsdCIsInBhcnNlZCIsIk1BWF9TQUZFX0NPTVBPTkVOVF9MRU5HVEgiLCJzcmMiLCJSIiwiY3JlYXRlVG9rZW4iLCJpc0dsb2JhbCIsIlJlZ0V4cCIsIk5VTUVSSUNJREVOVElGSUVSIiwiTlVNRVJJQ0lERU5USUZJRVJMT09TRSIsIk5PTk5VTUVSSUNJREVOVElGSUVSIiwiUFJFUkVMRUFTRUlERU5USUZJRVIiLCJQUkVSRUxFQVNFSURFTlRJRklFUkxPT1NFIiwiQlVJTERJREVOVElGSUVSIiwiTUFJTlZFUlNJT04iLCJQUkVSRUxFQVNFIiwiQlVJTEQiLCJGVUxMUExBSU4iLCJNQUlOVkVSU0lPTkxPT1NFIiwiUFJFUkVMRUFTRUxPT1NFIiwiTE9PU0VQTEFJTiIsIlhSQU5HRUlERU5USUZJRVIiLCJYUkFOR0VJREVOVElGSUVSTE9PU0UiLCJHVExUIiwiWFJBTkdFUExBSU4iLCJYUkFOR0VQTEFJTkxPT1NFIiwiQ09FUkNFIiwiTE9ORVRJTERFIiwiTE9ORUNBUkVUIiwiY29tcGFyZUJ1aWxkIiwibGlzdCIsInNvcnQiLCJTdHJpbmciLCJydGwiLCJuZXh0IiwiQ09FUkNFUlRMIiwiZXhlYyIsImxhc3RJbmRleCIsInZlcnNpb25zIiwibWF4IiwibWF4U1YiLCJyYW5nZU9iaiIsImZvckVhY2giLCJtaW4iLCJtaW5TViIsIm1pbnZlciIsImNvbXBhcmF0b3IiLCJjb21wdmVyIiwib3BlcmF0b3IiLCJvdXRzaWRlIiwicjEiLCJyMiIsInRocm90dGxlIiwicHJldkJvb2ttYXJrSWRNYXAiLCJsYXRlc3RCb29rbWFya0lkTWFwIiwidGhyb3R0bGVkU2F2ZVN0YXRlIiwic2VyQm9va21hcmtJZE1hcCIsInR3IiwicmVtb3ZlIiwic2F2ZWRTdGF0ZSIsInNhdmVkV2luZG93U3RhdGVWZXJzaW9uIiwic2F2ZWRXaW5kb3dTdGF0ZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJjaHJvbWUiLCJzdG9yYWdlIiwibG9jYWwiLCJEYXRlIiwidG9TdHJpbmciLCJoYXMiLCJmcm9tUGFpcnMiLCJjaHJvbWVFdmVudExvZyIsImdldExvZ2dlciIsInRhYmxpRm9sZGVySWQiLCJhcmNoaXZlRm9sZGVySWQiLCJpc1ZhbGlkV2luZG93Rm9sZGVyIiwiYm9va21hcmtOb2RlIiwidGl0bGUiLCJlbnN1cmVDaGlsZEZvbGRlciIsInBhcmVudE5vZGUiLCJjaGlsZEZvbGRlck5hbWUiLCJjaGlsZHJlbiIsImNoaWxkRm9sZGVyIiwiaW5mbyIsImZvbGRlck9iaiIsInBhcmVudElkIiwiYm9va21hcmtzIiwiaW5pdFdpblN0b3JlIiwiZ2V0VHJlZSIsInRyZWUiLCJyb290Q2hpbGRyZW4iLCJvdGhlckJvb2ttYXJrc05vZGUiLCJ3YXJuIiwidGFibGlGb2xkZXIiLCJhcmNoaXZlRm9sZGVyIiwiZ2V0U3ViVHJlZSIsInN1YlRyZWVOb2RlcyIsImJhc2VXaW5TdG9yZSIsImZvbGRlcklkIiwibG9hZGVkV2luU3RvcmUiLCJ3aW5TdG9yZSIsImZvbGRlclRhYldpbmRvd3MiLCJ3aW5kb3dGb2xkZXIiLCJ0YWJXaW5kb3dVdGlscyIsInJlZ2lzdGVyVGFiV2luZG93cyIsImxvYWRNYW5hZ2VkV2luZG93cyIsInJlYWRSZWxOb3Rlc1ZlcnNpb24iLCJpdGVtcyIsInN0Iiwic3RvcmVkVmVyc2lvbiIsIm1hbmlmZXN0IiwicnVudGltZSIsImdldE1hbmlmZXN0Iiwic2hvd1JlbE5vdGVzIiwib25UYWJDcmVhdGVkIiwic3RhdGVSZWYiLCJ0YWIiLCJtYXJrQWN0aXZlIiwic3RhdGUiLCJ0YWJXaW5kb3ciLCJnZXRUYWJXaW5kb3dCeUNocm9tZUlkIiwid2luZG93SWQiLCJvcGVuZXJVcmwiLCJvcGVuZXJUYWJJZCIsImVudHJ5IiwiZmluZENocm9tZVRhYklkIiwidXJsIiwiaGFuZGxlVGFiQ3JlYXRlZCIsIm53IiwiaGFuZGxlVGFiQWN0aXZhdGVkIiwicHJlZmVyZW5jZXMiLCJkZWR1cGVUYWJzIiwiZGVkdXBlVGFiIiwib25UYWJSZW1vdmVkIiwidGFiSWQiLCJoYW5kbGVUYWJDbG9zZWQiLCJjaGFuZ2VJbmZvIiwidG9KUyIsInRhYkl0ZW0iLCJnZXRUYWJJdGVtQnlDaHJvbWVUYWJJZCIsIm9wZW4iLCJvcGVuU3RhdGUiLCJtYXRjaFBhaXJzIiwiZmluZFVSTCIsInRpIiwib3BlbldpbmRvd0lkIiwib3BlblRhYklkIiwiZmlsdGVyZWRNYXRjaFBhaXJzIiwib3JpZ1RhYldpbmRvdyIsIm9yaWdUYWIiLCJhY3Rpb25zIiwiaGFuZGxlQm9va21hcmtVcGRhdGUiLCJib29rbWFyayIsImhhbmRsZVRhYiIsImhhbmRsZVRhYldpbmRvdyIsIm5leHRTdCIsImdldFNhdmVkV2luZG93QnlCb29rbWFya0lkIiwiZmluZENocm9tZUJvb2ttYXJrSWQiLCJyZWdpc3RlckV2ZW50SGFuZGxlcnMiLCJ3aW5kb3dzIiwib25SZW1vdmVkIiwiYWRkTGlzdGVuZXIiLCJoYW5kbGVUYWJXaW5kb3dDbG9zZWQiLCJvbkNyZWF0ZWQiLCJjaHJvbWVXaW5kb3ciLCJzeW5jQ2hyb21lV2luZG93Iiwib25Gb2N1c0NoYW5nZWQiLCJXSU5ET1dfSURfTk9ORSIsInNldEN1cnJlbnRXaW5kb3dJZCIsInRhYnMiLCJvblVwZGF0ZWQiLCJoYW5kbGVUYWJVcGRhdGVkIiwib25UYWJVcGRhdGVkIiwib25BY3RpdmF0ZWQiLCJhY3RpdmVJbmZvIiwicmVtb3ZlSW5mbyIsImlzV2luZG93Q2xvc2luZyIsIm9uUmVwbGFjZWQiLCJhZGRlZFRhYklkIiwicmVtb3ZlZFRhYklkIiwiZ2V0VGFiV2luZG93QnlDaHJvbWVUYWJJZCIsIm9uTW92ZWQiLCJtb3ZlSW5mbyIsIm9uRGV0YWNoZWQiLCJkZXRhY2hJbmZvIiwib2xkV2luZG93SWQiLCJvbkF0dGFjaGVkIiwiYXR0YWNoSW5mbyIsInJlZ2lzdGVyVGFiV2luZG93IiwiaGFuZGxlQm9va21hcmtDcmVhdGVkIiwib25Cb29rbWFya0NyZWF0ZWQiLCJub2RlIiwiaGFuZGxlVGFiVW5zYXZlZCIsInVubWFuYWdlV2luZG93Iiwib25Cb29rbWFya1JlbW92ZWQiLCJvbGRQYXJlbnRJZCIsIm9uQm9va21hcmtNb3ZlZCIsIm9uQ2hhbmdlZCIsInJlcyIsImhhbmRsZUJvb2ttYXJrVXBkYXRlZCIsInVwZGF0ZVNhdmVkV2luZG93VGl0bGUiLCJzYWZlVXBkYXRlV2luZG93VGl0bGUiLCJvbkJvb2ttYXJrQ2hhbmdlZCIsImRlZmF1bHRNYXRjaEluZm9Qcm9wcyIsIm1hdGNoZXMiLCJiZXN0TWF0Y2giLCJ0YWJDb3VudCIsImF0dGFjaFdpbmRvd0xpc3QiLCJibVN0b3JlIiwid2luZG93TGlzdCIsInVybElkTWFwIiwiZ2V0VXJsQm9va21hcmtJZE1hcCIsImJlc3RCTU1hdGNoZXMiLCJ3IiwibWF0Y2hNYXAiLCJ4IiwiY291bnRCeSIsInJlZHVjZSIsIm1BIiwibUIiLCJtZXJnZVdpdGgiLCJwcmV2IiwidGhyZXNoTWFwIiwibWF0Y2hDb3VudCIsImJvb2ttYXJrSWQiLCJzYXZlZFVybENvdW50IiwiYm9va21hcmtJZE1hcCIsInRhYkl0ZW1zIiwiY291bnQiLCJ1dGlscyIsIk1hdGNoSW5mbyIsImdldFdpbmRvd01hdGNoSW5mbyIsIm1pIiwiZ3JvdXBCeSIsIm1pcyIsImVudHJpZXMiLCJtYXRjaFRhYkNvdW50IiwibW0iLCJjdCIsImNocm9tZVdpbk1hcCIsImJtVGFiV2luZG93IiwiYXR0YWNoQ2hyb21lV2luZG93IiwicmVhdHRhY2hXaW5kb3dzIiwiZ2V0QWxsIiwicG9wdWxhdGUiLCJsb2FkU25hcFN0YXRlIiwic2F2ZWRXaW5kb3dTdGF0ZVN0ciIsImNsb3NlZFdpbmRvd3NNYXAiLCJibVdpbiIsImNsb3NlZFdpbmRvd0lkcyIsImtleXMiLCJzYXZlZE9wZW5UYWJzTWFwIiwib3BlblRhYkl0ZW1zIiwiY29udlRhYkl0ZW1zIiwidGlMaXN0Iiwia2V5Q291bnQiLCJ1cGRCb29rbWFya01hcCIsImJtSWQiLCJzbmFwVGFicyIsImJhc2VTYXZlZEl0ZW1zIiwic2F2ZWQiLCJtZXJnZWRUYWJzIiwibmV4dFN0b3JlIiwibWFpbiIsImlzRXh0ZW5zaW9uIiwib25Db25uZWN0IiwicG9ydCIsIm9uTWVzc2FnZSIsIm1zZyIsImxpc3RlbmVySWQiLCJvbkRpc2Nvbm5lY3QiLCJub1BvcFN0b3JlIiwicG9wb3V0T25TdGFydCIsImNvbW1hbmRzIiwib25Db21tYW5kIiwiY29tbWFuZCIsInN0UmVmIiwiYXBwU3RhdGUiLCJkaWZmcyIsInByZXZNYXAiLCJjdXJNYXAiLCJwcmV2S2V5U2V0Iiwia2V5U2VxIiwidG9TZXQiLCJjdXJLZXlTZXQiLCJkZWxldGVzIiwic3VidHJhY3QiLCJ1cGRhdGVzIiwiayIsImdldERpZmZzIiwiZXJyb3IiLCJOdW1iZXIiLCJTRU1WRVJfU1BFQ19WRVJTSU9OIiwicHJvY2VzcyIsImVudiIsIk5PREVfREVCVUciLCJhcmdzIiwiY29uc29sZSIsIm51bWVyaWMiLCJhbnVtIiwiYm51bSIsInJjb21wYXJlSWRlbnRpZmllcnMiLCJ2ZXJzaW9uQSIsInZlcnNpb25CIiwiY21wIiwic2FtZURpcmVjdGlvbkluY3JlYXNpbmciLCJzYW1lRGlyZWN0aW9uRGVjcmVhc2luZyIsInNhbWVTZW1WZXIiLCJkaWZmZXJlbnREaXJlY3Rpb25zSW5jbHVzaXZlIiwib3Bwb3NpdGVEaXJlY3Rpb25zTGVzc1RoYW4iLCJvcHBvc2l0ZURpcmVjdGlvbnNHcmVhdGVyVGhhbiIsInNhdGlzZmllcyIsImhpbG8iLCJndGZuIiwibHRlZm4iLCJsdGZuIiwiZWNvbXAiLCJoaWdoIiwibG93IiwiaW50ZXJuYWxSZSIsInRva2VucyIsInZhbGlkIiwiY2xlYW4iLCJkaWZmIiwicmNvbXBhcmUiLCJjb21wYXJlTG9vc2UiLCJyc29ydCIsImNvZXJjZSIsInRvQ29tcGFyYXRvcnMiLCJtYXhTYXRpc2Z5aW5nIiwibWluU2F0aXNmeWluZyIsIm1pblZlcnNpb24iLCJ2YWxpZFJhbmdlIiwiZ3RyIiwibHRyIl0sIm1hcHBpbmdzIjoiYUFDRSxTQUFTQSxFQUFxQkMsR0FRN0IsSUFQQSxJQU1JQyxFQUFVQyxFQU5WQyxFQUFXSCxFQUFLLEdBQ2hCSSxFQUFjSixFQUFLLEdBQ25CSyxFQUFpQkws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R0FBSSxFQUFRLElBQ1pKLEdBQUksRUFBUSxJQUNaQyxJQUFLLEVBQVEsS0FDYkUsSUFBSyxFQUFRLElBQ2JFLElBQUssRUFBUSxJQUNidWIsSUFBSyxFQUFRLEtBQ2J1QixPQUFRLEVBQVEsS0FDaEIzWixXQUFZLEVBQVEsSUFDcEIvQyxNQUFPLEVBQVEsSUFDZjBiLFVBQVcsRUFBUSxLQUNuQmlCLGNBQWUsRUFBUSxLQUN2QkMsY0FBZSxFQUFRLEtBQ3ZCQyxjQUFlLEVBQVEsS0FDdkJDLFdBQVksRUFBUSxLQUNwQkMsV0FBWSxFQUFRLEtBQ3BCM1IsUUFBUyxFQUFRLElBQ2pCNFIsSUFBSyxFQUFRLEtBQ2JDLElBQUssRUFBUSxLQUNidFksV0FBWSxFQUFRIiwiZmlsZSI6ImJnSGVscGVyLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xuIFx0ZnVuY3Rpb24gd2VicGFja0pzb25wQ2FsbGJhY2soZGF0YSkge1xuIFx0XHR2YXIgY2h1bmtJZHMgPSBkYXRhWzBdO1xuIFx0XHR2YXIgbW9yZU1vZHVsZXMgPSBkYXRhWzFdO1xuIFx0XHR2YXIgZXhlY3V0ZU1vZHVsZXMgPSBkYXRhWzJdO1xuXG4gXHRcdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuIFx0XHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcbiBcdFx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMCwgcmVzb2x2ZXMgPSBbXTtcbiBcdFx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiYgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRyZXNvbHZlcy5wdXNoKGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSk7XG4gXHRcdFx0fVxuIFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG4gXHRcdH1cbiBcdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZihwYXJlbnRKc29ucEZ1bmN0aW9uKSBwYXJlbnRKc29ucEZ1bmN0aW9uKGRhdGEpO1xuXG4gXHRcdHdoaWxlKHJlc29sdmVzLmxlbmd0aCkge1xuIFx0XHRcdHJlc29sdmVzLnNoaWZ0KCkoKTtcbiBcdFx0fVxuXG4gXHRcdC8vIGFkZCBlbnRyeSBtb2R1bGVzIGZyb20gbG9hZGVkIGNodW5rIHRvIGRlZmVycmVkIGxpc3RcbiBcdFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2guYXBwbHkoZGVmZXJyZWRNb2R1bGVzLCBleGVjdXRlTW9kdWxlcyB8fCBbXSk7XG5cbiBcdFx0Ly8gcnVuIGRlZmVycmVkIG1vZHVsZXMgd2hlbiBhbGwgY2h1bmtzIHJlYWR5XG4gXHRcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIFx0fTtcbiBcdGZ1bmN0aW9uIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCkge1xuIFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0dmFyIGRlZmVycmVkTW9kdWxlID0gZGVmZXJyZWRNb2R1bGVzW2ldO1xuIFx0XHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuIFx0XHRcdGZvcih2YXIgaiA9IDE7IGogPCBkZWZlcnJlZE1vZHVsZS5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0dmFyIGRlcElkID0gZGVmZXJyZWRNb2R1bGVbal07XG4gXHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua3NbZGVwSWRdICE9PSAwKSBmdWxmaWxsZWQgPSBmYWxzZTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYoZnVsZmlsbGVkKSB7XG4gXHRcdFx0XHRkZWZlcnJlZE1vZHVsZXMuc3BsaWNlKGktLSwgMSk7XG4gXHRcdFx0XHRyZXN1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IGRlZmVycmVkTW9kdWxlWzBdKTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHRyZXR1cm4gcmVzdWx0O1xuIFx0fVxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuIFx0Ly8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4gXHQvLyBQcm9taXNlID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxuIFx0dmFyIGluc3RhbGxlZENodW5rcyA9IHtcbiBcdFx0MTogMFxuIFx0fTtcblxuIFx0dmFyIGRlZmVycmVkTW9kdWxlcyA9IFtdO1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHR2YXIganNvbnBBcnJheSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSB8fCBbXTtcbiBcdHZhciBvbGRKc29ucEZ1bmN0aW9uID0ganNvbnBBcnJheS5wdXNoLmJpbmQoanNvbnBBcnJheSk7XG4gXHRqc29ucEFycmF5LnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjaztcbiBcdGpzb25wQXJyYXkgPSBqc29ucEFycmF5LnNsaWNlKCk7XG4gXHRmb3IodmFyIGkgPSAwOyBpIDwganNvbnBBcnJheS5sZW5ndGg7IGkrKykgd2VicGFja0pzb25wQ2FsbGJhY2soanNvbnBBcnJheVtpXSk7XG4gXHR2YXIgcGFyZW50SnNvbnBGdW5jdGlvbiA9IG9sZEpzb25wRnVuY3Rpb247XG5cblxuIFx0Ly8gYWRkIGVudHJ5IG1vZHVsZSB0byBkZWZlcnJlZCBsaXN0XG4gXHRkZWZlcnJlZE1vZHVsZXMucHVzaChbMjg5LDBdKTtcbiBcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gcmVhZHlcbiBcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIiwiY29uc3QgY29tcGFyZSA9IHJlcXVpcmUoJy4vY29tcGFyZScpXG5jb25zdCBuZXEgPSAoYSwgYiwgbG9vc2UpID0+IGNvbXBhcmUoYSwgYiwgbG9vc2UpICE9PSAwXG5tb2R1bGUuZXhwb3J0cyA9IG5lcVxuIiwiY29uc3QgZXEgPSByZXF1aXJlKCcuL2VxJylcbmNvbnN0IG5lcSA9IHJlcXVpcmUoJy4vbmVxJylcbmNvbnN0IGd0ID0gcmVxdWlyZSgnLi9ndCcpXG5jb25zdCBndGUgPSByZXF1aXJlKCcuL2d0ZScpXG5jb25zdCBsdCA9IHJlcXVpcmUoJy4vbHQnKVxuY29uc3QgbHRlID0gcmVxdWlyZSgnLi9sdGUnKVxuXG5jb25zdCBjbXAgPSAoYSwgb3AsIGIsIGxvb3NlKSA9PiB7XG4gIHN3aXRjaCAob3ApIHtcbiAgICBjYXNlICc9PT0nOlxuICAgICAgaWYgKHR5cGVvZiBhID09PSAnb2JqZWN0JylcbiAgICAgICAgYSA9IGEudmVyc2lvblxuICAgICAgaWYgKHR5cGVvZiBiID09PSAnb2JqZWN0JylcbiAgICAgICAgYiA9IGIudmVyc2lvblxuICAgICAgcmV0dXJuIGEgPT09IGJcblxuICAgIGNhc2UgJyE9PSc6XG4gICAgICBpZiAodHlwZW9mIGEgPT09ICdvYmplY3QnKVxuICAgICAgICBhID0gYS52ZXJzaW9uXG4gICAgICBpZiAodHlwZW9mIGIgPT09ICdvYmplY3QnKVxuICAgICAgICBiID0gYi52ZXJzaW9uXG4gICAgICByZXR1cm4gYSAhPT0gYlxuXG4gICAgY2FzZSAnJzpcbiAgICBjYXNlICc9JzpcbiAgICBjYXNlICc9PSc6XG4gICAgICByZXR1cm4gZXEoYSwgYiwgbG9vc2UpXG5cbiAgICBjYXNlICchPSc6XG4gICAgICByZXR1cm4gbmVxKGEsIGIsIGxvb3NlKVxuXG4gICAgY2FzZSAnPic6XG4gICAgICByZXR1cm4gZ3QoYSwgYiwgbG9vc2UpXG5cbiAgICBjYXNlICc+PSc6XG4gICAgICByZXR1cm4gZ3RlKGEsIGIsIGxvb3NlKVxuXG4gICAgY2FzZSAnPCc6XG4gICAgICByZXR1cm4gbHQoYSwgYiwgbG9vc2UpXG5cbiAgICBjYXNlICc8PSc6XG4gICAgICByZXR1cm4gbHRlKGEsIGIsIGxvb3NlKVxuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgb3BlcmF0b3I6ICR7b3B9YClcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBjbXBcbiIsImNvbnN0IFJhbmdlID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9yYW5nZScpXG5jb25zdCBzYXRpc2ZpZXMgPSAodmVyc2lvbiwgcmFuZ2UsIG9wdGlvbnMpID0+IHtcbiAgdHJ5IHtcbiAgICByYW5nZSA9IG5ldyBSYW5nZShyYW5nZSwgb3B0aW9ucylcbiAgfSBjYXRjaCAoZXIpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICByZXR1cm4gcmFuZ2UudGVzdCh2ZXJzaW9uKVxufVxubW9kdWxlLmV4cG9ydHMgPSBzYXRpc2ZpZXNcbiIsIi8qKlxuICogVGhlIGludmVyc2Ugb2YgYF8udG9QYWlyc2A7IHRoaXMgbWV0aG9kIHJldHVybnMgYW4gb2JqZWN0IGNvbXBvc2VkXG4gKiBmcm9tIGtleS12YWx1ZSBgcGFpcnNgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gcGFpcnMgVGhlIGtleS12YWx1ZSBwYWlycy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZnJvbVBhaXJzKFtbJ2EnLCAxXSwgWydiJywgMl1dKTtcbiAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICovXG5mdW5jdGlvbiBmcm9tUGFpcnMocGFpcnMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwYWlycyA9PSBudWxsID8gMCA6IHBhaXJzLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IHt9O1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHBhaXIgPSBwYWlyc1tpbmRleF07XG4gICAgcmVzdWx0W3BhaXJbMF1dID0gcGFpclsxXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZyb21QYWlycztcbiIsInZhciBkZWJvdW5jZSA9IHJlcXVpcmUoJy4vZGVib3VuY2UnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgdGhyb3R0bGVkIGZ1bmN0aW9uIHRoYXQgb25seSBpbnZva2VzIGBmdW5jYCBhdCBtb3N0IG9uY2UgcGVyXG4gKiBldmVyeSBgd2FpdGAgbWlsbGlzZWNvbmRzLiBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYFxuICogbWV0aG9kIHRvIGNhbmNlbCBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0b1xuICogaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgXG4gKiBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgXG4gKiB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWQgd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlXG4gKiB0aHJvdHRsZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnQgY2FsbHMgdG8gdGhlIHRocm90dGxlZCBmdW5jdGlvbiByZXR1cm4gdGhlXG4gKiByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gKlxuICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb25cbiAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAqXG4gKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAqXG4gKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8udGhyb3R0bGVgIGFuZCBgXy5kZWJvdW5jZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB0aHJvdHRsZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aHJvdHRsZSBpbnZvY2F0aW9ucyB0by5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB0aHJvdHRsZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIEF2b2lkIGV4Y2Vzc2l2ZWx5IHVwZGF0aW5nIHRoZSBwb3NpdGlvbiB3aGlsZSBzY3JvbGxpbmcuXG4gKiBqUXVlcnkod2luZG93KS5vbignc2Nyb2xsJywgXy50aHJvdHRsZSh1cGRhdGVQb3NpdGlvbiwgMTAwKSk7XG4gKlxuICogLy8gSW52b2tlIGByZW5ld1Rva2VuYCB3aGVuIHRoZSBjbGljayBldmVudCBpcyBmaXJlZCwgYnV0IG5vdCBtb3JlIHRoYW4gb25jZSBldmVyeSA1IG1pbnV0ZXMuXG4gKiB2YXIgdGhyb3R0bGVkID0gXy50aHJvdHRsZShyZW5ld1Rva2VuLCAzMDAwMDAsIHsgJ3RyYWlsaW5nJzogZmFsc2UgfSk7XG4gKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdGhyb3R0bGVkKTtcbiAqXG4gKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIHRocm90dGxlZCBpbnZvY2F0aW9uLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgdGhyb3R0bGVkLmNhbmNlbCk7XG4gKi9cbmZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIGxlYWRpbmcgPSB0cnVlLFxuICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgIGxlYWRpbmcgPSAnbGVhZGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy5sZWFkaW5nIDogbGVhZGluZztcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICB9XG4gIHJldHVybiBkZWJvdW5jZShmdW5jLCB3YWl0LCB7XG4gICAgJ2xlYWRpbmcnOiBsZWFkaW5nLFxuICAgICdtYXhXYWl0Jzogd2FpdCxcbiAgICAndHJhaWxpbmcnOiB0cmFpbGluZ1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0aHJvdHRsZTtcbiIsImNvbnN0IGRlYnVnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvZGVidWcnKVxuY29uc3QgeyBNQVhfTEVOR1RILCBNQVhfU0FGRV9JTlRFR0VSIH0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9jb25zdGFudHMnKVxuY29uc3QgeyByZSwgdCB9ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvcmUnKVxuXG5jb25zdCB7IGNvbXBhcmVJZGVudGlmaWVycyB9ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvaWRlbnRpZmllcnMnKVxuY2xhc3MgU2VtVmVyIHtcbiAgY29uc3RydWN0b3IgKHZlcnNpb24sIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMgfHwgdHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICBsb29zZTogISFvcHRpb25zLFxuICAgICAgICBpbmNsdWRlUHJlcmVsZWFzZTogZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHZlcnNpb24gaW5zdGFuY2VvZiBTZW1WZXIpIHtcbiAgICAgIGlmICh2ZXJzaW9uLmxvb3NlID09PSAhIW9wdGlvbnMubG9vc2UgJiZcbiAgICAgICAgICB2ZXJzaW9uLmluY2x1ZGVQcmVyZWxlYXNlID09PSAhIW9wdGlvbnMuaW5jbHVkZVByZXJlbGVhc2UpIHtcbiAgICAgICAgcmV0dXJuIHZlcnNpb25cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZlcnNpb24gPSB2ZXJzaW9uLnZlcnNpb25cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2ZXJzaW9uICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBWZXJzaW9uOiAke3ZlcnNpb259YClcbiAgICB9XG5cbiAgICBpZiAodmVyc2lvbi5sZW5ndGggPiBNQVhfTEVOR1RIKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICBgdmVyc2lvbiBpcyBsb25nZXIgdGhhbiAke01BWF9MRU5HVEh9IGNoYXJhY3RlcnNgXG4gICAgICApXG4gICAgfVxuXG4gICAgZGVidWcoJ1NlbVZlcicsIHZlcnNpb24sIG9wdGlvbnMpXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9uc1xuICAgIHRoaXMubG9vc2UgPSAhIW9wdGlvbnMubG9vc2VcbiAgICAvLyB0aGlzIGlzbid0IGFjdHVhbGx5IHJlbGV2YW50IGZvciB2ZXJzaW9ucywgYnV0IGtlZXAgaXQgc28gdGhhdCB3ZVxuICAgIC8vIGRvbid0IHJ1biBpbnRvIHRyb3VibGUgcGFzc2luZyB0aGlzLm9wdGlvbnMgYXJvdW5kLlxuICAgIHRoaXMuaW5jbHVkZVByZXJlbGVhc2UgPSAhIW9wdGlvbnMuaW5jbHVkZVByZXJlbGVhc2VcblxuICAgIGNvbnN0IG0gPSB2ZXJzaW9uLnRyaW0oKS5tYXRjaChvcHRpb25zLmxvb3NlID8gcmVbdC5MT09TRV0gOiByZVt0LkZVTExdKVxuXG4gICAgaWYgKCFtKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIFZlcnNpb246ICR7dmVyc2lvbn1gKVxuICAgIH1cblxuICAgIHRoaXMucmF3ID0gdmVyc2lvblxuXG4gICAgLy8gdGhlc2UgYXJlIGFjdHVhbGx5IG51bWJlcnNcbiAgICB0aGlzLm1ham9yID0gK21bMV1cbiAgICB0aGlzLm1pbm9yID0gK21bMl1cbiAgICB0aGlzLnBhdGNoID0gK21bM11cblxuICAgIGlmICh0aGlzLm1ham9yID4gTUFYX1NBRkVfSU5URUdFUiB8fCB0aGlzLm1ham9yIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBtYWpvciB2ZXJzaW9uJylcbiAgICB9XG5cbiAgICBpZiAodGhpcy5taW5vciA+IE1BWF9TQUZFX0lOVEVHRVIgfHwgdGhpcy5taW5vciA8IDApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbWlub3IgdmVyc2lvbicpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMucGF0Y2ggPiBNQVhfU0FGRV9JTlRFR0VSIHx8IHRoaXMucGF0Y2ggPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIHBhdGNoIHZlcnNpb24nKVxuICAgIH1cblxuICAgIC8vIG51bWJlcmlmeSBhbnkgcHJlcmVsZWFzZSBudW1lcmljIGlkc1xuICAgIGlmICghbVs0XSkge1xuICAgICAgdGhpcy5wcmVyZWxlYXNlID0gW11cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wcmVyZWxlYXNlID0gbVs0XS5zcGxpdCgnLicpLm1hcCgoaWQpID0+IHtcbiAgICAgICAgaWYgKC9eWzAtOV0rJC8udGVzdChpZCkpIHtcbiAgICAgICAgICBjb25zdCBudW0gPSAraWRcbiAgICAgICAgICBpZiAobnVtID49IDAgJiYgbnVtIDwgTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICAgICAgcmV0dXJuIG51bVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaWRcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgdGhpcy5idWlsZCA9IG1bNV0gPyBtWzVdLnNwbGl0KCcuJykgOiBbXVxuICAgIHRoaXMuZm9ybWF0KClcbiAgfVxuXG4gIGZvcm1hdCAoKSB7XG4gICAgdGhpcy52ZXJzaW9uID0gYCR7dGhpcy5tYWpvcn0uJHt0aGlzLm1pbm9yfS4ke3RoaXMucGF0Y2h9YFxuICAgIGlmICh0aGlzLnByZXJlbGVhc2UubGVuZ3RoKSB7XG4gICAgICB0aGlzLnZlcnNpb24gKz0gYC0ke3RoaXMucHJlcmVsZWFzZS5qb2luKCcuJyl9YFxuICAgIH1cbiAgICByZXR1cm4gdGhpcy52ZXJzaW9uXG4gIH1cblxuICB0b1N0cmluZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMudmVyc2lvblxuICB9XG5cbiAgY29tcGFyZSAob3RoZXIpIHtcbiAgICBkZWJ1ZygnU2VtVmVyLmNvbXBhcmUnLCB0aGlzLnZlcnNpb24sIHRoaXMub3B0aW9ucywgb3RoZXIpXG4gICAgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBTZW1WZXIpKSB7XG4gICAgICBpZiAodHlwZW9mIG90aGVyID09PSAnc3RyaW5nJyAmJiBvdGhlciA9PT0gdGhpcy52ZXJzaW9uKSB7XG4gICAgICAgIHJldHVybiAwXG4gICAgICB9XG4gICAgICBvdGhlciA9IG5ldyBTZW1WZXIob3RoZXIsIHRoaXMub3B0aW9ucylcbiAgICB9XG5cbiAgICBpZiAob3RoZXIudmVyc2lvbiA9PT0gdGhpcy52ZXJzaW9uKSB7XG4gICAgICByZXR1cm4gMFxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmNvbXBhcmVNYWluKG90aGVyKSB8fCB0aGlzLmNvbXBhcmVQcmUob3RoZXIpXG4gIH1cblxuICBjb21wYXJlTWFpbiAob3RoZXIpIHtcbiAgICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIFNlbVZlcikpIHtcbiAgICAgIG90aGVyID0gbmV3IFNlbVZlcihvdGhlciwgdGhpcy5vcHRpb25zKVxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICBjb21wYXJlSWRlbnRpZmllcnModGhpcy5tYWpvciwgb3RoZXIubWFqb3IpIHx8XG4gICAgICBjb21wYXJlSWRlbnRpZmllcnModGhpcy5taW5vciwgb3RoZXIubWlub3IpIHx8XG4gICAgICBjb21wYXJlSWRlbnRpZmllcnModGhpcy5wYXRjaCwgb3RoZXIucGF0Y2gpXG4gICAgKVxuICB9XG5cbiAgY29tcGFyZVByZSAob3RoZXIpIHtcbiAgICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIFNlbVZlcikpIHtcbiAgICAgIG90aGVyID0gbmV3IFNlbVZlcihvdGhlciwgdGhpcy5vcHRpb25zKVxuICAgIH1cblxuICAgIC8vIE5PVCBoYXZpbmcgYSBwcmVyZWxlYXNlIGlzID4gaGF2aW5nIG9uZVxuICAgIGlmICh0aGlzLnByZXJlbGVhc2UubGVuZ3RoICYmICFvdGhlci5wcmVyZWxlYXNlLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfSBlbHNlIGlmICghdGhpcy5wcmVyZWxlYXNlLmxlbmd0aCAmJiBvdGhlci5wcmVyZWxlYXNlLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIDFcbiAgICB9IGVsc2UgaWYgKCF0aGlzLnByZXJlbGVhc2UubGVuZ3RoICYmICFvdGhlci5wcmVyZWxlYXNlLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIDBcbiAgICB9XG5cbiAgICBsZXQgaSA9IDBcbiAgICBkbyB7XG4gICAgICBjb25zdCBhID0gdGhpcy5wcmVyZWxlYXNlW2ldXG4gICAgICBjb25zdCBiID0gb3RoZXIucHJlcmVsZWFzZVtpXVxuICAgICAgZGVidWcoJ3ByZXJlbGVhc2UgY29tcGFyZScsIGksIGEsIGIpXG4gICAgICBpZiAoYSA9PT0gdW5kZWZpbmVkICYmIGIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gMFxuICAgICAgfSBlbHNlIGlmIChiID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIDFcbiAgICAgIH0gZWxzZSBpZiAoYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfSBlbHNlIGlmIChhID09PSBiKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY29tcGFyZUlkZW50aWZpZXJzKGEsIGIpXG4gICAgICB9XG4gICAgfSB3aGlsZSAoKytpKVxuICB9XG5cbiAgY29tcGFyZUJ1aWxkIChvdGhlcikge1xuICAgIGlmICghKG90aGVyIGluc3RhbmNlb2YgU2VtVmVyKSkge1xuICAgICAgb3RoZXIgPSBuZXcgU2VtVmVyKG90aGVyLCB0aGlzLm9wdGlvbnMpXG4gICAgfVxuXG4gICAgbGV0IGkgPSAwXG4gICAgZG8ge1xuICAgICAgY29uc3QgYSA9IHRoaXMuYnVpbGRbaV1cbiAgICAgIGNvbnN0IGIgPSBvdGhlci5idWlsZFtpXVxuICAgICAgZGVidWcoJ3ByZXJlbGVhc2UgY29tcGFyZScsIGksIGEsIGIpXG4gICAgICBpZiAoYSA9PT0gdW5kZWZpbmVkICYmIGIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gMFxuICAgICAgfSBlbHNlIGlmIChiID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIDFcbiAgICAgIH0gZWxzZSBpZiAoYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfSBlbHNlIGlmIChhID09PSBiKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY29tcGFyZUlkZW50aWZpZXJzKGEsIGIpXG4gICAgICB9XG4gICAgfSB3aGlsZSAoKytpKVxuICB9XG5cbiAgLy8gcHJlbWlub3Igd2lsbCBidW1wIHRoZSB2ZXJzaW9uIHVwIHRvIHRoZSBuZXh0IG1pbm9yIHJlbGVhc2UsIGFuZCBpbW1lZGlhdGVseVxuICAvLyBkb3duIHRvIHByZS1yZWxlYXNlLiBwcmVtYWpvciBhbmQgcHJlcGF0Y2ggd29yayB0aGUgc2FtZSB3YXkuXG4gIGluYyAocmVsZWFzZSwgaWRlbnRpZmllcikge1xuICAgIHN3aXRjaCAocmVsZWFzZSkge1xuICAgICAgY2FzZSAncHJlbWFqb3InOlxuICAgICAgICB0aGlzLnByZXJlbGVhc2UubGVuZ3RoID0gMFxuICAgICAgICB0aGlzLnBhdGNoID0gMFxuICAgICAgICB0aGlzLm1pbm9yID0gMFxuICAgICAgICB0aGlzLm1ham9yKytcbiAgICAgICAgdGhpcy5pbmMoJ3ByZScsIGlkZW50aWZpZXIpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdwcmVtaW5vcic6XG4gICAgICAgIHRoaXMucHJlcmVsZWFzZS5sZW5ndGggPSAwXG4gICAgICAgIHRoaXMucGF0Y2ggPSAwXG4gICAgICAgIHRoaXMubWlub3IrK1xuICAgICAgICB0aGlzLmluYygncHJlJywgaWRlbnRpZmllcilcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3ByZXBhdGNoJzpcbiAgICAgICAgLy8gSWYgdGhpcyBpcyBhbHJlYWR5IGEgcHJlcmVsZWFzZSwgaXQgd2lsbCBidW1wIHRvIHRoZSBuZXh0IHZlcnNpb25cbiAgICAgICAgLy8gZHJvcCBhbnkgcHJlcmVsZWFzZXMgdGhhdCBtaWdodCBhbHJlYWR5IGV4aXN0LCBzaW5jZSB0aGV5IGFyZSBub3RcbiAgICAgICAgLy8gcmVsZXZhbnQgYXQgdGhpcyBwb2ludC5cbiAgICAgICAgdGhpcy5wcmVyZWxlYXNlLmxlbmd0aCA9IDBcbiAgICAgICAgdGhpcy5pbmMoJ3BhdGNoJywgaWRlbnRpZmllcilcbiAgICAgICAgdGhpcy5pbmMoJ3ByZScsIGlkZW50aWZpZXIpXG4gICAgICAgIGJyZWFrXG4gICAgICAvLyBJZiB0aGUgaW5wdXQgaXMgYSBub24tcHJlcmVsZWFzZSB2ZXJzaW9uLCB0aGlzIGFjdHMgdGhlIHNhbWUgYXNcbiAgICAgIC8vIHByZXBhdGNoLlxuICAgICAgY2FzZSAncHJlcmVsZWFzZSc6XG4gICAgICAgIGlmICh0aGlzLnByZXJlbGVhc2UubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5pbmMoJ3BhdGNoJywgaWRlbnRpZmllcilcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluYygncHJlJywgaWRlbnRpZmllcilcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSAnbWFqb3InOlxuICAgICAgICAvLyBJZiB0aGlzIGlzIGEgcHJlLW1ham9yIHZlcnNpb24sIGJ1bXAgdXAgdG8gdGhlIHNhbWUgbWFqb3IgdmVyc2lvbi5cbiAgICAgICAgLy8gT3RoZXJ3aXNlIGluY3JlbWVudCBtYWpvci5cbiAgICAgICAgLy8gMS4wLjAtNSBidW1wcyB0byAxLjAuMFxuICAgICAgICAvLyAxLjEuMCBidW1wcyB0byAyLjAuMFxuICAgICAgICBpZiAoXG4gICAgICAgICAgdGhpcy5taW5vciAhPT0gMCB8fFxuICAgICAgICAgIHRoaXMucGF0Y2ggIT09IDAgfHxcbiAgICAgICAgICB0aGlzLnByZXJlbGVhc2UubGVuZ3RoID09PSAwXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMubWFqb3IrK1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWlub3IgPSAwXG4gICAgICAgIHRoaXMucGF0Y2ggPSAwXG4gICAgICAgIHRoaXMucHJlcmVsZWFzZSA9IFtdXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdtaW5vcic6XG4gICAgICAgIC8vIElmIHRoaXMgaXMgYSBwcmUtbWlub3IgdmVyc2lvbiwgYnVtcCB1cCB0byB0aGUgc2FtZSBtaW5vciB2ZXJzaW9uLlxuICAgICAgICAvLyBPdGhlcndpc2UgaW5jcmVtZW50IG1pbm9yLlxuICAgICAgICAvLyAxLjIuMC01IGJ1bXBzIHRvIDEuMi4wXG4gICAgICAgIC8vIDEuMi4xIGJ1bXBzIHRvIDEuMy4wXG4gICAgICAgIGlmICh0aGlzLnBhdGNoICE9PSAwIHx8IHRoaXMucHJlcmVsZWFzZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLm1pbm9yKytcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhdGNoID0gMFxuICAgICAgICB0aGlzLnByZXJlbGVhc2UgPSBbXVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAncGF0Y2gnOlxuICAgICAgICAvLyBJZiB0aGlzIGlzIG5vdCBhIHByZS1yZWxlYXNlIHZlcnNpb24sIGl0IHdpbGwgaW5jcmVtZW50IHRoZSBwYXRjaC5cbiAgICAgICAgLy8gSWYgaXQgaXMgYSBwcmUtcmVsZWFzZSBpdCB3aWxsIGJ1bXAgdXAgdG8gdGhlIHNhbWUgcGF0Y2ggdmVyc2lvbi5cbiAgICAgICAgLy8gMS4yLjAtNSBwYXRjaGVzIHRvIDEuMi4wXG4gICAgICAgIC8vIDEuMi4wIHBhdGNoZXMgdG8gMS4yLjFcbiAgICAgICAgaWYgKHRoaXMucHJlcmVsZWFzZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLnBhdGNoKytcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByZXJlbGVhc2UgPSBbXVxuICAgICAgICBicmVha1xuICAgICAgLy8gVGhpcyBwcm9iYWJseSBzaG91bGRuJ3QgYmUgdXNlZCBwdWJsaWNseS5cbiAgICAgIC8vIDEuMC4wICdwcmUnIHdvdWxkIGJlY29tZSAxLjAuMC0wIHdoaWNoIGlzIHRoZSB3cm9uZyBkaXJlY3Rpb24uXG4gICAgICBjYXNlICdwcmUnOlxuICAgICAgICBpZiAodGhpcy5wcmVyZWxlYXNlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMucHJlcmVsZWFzZSA9IFswXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldCBpID0gdGhpcy5wcmVyZWxlYXNlLmxlbmd0aFxuICAgICAgICAgIHdoaWxlICgtLWkgPj0gMCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnByZXJlbGVhc2VbaV0gPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgIHRoaXMucHJlcmVsZWFzZVtpXSsrXG4gICAgICAgICAgICAgIGkgPSAtMlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaSA9PT0gLTEpIHtcbiAgICAgICAgICAgIC8vIGRpZG4ndCBpbmNyZW1lbnQgYW55dGhpbmdcbiAgICAgICAgICAgIHRoaXMucHJlcmVsZWFzZS5wdXNoKDApXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpZGVudGlmaWVyKSB7XG4gICAgICAgICAgLy8gMS4yLjAtYmV0YS4xIGJ1bXBzIHRvIDEuMi4wLWJldGEuMixcbiAgICAgICAgICAvLyAxLjIuMC1iZXRhLmZvb2JseiBvciAxLjIuMC1iZXRhIGJ1bXBzIHRvIDEuMi4wLWJldGEuMFxuICAgICAgICAgIGlmICh0aGlzLnByZXJlbGVhc2VbMF0gPT09IGlkZW50aWZpZXIpIHtcbiAgICAgICAgICAgIGlmIChpc05hTih0aGlzLnByZXJlbGVhc2VbMV0pKSB7XG4gICAgICAgICAgICAgIHRoaXMucHJlcmVsZWFzZSA9IFtpZGVudGlmaWVyLCAwXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnByZXJlbGVhc2UgPSBbaWRlbnRpZmllciwgMF1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGluY3JlbWVudCBhcmd1bWVudDogJHtyZWxlYXNlfWApXG4gICAgfVxuICAgIHRoaXMuZm9ybWF0KClcbiAgICB0aGlzLnJhdyA9IHRoaXMudmVyc2lvblxuICAgIHJldHVybiB0aGlzXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTZW1WZXJcbiIsIi8vIGhvaXN0ZWQgY2xhc3MgZm9yIGN5Y2xpYyBkZXBlbmRlbmN5XG5jbGFzcyBSYW5nZSB7XG4gIGNvbnN0cnVjdG9yIChyYW5nZSwgb3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucyB8fCB0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgIGxvb3NlOiAhIW9wdGlvbnMsXG4gICAgICAgIGluY2x1ZGVQcmVyZWxlYXNlOiBmYWxzZVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChyYW5nZSBpbnN0YW5jZW9mIFJhbmdlKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHJhbmdlLmxvb3NlID09PSAhIW9wdGlvbnMubG9vc2UgJiZcbiAgICAgICAgcmFuZ2UuaW5jbHVkZVByZXJlbGVhc2UgPT09ICEhb3B0aW9ucy5pbmNsdWRlUHJlcmVsZWFzZVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiByYW5nZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSYW5nZShyYW5nZS5yYXcsIG9wdGlvbnMpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHJhbmdlIGluc3RhbmNlb2YgQ29tcGFyYXRvcikge1xuICAgICAgLy8ganVzdCBwdXQgaXQgaW4gdGhlIHNldCBhbmQgcmV0dXJuXG4gICAgICB0aGlzLnJhdyA9IHJhbmdlLnZhbHVlXG4gICAgICB0aGlzLnNldCA9IFtbcmFuZ2VdXVxuICAgICAgdGhpcy5mb3JtYXQoKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zXG4gICAgdGhpcy5sb29zZSA9ICEhb3B0aW9ucy5sb29zZVxuICAgIHRoaXMuaW5jbHVkZVByZXJlbGVhc2UgPSAhIW9wdGlvbnMuaW5jbHVkZVByZXJlbGVhc2VcblxuICAgIC8vIEZpcnN0LCBzcGxpdCBiYXNlZCBvbiBib29sZWFuIG9yIHx8XG4gICAgdGhpcy5yYXcgPSByYW5nZVxuICAgIHRoaXMuc2V0ID0gcmFuZ2VcbiAgICAgIC5zcGxpdCgvXFxzKlxcfFxcfFxccyovKVxuICAgICAgLy8gbWFwIHRoZSByYW5nZSB0byBhIDJkIGFycmF5IG9mIGNvbXBhcmF0b3JzXG4gICAgICAubWFwKHJhbmdlID0+IHRoaXMucGFyc2VSYW5nZShyYW5nZS50cmltKCkpKVxuICAgICAgLy8gdGhyb3cgb3V0IGFueSBjb21wYXJhdG9yIGxpc3RzIHRoYXQgYXJlIGVtcHR5XG4gICAgICAvLyB0aGlzIGdlbmVyYWxseSBtZWFucyB0aGF0IGl0IHdhcyBub3QgYSB2YWxpZCByYW5nZSwgd2hpY2ggaXMgYWxsb3dlZFxuICAgICAgLy8gaW4gbG9vc2UgbW9kZSwgYnV0IHdpbGwgc3RpbGwgdGhyb3cgaWYgdGhlIFdIT0xFIHJhbmdlIGlzIGludmFsaWQuXG4gICAgICAuZmlsdGVyKGMgPT4gYy5sZW5ndGgpXG5cbiAgICBpZiAoIXRoaXMuc2V0Lmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBTZW1WZXIgUmFuZ2U6ICR7cmFuZ2V9YClcbiAgICB9XG5cbiAgICB0aGlzLmZvcm1hdCgpXG4gIH1cblxuICBmb3JtYXQgKCkge1xuICAgIHRoaXMucmFuZ2UgPSB0aGlzLnNldFxuICAgICAgLm1hcCgoY29tcHMpID0+IHtcbiAgICAgICAgcmV0dXJuIGNvbXBzLmpvaW4oJyAnKS50cmltKClcbiAgICAgIH0pXG4gICAgICAuam9pbignfHwnKVxuICAgICAgLnRyaW0oKVxuICAgIHJldHVybiB0aGlzLnJhbmdlXG4gIH1cblxuICB0b1N0cmluZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMucmFuZ2VcbiAgfVxuXG4gIHBhcnNlUmFuZ2UgKHJhbmdlKSB7XG4gICAgY29uc3QgbG9vc2UgPSB0aGlzLm9wdGlvbnMubG9vc2VcbiAgICByYW5nZSA9IHJhbmdlLnRyaW0oKVxuICAgIC8vIGAxLjIuMyAtIDEuMi40YCA9PiBgPj0xLjIuMyA8PTEuMi40YFxuICAgIGNvbnN0IGhyID0gbG9vc2UgPyByZVt0LkhZUEhFTlJBTkdFTE9PU0VdIDogcmVbdC5IWVBIRU5SQU5HRV1cbiAgICByYW5nZSA9IHJhbmdlLnJlcGxhY2UoaHIsIGh5cGhlblJlcGxhY2UpXG4gICAgZGVidWcoJ2h5cGhlbiByZXBsYWNlJywgcmFuZ2UpXG4gICAgLy8gYD4gMS4yLjMgPCAxLjIuNWAgPT4gYD4xLjIuMyA8MS4yLjVgXG4gICAgcmFuZ2UgPSByYW5nZS5yZXBsYWNlKHJlW3QuQ09NUEFSQVRPUlRSSU1dLCBjb21wYXJhdG9yVHJpbVJlcGxhY2UpXG4gICAgZGVidWcoJ2NvbXBhcmF0b3IgdHJpbScsIHJhbmdlLCByZVt0LkNPTVBBUkFUT1JUUklNXSlcblxuICAgIC8vIGB+IDEuMi4zYCA9PiBgfjEuMi4zYFxuICAgIHJhbmdlID0gcmFuZ2UucmVwbGFjZShyZVt0LlRJTERFVFJJTV0sIHRpbGRlVHJpbVJlcGxhY2UpXG5cbiAgICAvLyBgXiAxLjIuM2AgPT4gYF4xLjIuM2BcbiAgICByYW5nZSA9IHJhbmdlLnJlcGxhY2UocmVbdC5DQVJFVFRSSU1dLCBjYXJldFRyaW1SZXBsYWNlKVxuXG4gICAgLy8gbm9ybWFsaXplIHNwYWNlc1xuICAgIHJhbmdlID0gcmFuZ2Uuc3BsaXQoL1xccysvKS5qb2luKCcgJylcblxuICAgIC8vIEF0IHRoaXMgcG9pbnQsIHRoZSByYW5nZSBpcyBjb21wbGV0ZWx5IHRyaW1tZWQgYW5kXG4gICAgLy8gcmVhZHkgdG8gYmUgc3BsaXQgaW50byBjb21wYXJhdG9ycy5cblxuICAgIGNvbnN0IGNvbXBSZSA9IGxvb3NlID8gcmVbdC5DT01QQVJBVE9STE9PU0VdIDogcmVbdC5DT01QQVJBVE9SXVxuICAgIHJldHVybiByYW5nZVxuICAgICAgLnNwbGl0KCcgJylcbiAgICAgIC5tYXAoY29tcCA9PiBwYXJzZUNvbXBhcmF0b3IoY29tcCwgdGhpcy5vcHRpb25zKSlcbiAgICAgIC5qb2luKCcgJylcbiAgICAgIC5zcGxpdCgvXFxzKy8pXG4gICAgICAvLyBpbiBsb29zZSBtb2RlLCB0aHJvdyBvdXQgYW55IHRoYXQgYXJlIG5vdCB2YWxpZCBjb21wYXJhdG9yc1xuICAgICAgLmZpbHRlcih0aGlzLm9wdGlvbnMubG9vc2UgPyBjb21wID0+ICEhY29tcC5tYXRjaChjb21wUmUpIDogKCkgPT4gdHJ1ZSlcbiAgICAgIC5tYXAoY29tcCA9PiBuZXcgQ29tcGFyYXRvcihjb21wLCB0aGlzLm9wdGlvbnMpKVxuICB9XG5cbiAgaW50ZXJzZWN0cyAocmFuZ2UsIG9wdGlvbnMpIHtcbiAgICBpZiAoIShyYW5nZSBpbnN0YW5jZW9mIFJhbmdlKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYSBSYW5nZSBpcyByZXF1aXJlZCcpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc2V0LnNvbWUoKHRoaXNDb21wYXJhdG9ycykgPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgaXNTYXRpc2ZpYWJsZSh0aGlzQ29tcGFyYXRvcnMsIG9wdGlvbnMpICYmXG4gICAgICAgIHJhbmdlLnNldC5zb21lKChyYW5nZUNvbXBhcmF0b3JzKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGlzU2F0aXNmaWFibGUocmFuZ2VDb21wYXJhdG9ycywgb3B0aW9ucykgJiZcbiAgICAgICAgICAgIHRoaXNDb21wYXJhdG9ycy5ldmVyeSgodGhpc0NvbXBhcmF0b3IpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJhbmdlQ29tcGFyYXRvcnMuZXZlcnkoKHJhbmdlQ29tcGFyYXRvcikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzQ29tcGFyYXRvci5pbnRlcnNlY3RzKHJhbmdlQ29tcGFyYXRvciwgb3B0aW9ucylcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKVxuICAgICAgICB9KVxuICAgICAgKVxuICAgIH0pXG4gIH1cblxuICAvLyBpZiBBTlkgb2YgdGhlIHNldHMgbWF0Y2ggQUxMIG9mIGl0cyBjb21wYXJhdG9ycywgdGhlbiBwYXNzXG4gIHRlc3QgKHZlcnNpb24pIHtcbiAgICBpZiAoIXZlcnNpb24pIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmVyc2lvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZlcnNpb24gPSBuZXcgU2VtVmVyKHZlcnNpb24sIHRoaXMub3B0aW9ucylcbiAgICAgIH0gY2F0Y2ggKGVyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0ZXN0U2V0KHRoaXMuc2V0W2ldLCB2ZXJzaW9uLCB0aGlzLm9wdGlvbnMpKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IFJhbmdlXG5cbmNvbnN0IENvbXBhcmF0b3IgPSByZXF1aXJlKCcuL2NvbXBhcmF0b3InKVxuY29uc3QgZGVidWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9kZWJ1ZycpXG5jb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuL3NlbXZlcicpXG5jb25zdCB7XG4gIHJlLFxuICB0LFxuICBjb21wYXJhdG9yVHJpbVJlcGxhY2UsXG4gIHRpbGRlVHJpbVJlcGxhY2UsXG4gIGNhcmV0VHJpbVJlcGxhY2Vcbn0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9yZScpXG5cbi8vIHRha2UgYSBzZXQgb2YgY29tcGFyYXRvcnMgYW5kIGRldGVybWluZSB3aGV0aGVyIHRoZXJlXG4vLyBleGlzdHMgYSB2ZXJzaW9uIHdoaWNoIGNhbiBzYXRpc2Z5IGl0XG5jb25zdCBpc1NhdGlzZmlhYmxlID0gKGNvbXBhcmF0b3JzLCBvcHRpb25zKSA9PiB7XG4gIGxldCByZXN1bHQgPSB0cnVlXG4gIGNvbnN0IHJlbWFpbmluZ0NvbXBhcmF0b3JzID0gY29tcGFyYXRvcnMuc2xpY2UoKVxuICBsZXQgdGVzdENvbXBhcmF0b3IgPSByZW1haW5pbmdDb21wYXJhdG9ycy5wb3AoKVxuXG4gIHdoaWxlIChyZXN1bHQgJiYgcmVtYWluaW5nQ29tcGFyYXRvcnMubGVuZ3RoKSB7XG4gICAgcmVzdWx0ID0gcmVtYWluaW5nQ29tcGFyYXRvcnMuZXZlcnkoKG90aGVyQ29tcGFyYXRvcikgPT4ge1xuICAgICAgcmV0dXJuIHRlc3RDb21wYXJhdG9yLmludGVyc2VjdHMob3RoZXJDb21wYXJhdG9yLCBvcHRpb25zKVxuICAgIH0pXG5cbiAgICB0ZXN0Q29tcGFyYXRvciA9IHJlbWFpbmluZ0NvbXBhcmF0b3JzLnBvcCgpXG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG5cbi8vIGNvbXByaXNlZCBvZiB4cmFuZ2VzLCB0aWxkZXMsIHN0YXJzLCBhbmQgZ3RsdCdzIGF0IHRoaXMgcG9pbnQuXG4vLyBhbHJlYWR5IHJlcGxhY2VkIHRoZSBoeXBoZW4gcmFuZ2VzXG4vLyB0dXJuIGludG8gYSBzZXQgb2YgSlVTVCBjb21wYXJhdG9ycy5cbmNvbnN0IHBhcnNlQ29tcGFyYXRvciA9IChjb21wLCBvcHRpb25zKSA9PiB7XG4gIGRlYnVnKCdjb21wJywgY29tcCwgb3B0aW9ucylcbiAgY29tcCA9IHJlcGxhY2VDYXJldHMoY29tcCwgb3B0aW9ucylcbiAgZGVidWcoJ2NhcmV0JywgY29tcClcbiAgY29tcCA9IHJlcGxhY2VUaWxkZXMoY29tcCwgb3B0aW9ucylcbiAgZGVidWcoJ3RpbGRlcycsIGNvbXApXG4gIGNvbXAgPSByZXBsYWNlWFJhbmdlcyhjb21wLCBvcHRpb25zKVxuICBkZWJ1ZygneHJhbmdlJywgY29tcClcbiAgY29tcCA9IHJlcGxhY2VTdGFycyhjb21wLCBvcHRpb25zKVxuICBkZWJ1Zygnc3RhcnMnLCBjb21wKVxuICByZXR1cm4gY29tcFxufVxuXG5jb25zdCBpc1ggPSBpZCA9PiAhaWQgfHwgaWQudG9Mb3dlckNhc2UoKSA9PT0gJ3gnIHx8IGlkID09PSAnKidcblxuLy8gfiwgfj4gLS0+ICogKGFueSwga2luZGEgc2lsbHkpXG4vLyB+MiwgfjIueCwgfjIueC54LCB+PjIsIH4+Mi54IH4+Mi54LnggLS0+ID49Mi4wLjAgPDMuMC4wXG4vLyB+Mi4wLCB+Mi4wLngsIH4+Mi4wLCB+PjIuMC54IC0tPiA+PTIuMC4wIDwyLjEuMFxuLy8gfjEuMiwgfjEuMi54LCB+PjEuMiwgfj4xLjIueCAtLT4gPj0xLjIuMCA8MS4zLjBcbi8vIH4xLjIuMywgfj4xLjIuMyAtLT4gPj0xLjIuMyA8MS4zLjBcbi8vIH4xLjIuMCwgfj4xLjIuMCAtLT4gPj0xLjIuMCA8MS4zLjBcbmNvbnN0IHJlcGxhY2VUaWxkZXMgPSAoY29tcCwgb3B0aW9ucykgPT5cbiAgY29tcC50cmltKCkuc3BsaXQoL1xccysvKS5tYXAoKGNvbXApID0+IHtcbiAgICByZXR1cm4gcmVwbGFjZVRpbGRlKGNvbXAsIG9wdGlvbnMpXG4gIH0pLmpvaW4oJyAnKVxuXG5jb25zdCByZXBsYWNlVGlsZGUgPSAoY29tcCwgb3B0aW9ucykgPT4ge1xuICBjb25zdCByID0gb3B0aW9ucy5sb29zZSA/IHJlW3QuVElMREVMT09TRV0gOiByZVt0LlRJTERFXVxuICByZXR1cm4gY29tcC5yZXBsYWNlKHIsIChfLCBNLCBtLCBwLCBwcikgPT4ge1xuICAgIGRlYnVnKCd0aWxkZScsIGNvbXAsIF8sIE0sIG0sIHAsIHByKVxuICAgIGxldCByZXRcblxuICAgIGlmIChpc1goTSkpIHtcbiAgICAgIHJldCA9ICcnXG4gICAgfSBlbHNlIGlmIChpc1gobSkpIHtcbiAgICAgIHJldCA9IGA+PSR7TX0uMC4wIDwkeytNICsgMX0uMC4wYFxuICAgIH0gZWxzZSBpZiAoaXNYKHApKSB7XG4gICAgICAvLyB+MS4yID09ID49MS4yLjAgPDEuMy4wXG4gICAgICByZXQgPSBgPj0ke019LiR7bX0uMCA8JHtNfS4keyttICsgMX0uMGBcbiAgICB9IGVsc2UgaWYgKHByKSB7XG4gICAgICBkZWJ1ZygncmVwbGFjZVRpbGRlIHByJywgcHIpXG4gICAgICByZXQgPSBgPj0ke019LiR7bX0uJHtwfS0ke3ByXG4gICAgICB9IDwke019LiR7K20gKyAxfS4wYFxuICAgIH0gZWxzZSB7XG4gICAgICAvLyB+MS4yLjMgPT0gPj0xLjIuMyA8MS4zLjBcbiAgICAgIHJldCA9IGA+PSR7TX0uJHttfS4ke3BcbiAgICAgIH0gPCR7TX0uJHsrbSArIDF9LjBgXG4gICAgfVxuXG4gICAgZGVidWcoJ3RpbGRlIHJldHVybicsIHJldClcbiAgICByZXR1cm4gcmV0XG4gIH0pXG59XG5cbi8vIF4gLS0+ICogKGFueSwga2luZGEgc2lsbHkpXG4vLyBeMiwgXjIueCwgXjIueC54IC0tPiA+PTIuMC4wIDwzLjAuMFxuLy8gXjIuMCwgXjIuMC54IC0tPiA+PTIuMC4wIDwzLjAuMFxuLy8gXjEuMiwgXjEuMi54IC0tPiA+PTEuMi4wIDwyLjAuMFxuLy8gXjEuMi4zIC0tPiA+PTEuMi4zIDwyLjAuMFxuLy8gXjEuMi4wIC0tPiA+PTEuMi4wIDwyLjAuMFxuY29uc3QgcmVwbGFjZUNhcmV0cyA9IChjb21wLCBvcHRpb25zKSA9PlxuICBjb21wLnRyaW0oKS5zcGxpdCgvXFxzKy8pLm1hcCgoY29tcCkgPT4ge1xuICAgIHJldHVybiByZXBsYWNlQ2FyZXQoY29tcCwgb3B0aW9ucylcbiAgfSkuam9pbignICcpXG5cbmNvbnN0IHJlcGxhY2VDYXJldCA9IChjb21wLCBvcHRpb25zKSA9PiB7XG4gIGRlYnVnKCdjYXJldCcsIGNvbXAsIG9wdGlvbnMpXG4gIGNvbnN0IHIgPSBvcHRpb25zLmxvb3NlID8gcmVbdC5DQVJFVExPT1NFXSA6IHJlW3QuQ0FSRVRdXG4gIHJldHVybiBjb21wLnJlcGxhY2UociwgKF8sIE0sIG0sIHAsIHByKSA9PiB7XG4gICAgZGVidWcoJ2NhcmV0JywgY29tcCwgXywgTSwgbSwgcCwgcHIpXG4gICAgbGV0IHJldFxuXG4gICAgaWYgKGlzWChNKSkge1xuICAgICAgcmV0ID0gJydcbiAgICB9IGVsc2UgaWYgKGlzWChtKSkge1xuICAgICAgcmV0ID0gYD49JHtNfS4wLjAgPCR7K00gKyAxfS4wLjBgXG4gICAgfSBlbHNlIGlmIChpc1gocCkpIHtcbiAgICAgIGlmIChNID09PSAnMCcpIHtcbiAgICAgICAgcmV0ID0gYD49JHtNfS4ke219LjAgPCR7TX0uJHsrbSArIDF9LjBgXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXQgPSBgPj0ke019LiR7bX0uMCA8JHsrTSArIDF9LjAuMGBcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHByKSB7XG4gICAgICBkZWJ1ZygncmVwbGFjZUNhcmV0IHByJywgcHIpXG4gICAgICBpZiAoTSA9PT0gJzAnKSB7XG4gICAgICAgIGlmIChtID09PSAnMCcpIHtcbiAgICAgICAgICByZXQgPSBgPj0ke019LiR7bX0uJHtwfS0ke3ByXG4gICAgICAgICAgfSA8JHtNfS4ke219LiR7K3AgKyAxfWBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXQgPSBgPj0ke019LiR7bX0uJHtwfS0ke3ByXG4gICAgICAgICAgfSA8JHtNfS4keyttICsgMX0uMGBcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0ID0gYD49JHtNfS4ke219LiR7cH0tJHtwclxuICAgICAgICB9IDwkeytNICsgMX0uMC4wYFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1Zygnbm8gcHInKVxuICAgICAgaWYgKE0gPT09ICcwJykge1xuICAgICAgICBpZiAobSA9PT0gJzAnKSB7XG4gICAgICAgICAgcmV0ID0gYD49JHtNfS4ke219LiR7cFxuICAgICAgICAgIH0gPCR7TX0uJHttfS4keytwICsgMX1gXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0ID0gYD49JHtNfS4ke219LiR7cFxuICAgICAgICAgIH0gPCR7TX0uJHsrbSArIDF9LjBgXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldCA9IGA+PSR7TX0uJHttfS4ke3BcbiAgICAgICAgfSA8JHsrTSArIDF9LjAuMGBcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkZWJ1ZygnY2FyZXQgcmV0dXJuJywgcmV0KVxuICAgIHJldHVybiByZXRcbiAgfSlcbn1cblxuY29uc3QgcmVwbGFjZVhSYW5nZXMgPSAoY29tcCwgb3B0aW9ucykgPT4ge1xuICBkZWJ1ZygncmVwbGFjZVhSYW5nZXMnLCBjb21wLCBvcHRpb25zKVxuICByZXR1cm4gY29tcC5zcGxpdCgvXFxzKy8pLm1hcCgoY29tcCkgPT4ge1xuICAgIHJldHVybiByZXBsYWNlWFJhbmdlKGNvbXAsIG9wdGlvbnMpXG4gIH0pLmpvaW4oJyAnKVxufVxuXG5jb25zdCByZXBsYWNlWFJhbmdlID0gKGNvbXAsIG9wdGlvbnMpID0+IHtcbiAgY29tcCA9IGNvbXAudHJpbSgpXG4gIGNvbnN0IHIgPSBvcHRpb25zLmxvb3NlID8gcmVbdC5YUkFOR0VMT09TRV0gOiByZVt0LlhSQU5HRV1cbiAgcmV0dXJuIGNvbXAucmVwbGFjZShyLCAocmV0LCBndGx0LCBNLCBtLCBwLCBwcikgPT4ge1xuICAgIGRlYnVnKCd4UmFuZ2UnLCBjb21wLCByZXQsIGd0bHQsIE0sIG0sIHAsIHByKVxuICAgIGNvbnN0IHhNID0gaXNYKE0pXG4gICAgY29uc3QgeG0gPSB4TSB8fCBpc1gobSlcbiAgICBjb25zdCB4cCA9IHhtIHx8IGlzWChwKVxuICAgIGNvbnN0IGFueVggPSB4cFxuXG4gICAgaWYgKGd0bHQgPT09ICc9JyAmJiBhbnlYKSB7XG4gICAgICBndGx0ID0gJydcbiAgICB9XG5cbiAgICAvLyBpZiB3ZSdyZSBpbmNsdWRpbmcgcHJlcmVsZWFzZXMgaW4gdGhlIG1hdGNoLCB0aGVuIHdlIG5lZWRcbiAgICAvLyB0byBmaXggdGhpcyB0byAtMCwgdGhlIGxvd2VzdCBwb3NzaWJsZSBwcmVyZWxlYXNlIHZhbHVlXG4gICAgcHIgPSBvcHRpb25zLmluY2x1ZGVQcmVyZWxlYXNlID8gJy0wJyA6ICcnXG5cbiAgICBpZiAoeE0pIHtcbiAgICAgIGlmIChndGx0ID09PSAnPicgfHwgZ3RsdCA9PT0gJzwnKSB7XG4gICAgICAgIC8vIG5vdGhpbmcgaXMgYWxsb3dlZFxuICAgICAgICByZXQgPSAnPDAuMC4wLTAnXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBub3RoaW5nIGlzIGZvcmJpZGRlblxuICAgICAgICByZXQgPSAnKidcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGd0bHQgJiYgYW55WCkge1xuICAgICAgLy8gd2Uga25vdyBwYXRjaCBpcyBhbiB4LCBiZWNhdXNlIHdlIGhhdmUgYW55IHggYXQgYWxsLlxuICAgICAgLy8gcmVwbGFjZSBYIHdpdGggMFxuICAgICAgaWYgKHhtKSB7XG4gICAgICAgIG0gPSAwXG4gICAgICB9XG4gICAgICBwID0gMFxuXG4gICAgICBpZiAoZ3RsdCA9PT0gJz4nKSB7XG4gICAgICAgIC8vID4xID0+ID49Mi4wLjBcbiAgICAgICAgLy8gPjEuMiA9PiA+PTEuMy4wXG4gICAgICAgIGd0bHQgPSAnPj0nXG4gICAgICAgIGlmICh4bSkge1xuICAgICAgICAgIE0gPSArTSArIDFcbiAgICAgICAgICBtID0gMFxuICAgICAgICAgIHAgPSAwXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbSA9ICttICsgMVxuICAgICAgICAgIHAgPSAwXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZ3RsdCA9PT0gJzw9Jykge1xuICAgICAgICAvLyA8PTAuNy54IGlzIGFjdHVhbGx5IDwwLjguMCwgc2luY2UgYW55IDAuNy54IHNob3VsZFxuICAgICAgICAvLyBwYXNzLiAgU2ltaWxhcmx5LCA8PTcueCBpcyBhY3R1YWxseSA8OC4wLjAsIGV0Yy5cbiAgICAgICAgZ3RsdCA9ICc8J1xuICAgICAgICBpZiAoeG0pIHtcbiAgICAgICAgICBNID0gK00gKyAxXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbSA9ICttICsgMVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldCA9IGAke2d0bHQgKyBNfS4ke219LiR7cH0ke3ByfWBcbiAgICB9IGVsc2UgaWYgKHhtKSB7XG4gICAgICByZXQgPSBgPj0ke019LjAuMCR7cHJ9IDwkeytNICsgMX0uMC4wJHtwcn1gXG4gICAgfSBlbHNlIGlmICh4cCkge1xuICAgICAgcmV0ID0gYD49JHtNfS4ke219LjAke3ByXG4gICAgICB9IDwke019LiR7K20gKyAxfS4wJHtwcn1gXG4gICAgfVxuXG4gICAgZGVidWcoJ3hSYW5nZSByZXR1cm4nLCByZXQpXG5cbiAgICByZXR1cm4gcmV0XG4gIH0pXG59XG5cbi8vIEJlY2F1c2UgKiBpcyBBTkQtZWQgd2l0aCBldmVyeXRoaW5nIGVsc2UgaW4gdGhlIGNvbXBhcmF0b3IsXG4vLyBhbmQgJycgbWVhbnMgXCJhbnkgdmVyc2lvblwiLCBqdXN0IHJlbW92ZSB0aGUgKnMgZW50aXJlbHkuXG5jb25zdCByZXBsYWNlU3RhcnMgPSAoY29tcCwgb3B0aW9ucykgPT4ge1xuICBkZWJ1ZygncmVwbGFjZVN0YXJzJywgY29tcCwgb3B0aW9ucylcbiAgLy8gTG9vc2VuZXNzIGlzIGlnbm9yZWQgaGVyZS4gIHN0YXIgaXMgYWx3YXlzIGFzIGxvb3NlIGFzIGl0IGdldHMhXG4gIHJldHVybiBjb21wLnRyaW0oKS5yZXBsYWNlKHJlW3QuU1RBUl0sICcnKVxufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIHBhc3NlZCB0byBzdHJpbmcucmVwbGFjZShyZVt0LkhZUEhFTlJBTkdFXSlcbi8vIE0sIG0sIHBhdGNoLCBwcmVyZWxlYXNlLCBidWlsZFxuLy8gMS4yIC0gMy40LjUgPT4gPj0xLjIuMCA8PTMuNC41XG4vLyAxLjIuMyAtIDMuNCA9PiA+PTEuMi4wIDwzLjUuMCBBbnkgMy40Lnggd2lsbCBkb1xuLy8gMS4yIC0gMy40ID0+ID49MS4yLjAgPDMuNS4wXG5jb25zdCBoeXBoZW5SZXBsYWNlID0gKCQwLFxuICBmcm9tLCBmTSwgZm0sIGZwLCBmcHIsIGZiLFxuICB0bywgdE0sIHRtLCB0cCwgdHByLCB0YikgPT4ge1xuICBpZiAoaXNYKGZNKSkge1xuICAgIGZyb20gPSAnJ1xuICB9IGVsc2UgaWYgKGlzWChmbSkpIHtcbiAgICBmcm9tID0gYD49JHtmTX0uMC4wYFxuICB9IGVsc2UgaWYgKGlzWChmcCkpIHtcbiAgICBmcm9tID0gYD49JHtmTX0uJHtmbX0uMGBcbiAgfSBlbHNlIHtcbiAgICBmcm9tID0gYD49JHtmcm9tfWBcbiAgfVxuXG4gIGlmIChpc1godE0pKSB7XG4gICAgdG8gPSAnJ1xuICB9IGVsc2UgaWYgKGlzWCh0bSkpIHtcbiAgICB0byA9IGA8JHsrdE0gKyAxfS4wLjBgXG4gIH0gZWxzZSBpZiAoaXNYKHRwKSkge1xuICAgIHRvID0gYDwke3RNfS4keyt0bSArIDF9LjBgXG4gIH0gZWxzZSBpZiAodHByKSB7XG4gICAgdG8gPSBgPD0ke3RNfS4ke3RtfS4ke3RwfS0ke3Rwcn1gXG4gIH0gZWxzZSB7XG4gICAgdG8gPSBgPD0ke3RvfWBcbiAgfVxuXG4gIHJldHVybiAoYCR7ZnJvbX0gJHt0b31gKS50cmltKClcbn1cblxuY29uc3QgdGVzdFNldCA9IChzZXQsIHZlcnNpb24sIG9wdGlvbnMpID0+IHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXQubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIXNldFtpXS50ZXN0KHZlcnNpb24pKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICBpZiAodmVyc2lvbi5wcmVyZWxlYXNlLmxlbmd0aCAmJiAhb3B0aW9ucy5pbmNsdWRlUHJlcmVsZWFzZSkge1xuICAgIC8vIEZpbmQgdGhlIHNldCBvZiB2ZXJzaW9ucyB0aGF0IGFyZSBhbGxvd2VkIHRvIGhhdmUgcHJlcmVsZWFzZXNcbiAgICAvLyBGb3IgZXhhbXBsZSwgXjEuMi4zLXByLjEgZGVzdWdhcnMgdG8gPj0xLjIuMy1wci4xIDwyLjAuMFxuICAgIC8vIFRoYXQgc2hvdWxkIGFsbG93IGAxLjIuMy1wci4yYCB0byBwYXNzLlxuICAgIC8vIEhvd2V2ZXIsIGAxLjIuNC1hbHBoYS5ub3RyZWFkeWAgc2hvdWxkIE5PVCBiZSBhbGxvd2VkLFxuICAgIC8vIGV2ZW4gdGhvdWdoIGl0J3Mgd2l0aGluIHRoZSByYW5nZSBzZXQgYnkgdGhlIGNvbXBhcmF0b3JzLlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2V0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZWJ1ZyhzZXRbaV0uc2VtdmVyKVxuICAgICAgaWYgKHNldFtpXS5zZW12ZXIgPT09IENvbXBhcmF0b3IuQU5ZKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIGlmIChzZXRbaV0uc2VtdmVyLnByZXJlbGVhc2UubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBhbGxvd2VkID0gc2V0W2ldLnNlbXZlclxuICAgICAgICBpZiAoYWxsb3dlZC5tYWpvciA9PT0gdmVyc2lvbi5tYWpvciAmJlxuICAgICAgICAgICAgYWxsb3dlZC5taW5vciA9PT0gdmVyc2lvbi5taW5vciAmJlxuICAgICAgICAgICAgYWxsb3dlZC5wYXRjaCA9PT0gdmVyc2lvbi5wYXRjaCkge1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBWZXJzaW9uIGhhcyBhIC1wcmUsIGJ1dCBpdCdzIG5vdCBvbmUgb2YgdGhlIG9uZXMgd2UgbGlrZS5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHJldHVybiB0cnVlXG59XG4iLCJjb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3NlbXZlcicpXG5jb25zdCBjb21wYXJlID0gKGEsIGIsIGxvb3NlKSA9PlxuICBuZXcgU2VtVmVyKGEsIGxvb3NlKS5jb21wYXJlKG5ldyBTZW1WZXIoYiwgbG9vc2UpKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBhcmVcbiIsImNvbnN0IHBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZScpXG5jb25zdCB2YWxpZCA9ICh2ZXJzaW9uLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHYgPSBwYXJzZSh2ZXJzaW9uLCBvcHRpb25zKVxuICByZXR1cm4gdiA/IHYudmVyc2lvbiA6IG51bGxcbn1cbm1vZHVsZS5leHBvcnRzID0gdmFsaWRcbiIsImNvbnN0IHBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZScpXG5jb25zdCBjbGVhbiA9ICh2ZXJzaW9uLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHMgPSBwYXJzZSh2ZXJzaW9uLnRyaW0oKS5yZXBsYWNlKC9eWz12XSsvLCAnJyksIG9wdGlvbnMpXG4gIHJldHVybiBzID8gcy52ZXJzaW9uIDogbnVsbFxufVxubW9kdWxlLmV4cG9ydHMgPSBjbGVhblxuIiwiY29uc3QgU2VtVmVyID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9zZW12ZXInKVxuXG5jb25zdCBpbmMgPSAodmVyc2lvbiwgcmVsZWFzZSwgb3B0aW9ucywgaWRlbnRpZmllcikgPT4ge1xuICBpZiAodHlwZW9mIChvcHRpb25zKSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZGVudGlmaWVyID0gb3B0aW9uc1xuICAgIG9wdGlvbnMgPSB1bmRlZmluZWRcbiAgfVxuXG4gIHRyeSB7XG4gICAgcmV0dXJuIG5ldyBTZW1WZXIodmVyc2lvbiwgb3B0aW9ucykuaW5jKHJlbGVhc2UsIGlkZW50aWZpZXIpLnZlcnNpb25cbiAgfSBjYXRjaCAoZXIpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluY1xuIiwiY29uc3QgcGFyc2UgPSByZXF1aXJlKCcuL3BhcnNlJylcbmNvbnN0IGVxID0gcmVxdWlyZSgnLi9lcScpXG5cbmNvbnN0IGRpZmYgPSAodmVyc2lvbjEsIHZlcnNpb24yKSA9PiB7XG4gIGlmIChlcSh2ZXJzaW9uMSwgdmVyc2lvbjIpKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfSBlbHNlIHtcbiAgICBjb25zdCB2MSA9IHBhcnNlKHZlcnNpb24xKVxuICAgIGNvbnN0IHYyID0gcGFyc2UodmVyc2lvbjIpXG4gICAgY29uc3QgaGFzUHJlID0gdjEucHJlcmVsZWFzZS5sZW5ndGggfHwgdjIucHJlcmVsZWFzZS5sZW5ndGhcbiAgICBjb25zdCBwcmVmaXggPSBoYXNQcmUgPyAncHJlJyA6ICcnXG4gICAgY29uc3QgZGVmYXVsdFJlc3VsdCA9IGhhc1ByZSA/ICdwcmVyZWxlYXNlJyA6ICcnXG4gICAgZm9yIChjb25zdCBrZXkgaW4gdjEpIHtcbiAgICAgIGlmIChrZXkgPT09ICdtYWpvcicgfHwga2V5ID09PSAnbWlub3InIHx8IGtleSA9PT0gJ3BhdGNoJykge1xuICAgICAgICBpZiAodjFba2V5XSAhPT0gdjJba2V5XSkge1xuICAgICAgICAgIHJldHVybiBwcmVmaXggKyBrZXlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdFJlc3VsdCAvLyBtYXkgYmUgdW5kZWZpbmVkXG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZGlmZlxuIiwiY29uc3QgU2VtVmVyID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9zZW12ZXInKVxuY29uc3QgbWFqb3IgPSAoYSwgbG9vc2UpID0+IG5ldyBTZW1WZXIoYSwgbG9vc2UpLm1ham9yXG5tb2R1bGUuZXhwb3J0cyA9IG1ham9yXG4iLCJjb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3NlbXZlcicpXG5jb25zdCBtaW5vciA9IChhLCBsb29zZSkgPT4gbmV3IFNlbVZlcihhLCBsb29zZSkubWlub3Jcbm1vZHVsZS5leHBvcnRzID0gbWlub3JcbiIsImNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvc2VtdmVyJylcbmNvbnN0IHBhdGNoID0gKGEsIGxvb3NlKSA9PiBuZXcgU2VtVmVyKGEsIGxvb3NlKS5wYXRjaFxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaFxuIiwiY29uc3QgcGFyc2UgPSByZXF1aXJlKCcuL3BhcnNlJylcbmNvbnN0IHByZXJlbGVhc2UgPSAodmVyc2lvbiwgb3B0aW9ucykgPT4ge1xuICBjb25zdCBwYXJzZWQgPSBwYXJzZSh2ZXJzaW9uLCBvcHRpb25zKVxuICByZXR1cm4gKHBhcnNlZCAmJiBwYXJzZWQucHJlcmVsZWFzZS5sZW5ndGgpID8gcGFyc2VkLnByZXJlbGVhc2UgOiBudWxsXG59XG5tb2R1bGUuZXhwb3J0cyA9IHByZXJlbGVhc2VcbiIsImNvbnN0IGNvbXBhcmUgPSByZXF1aXJlKCcuL2NvbXBhcmUnKVxuY29uc3QgcmNvbXBhcmUgPSAoYSwgYiwgbG9vc2UpID0+IGNvbXBhcmUoYiwgYSwgbG9vc2UpXG5tb2R1bGUuZXhwb3J0cyA9IHJjb21wYXJlXG4iLCJjb25zdCBjb21wYXJlID0gcmVxdWlyZSgnLi9jb21wYXJlJylcbmNvbnN0IGNvbXBhcmVMb29zZSA9IChhLCBiKSA9PiBjb21wYXJlKGEsIGIsIHRydWUpXG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBhcmVMb29zZVxuIiwiY29uc3QgeyBNQVhfU0FGRV9DT01QT05FTlRfTEVOR1RIIH0gPSByZXF1aXJlKCcuL2NvbnN0YW50cycpXG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoJy4vZGVidWcnKVxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0ge31cblxuLy8gVGhlIGFjdHVhbCByZWdleHBzIGdvIG9uIGV4cG9ydHMucmVcbmNvbnN0IHJlID0gZXhwb3J0cy5yZSA9IFtdXG5jb25zdCBzcmMgPSBleHBvcnRzLnNyYyA9IFtdXG5jb25zdCB0ID0gZXhwb3J0cy50ID0ge31cbmxldCBSID0gMFxuXG5jb25zdCBjcmVhdGVUb2tlbiA9IChuYW1lLCB2YWx1ZSwgaXNHbG9iYWwpID0+IHtcbiAgY29uc3QgaW5kZXggPSBSKytcbiAgZGVidWcoaW5kZXgsIHZhbHVlKVxuICB0W25hbWVdID0gaW5kZXhcbiAgc3JjW2luZGV4XSA9IHZhbHVlXG4gIHJlW2luZGV4XSA9IG5ldyBSZWdFeHAodmFsdWUsIGlzR2xvYmFsID8gJ2cnIDogdW5kZWZpbmVkKVxufVxuXG4vLyBUaGUgZm9sbG93aW5nIFJlZ3VsYXIgRXhwcmVzc2lvbnMgY2FuIGJlIHVzZWQgZm9yIHRva2VuaXppbmcsXG4vLyB2YWxpZGF0aW5nLCBhbmQgcGFyc2luZyBTZW1WZXIgdmVyc2lvbiBzdHJpbmdzLlxuXG4vLyAjIyBOdW1lcmljIElkZW50aWZpZXJcbi8vIEEgc2luZ2xlIGAwYCwgb3IgYSBub24temVybyBkaWdpdCBmb2xsb3dlZCBieSB6ZXJvIG9yIG1vcmUgZGlnaXRzLlxuXG5jcmVhdGVUb2tlbignTlVNRVJJQ0lERU5USUZJRVInLCAnMHxbMS05XVxcXFxkKicpXG5jcmVhdGVUb2tlbignTlVNRVJJQ0lERU5USUZJRVJMT09TRScsICdbMC05XSsnKVxuXG4vLyAjIyBOb24tbnVtZXJpYyBJZGVudGlmaWVyXG4vLyBaZXJvIG9yIG1vcmUgZGlnaXRzLCBmb2xsb3dlZCBieSBhIGxldHRlciBvciBoeXBoZW4sIGFuZCB0aGVuIHplcm8gb3Jcbi8vIG1vcmUgbGV0dGVycywgZGlnaXRzLCBvciBoeXBoZW5zLlxuXG5jcmVhdGVUb2tlbignTk9OTlVNRVJJQ0lERU5USUZJRVInLCAnXFxcXGQqW2EtekEtWi1dW2EtekEtWjAtOS1dKicpXG5cbi8vICMjIE1haW4gVmVyc2lvblxuLy8gVGhyZWUgZG90LXNlcGFyYXRlZCBudW1lcmljIGlkZW50aWZpZXJzLlxuXG5jcmVhdGVUb2tlbignTUFJTlZFUlNJT04nLCBgKCR7c3JjW3QuTlVNRVJJQ0lERU5USUZJRVJdfSlcXFxcLmAgK1xuICAgICAgICAgICAgICAgICAgIGAoJHtzcmNbdC5OVU1FUklDSURFTlRJRklFUl19KVxcXFwuYCArXG4gICAgICAgICAgICAgICAgICAgYCgke3NyY1t0Lk5VTUVSSUNJREVOVElGSUVSXX0pYClcblxuY3JlYXRlVG9rZW4oJ01BSU5WRVJTSU9OTE9PU0UnLCBgKCR7c3JjW3QuTlVNRVJJQ0lERU5USUZJRVJMT09TRV19KVxcXFwuYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgKCR7c3JjW3QuTlVNRVJJQ0lERU5USUZJRVJMT09TRV19KVxcXFwuYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgKCR7c3JjW3QuTlVNRVJJQ0lERU5USUZJRVJMT09TRV19KWApXG5cbi8vICMjIFByZS1yZWxlYXNlIFZlcnNpb24gSWRlbnRpZmllclxuLy8gQSBudW1lcmljIGlkZW50aWZpZXIsIG9yIGEgbm9uLW51bWVyaWMgaWRlbnRpZmllci5cblxuY3JlYXRlVG9rZW4oJ1BSRVJFTEVBU0VJREVOVElGSUVSJywgYCg/OiR7c3JjW3QuTlVNRVJJQ0lERU5USUZJRVJdXG59fCR7c3JjW3QuTk9OTlVNRVJJQ0lERU5USUZJRVJdfSlgKVxuXG5jcmVhdGVUb2tlbignUFJFUkVMRUFTRUlERU5USUZJRVJMT09TRScsIGAoPzoke3NyY1t0Lk5VTUVSSUNJREVOVElGSUVSTE9PU0VdXG59fCR7c3JjW3QuTk9OTlVNRVJJQ0lERU5USUZJRVJdfSlgKVxuXG4vLyAjIyBQcmUtcmVsZWFzZSBWZXJzaW9uXG4vLyBIeXBoZW4sIGZvbGxvd2VkIGJ5IG9uZSBvciBtb3JlIGRvdC1zZXBhcmF0ZWQgcHJlLXJlbGVhc2UgdmVyc2lvblxuLy8gaWRlbnRpZmllcnMuXG5cbmNyZWF0ZVRva2VuKCdQUkVSRUxFQVNFJywgYCg/Oi0oJHtzcmNbdC5QUkVSRUxFQVNFSURFTlRJRklFUl1cbn0oPzpcXFxcLiR7c3JjW3QuUFJFUkVMRUFTRUlERU5USUZJRVJdfSkqKSlgKVxuXG5jcmVhdGVUb2tlbignUFJFUkVMRUFTRUxPT1NFJywgYCg/Oi0/KCR7c3JjW3QuUFJFUkVMRUFTRUlERU5USUZJRVJMT09TRV1cbn0oPzpcXFxcLiR7c3JjW3QuUFJFUkVMRUFTRUlERU5USUZJRVJMT09TRV19KSopKWApXG5cbi8vICMjIEJ1aWxkIE1ldGFkYXRhIElkZW50aWZpZXJcbi8vIEFueSBjb21iaW5hdGlvbiBvZiBkaWdpdHMsIGxldHRlcnMsIG9yIGh5cGhlbnMuXG5cbmNyZWF0ZVRva2VuKCdCVUlMRElERU5USUZJRVInLCAnWzAtOUEtWmEtei1dKycpXG5cbi8vICMjIEJ1aWxkIE1ldGFkYXRhXG4vLyBQbHVzIHNpZ24sIGZvbGxvd2VkIGJ5IG9uZSBvciBtb3JlIHBlcmlvZC1zZXBhcmF0ZWQgYnVpbGQgbWV0YWRhdGFcbi8vIGlkZW50aWZpZXJzLlxuXG5jcmVhdGVUb2tlbignQlVJTEQnLCBgKD86XFxcXCsoJHtzcmNbdC5CVUlMRElERU5USUZJRVJdXG59KD86XFxcXC4ke3NyY1t0LkJVSUxESURFTlRJRklFUl19KSopKWApXG5cbi8vICMjIEZ1bGwgVmVyc2lvbiBTdHJpbmdcbi8vIEEgbWFpbiB2ZXJzaW9uLCBmb2xsb3dlZCBvcHRpb25hbGx5IGJ5IGEgcHJlLXJlbGVhc2UgdmVyc2lvbiBhbmRcbi8vIGJ1aWxkIG1ldGFkYXRhLlxuXG4vLyBOb3RlIHRoYXQgdGhlIG9ubHkgbWFqb3IsIG1pbm9yLCBwYXRjaCwgYW5kIHByZS1yZWxlYXNlIHNlY3Rpb25zIG9mXG4vLyB0aGUgdmVyc2lvbiBzdHJpbmcgYXJlIGNhcHR1cmluZyBncm91cHMuICBUaGUgYnVpbGQgbWV0YWRhdGEgaXMgbm90IGFcbi8vIGNhcHR1cmluZyBncm91cCwgYmVjYXVzZSBpdCBzaG91bGQgbm90IGV2ZXIgYmUgdXNlZCBpbiB2ZXJzaW9uXG4vLyBjb21wYXJpc29uLlxuXG5jcmVhdGVUb2tlbignRlVMTFBMQUlOJywgYHY/JHtzcmNbdC5NQUlOVkVSU0lPTl1cbn0ke3NyY1t0LlBSRVJFTEVBU0VdfT8ke1xuICBzcmNbdC5CVUlMRF19P2ApXG5cbmNyZWF0ZVRva2VuKCdGVUxMJywgYF4ke3NyY1t0LkZVTExQTEFJTl19JGApXG5cbi8vIGxpa2UgZnVsbCwgYnV0IGFsbG93cyB2MS4yLjMgYW5kID0xLjIuMywgd2hpY2ggcGVvcGxlIGRvIHNvbWV0aW1lcy5cbi8vIGFsc28sIDEuMC4wYWxwaGExIChwcmVyZWxlYXNlIHdpdGhvdXQgdGhlIGh5cGhlbikgd2hpY2ggaXMgcHJldHR5XG4vLyBjb21tb24gaW4gdGhlIG5wbSByZWdpc3RyeS5cbmNyZWF0ZVRva2VuKCdMT09TRVBMQUlOJywgYFt2PVxcXFxzXSoke3NyY1t0Lk1BSU5WRVJTSU9OTE9PU0VdXG59JHtzcmNbdC5QUkVSRUxFQVNFTE9PU0VdfT8ke1xuICBzcmNbdC5CVUlMRF19P2ApXG5cbmNyZWF0ZVRva2VuKCdMT09TRScsIGBeJHtzcmNbdC5MT09TRVBMQUlOXX0kYClcblxuY3JlYXRlVG9rZW4oJ0dUTFQnLCAnKCg/Ojx8Pik/PT8pJylcblxuLy8gU29tZXRoaW5nIGxpa2UgXCIyLipcIiBvciBcIjEuMi54XCIuXG4vLyBOb3RlIHRoYXQgXCJ4LnhcIiBpcyBhIHZhbGlkIHhSYW5nZSBpZGVudGlmZXIsIG1lYW5pbmcgXCJhbnkgdmVyc2lvblwiXG4vLyBPbmx5IHRoZSBmaXJzdCBpdGVtIGlzIHN0cmljdGx5IHJlcXVpcmVkLlxuY3JlYXRlVG9rZW4oJ1hSQU5HRUlERU5USUZJRVJMT09TRScsIGAke3NyY1t0Lk5VTUVSSUNJREVOVElGSUVSTE9PU0VdfXx4fFh8XFxcXCpgKVxuY3JlYXRlVG9rZW4oJ1hSQU5HRUlERU5USUZJRVInLCBgJHtzcmNbdC5OVU1FUklDSURFTlRJRklFUl19fHh8WHxcXFxcKmApXG5cbmNyZWF0ZVRva2VuKCdYUkFOR0VQTEFJTicsIGBbdj1cXFxcc10qKCR7c3JjW3QuWFJBTkdFSURFTlRJRklFUl19KWAgK1xuICAgICAgICAgICAgICAgICAgIGAoPzpcXFxcLigke3NyY1t0LlhSQU5HRUlERU5USUZJRVJdfSlgICtcbiAgICAgICAgICAgICAgICAgICBgKD86XFxcXC4oJHtzcmNbdC5YUkFOR0VJREVOVElGSUVSXX0pYCArXG4gICAgICAgICAgICAgICAgICAgYCg/OiR7c3JjW3QuUFJFUkVMRUFTRV19KT8ke1xuICAgICAgICAgICAgICAgICAgICAgc3JjW3QuQlVJTERdfT9gICtcbiAgICAgICAgICAgICAgICAgICBgKT8pP2ApXG5cbmNyZWF0ZVRva2VuKCdYUkFOR0VQTEFJTkxPT1NFJywgYFt2PVxcXFxzXSooJHtzcmNbdC5YUkFOR0VJREVOVElGSUVSTE9PU0VdfSlgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGAoPzpcXFxcLigke3NyY1t0LlhSQU5HRUlERU5USUZJRVJMT09TRV19KWAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYCg/OlxcXFwuKCR7c3JjW3QuWFJBTkdFSURFTlRJRklFUkxPT1NFXX0pYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgKD86JHtzcmNbdC5QUkVSRUxFQVNFTE9PU0VdfSk/JHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjW3QuQlVJTERdfT9gICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGApPyk/YClcblxuY3JlYXRlVG9rZW4oJ1hSQU5HRScsIGBeJHtzcmNbdC5HVExUXX1cXFxccyoke3NyY1t0LlhSQU5HRVBMQUlOXX0kYClcbmNyZWF0ZVRva2VuKCdYUkFOR0VMT09TRScsIGBeJHtzcmNbdC5HVExUXX1cXFxccyoke3NyY1t0LlhSQU5HRVBMQUlOTE9PU0VdfSRgKVxuXG4vLyBDb2VyY2lvbi5cbi8vIEV4dHJhY3QgYW55dGhpbmcgdGhhdCBjb3VsZCBjb25jZWl2YWJseSBiZSBhIHBhcnQgb2YgYSB2YWxpZCBzZW12ZXJcbmNyZWF0ZVRva2VuKCdDT0VSQ0UnLCBgJHsnKF58W15cXFxcZF0pJyArXG4gICAgICAgICAgICAgICcoXFxcXGR7MSwnfSR7TUFYX1NBRkVfQ09NUE9ORU5UX0xFTkdUSH19KWAgK1xuICAgICAgICAgICAgICBgKD86XFxcXC4oXFxcXGR7MSwke01BWF9TQUZFX0NPTVBPTkVOVF9MRU5HVEh9fSkpP2AgK1xuICAgICAgICAgICAgICBgKD86XFxcXC4oXFxcXGR7MSwke01BWF9TQUZFX0NPTVBPTkVOVF9MRU5HVEh9fSkpP2AgK1xuICAgICAgICAgICAgICBgKD86JHxbXlxcXFxkXSlgKVxuY3JlYXRlVG9rZW4oJ0NPRVJDRVJUTCcsIHNyY1t0LkNPRVJDRV0sIHRydWUpXG5cbi8vIFRpbGRlIHJhbmdlcy5cbi8vIE1lYW5pbmcgaXMgXCJyZWFzb25hYmx5IGF0IG9yIGdyZWF0ZXIgdGhhblwiXG5jcmVhdGVUb2tlbignTE9ORVRJTERFJywgJyg/On4+PyknKVxuXG5jcmVhdGVUb2tlbignVElMREVUUklNJywgYChcXFxccyopJHtzcmNbdC5MT05FVElMREVdfVxcXFxzK2AsIHRydWUpXG5leHBvcnRzLnRpbGRlVHJpbVJlcGxhY2UgPSAnJDF+J1xuXG5jcmVhdGVUb2tlbignVElMREUnLCBgXiR7c3JjW3QuTE9ORVRJTERFXX0ke3NyY1t0LlhSQU5HRVBMQUlOXX0kYClcbmNyZWF0ZVRva2VuKCdUSUxERUxPT1NFJywgYF4ke3NyY1t0LkxPTkVUSUxERV19JHtzcmNbdC5YUkFOR0VQTEFJTkxPT1NFXX0kYClcblxuLy8gQ2FyZXQgcmFuZ2VzLlxuLy8gTWVhbmluZyBpcyBcImF0IGxlYXN0IGFuZCBiYWNrd2FyZHMgY29tcGF0aWJsZSB3aXRoXCJcbmNyZWF0ZVRva2VuKCdMT05FQ0FSRVQnLCAnKD86XFxcXF4pJylcblxuY3JlYXRlVG9rZW4oJ0NBUkVUVFJJTScsIGAoXFxcXHMqKSR7c3JjW3QuTE9ORUNBUkVUXX1cXFxccytgLCB0cnVlKVxuZXhwb3J0cy5jYXJldFRyaW1SZXBsYWNlID0gJyQxXidcblxuY3JlYXRlVG9rZW4oJ0NBUkVUJywgYF4ke3NyY1t0LkxPTkVDQVJFVF19JHtzcmNbdC5YUkFOR0VQTEFJTl19JGApXG5jcmVhdGVUb2tlbignQ0FSRVRMT09TRScsIGBeJHtzcmNbdC5MT05FQ0FSRVRdfSR7c3JjW3QuWFJBTkdFUExBSU5MT09TRV19JGApXG5cbi8vIEEgc2ltcGxlIGd0L2x0L2VxIHRoaW5nLCBvciBqdXN0IFwiXCIgdG8gaW5kaWNhdGUgXCJhbnkgdmVyc2lvblwiXG5jcmVhdGVUb2tlbignQ09NUEFSQVRPUkxPT1NFJywgYF4ke3NyY1t0LkdUTFRdfVxcXFxzKigke3NyY1t0LkxPT1NFUExBSU5dfSkkfF4kYClcbmNyZWF0ZVRva2VuKCdDT01QQVJBVE9SJywgYF4ke3NyY1t0LkdUTFRdfVxcXFxzKigke3NyY1t0LkZVTExQTEFJTl19KSR8XiRgKVxuXG4vLyBBbiBleHByZXNzaW9uIHRvIHN0cmlwIGFueSB3aGl0ZXNwYWNlIGJldHdlZW4gdGhlIGd0bHQgYW5kIHRoZSB0aGluZ1xuLy8gaXQgbW9kaWZpZXMsIHNvIHRoYXQgYD4gMS4yLjNgID09PiBgPjEuMi4zYFxuY3JlYXRlVG9rZW4oJ0NPTVBBUkFUT1JUUklNJywgYChcXFxccyopJHtzcmNbdC5HVExUXVxufVxcXFxzKigke3NyY1t0LkxPT1NFUExBSU5dfXwke3NyY1t0LlhSQU5HRVBMQUlOXX0pYCwgdHJ1ZSlcbmV4cG9ydHMuY29tcGFyYXRvclRyaW1SZXBsYWNlID0gJyQxJDIkMydcblxuLy8gU29tZXRoaW5nIGxpa2UgYDEuMi4zIC0gMS4yLjRgXG4vLyBOb3RlIHRoYXQgdGhlc2UgYWxsIHVzZSB0aGUgbG9vc2UgZm9ybSwgYmVjYXVzZSB0aGV5J2xsIGJlXG4vLyBjaGVja2VkIGFnYWluc3QgZWl0aGVyIHRoZSBzdHJpY3Qgb3IgbG9vc2UgY29tcGFyYXRvciBmb3JtXG4vLyBsYXRlci5cbmNyZWF0ZVRva2VuKCdIWVBIRU5SQU5HRScsIGBeXFxcXHMqKCR7c3JjW3QuWFJBTkdFUExBSU5dfSlgICtcbiAgICAgICAgICAgICAgICAgICBgXFxcXHMrLVxcXFxzK2AgK1xuICAgICAgICAgICAgICAgICAgIGAoJHtzcmNbdC5YUkFOR0VQTEFJTl19KWAgK1xuICAgICAgICAgICAgICAgICAgIGBcXFxccyokYClcblxuY3JlYXRlVG9rZW4oJ0hZUEhFTlJBTkdFTE9PU0UnLCBgXlxcXFxzKigke3NyY1t0LlhSQU5HRVBMQUlOTE9PU0VdfSlgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBcXFxccystXFxcXHMrYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgKCR7c3JjW3QuWFJBTkdFUExBSU5MT09TRV19KWAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYFxcXFxzKiRgKVxuXG4vLyBTdGFyIHJhbmdlcyBiYXNpY2FsbHkganVzdCBhbGxvdyBhbnl0aGluZyBhdCBhbGwuXG5jcmVhdGVUb2tlbignU1RBUicsICcoPHw+KT89P1xcXFxzKlxcXFwqJylcbiIsImNvbnN0IGNvbXBhcmVCdWlsZCA9IHJlcXVpcmUoJy4vY29tcGFyZS1idWlsZCcpXG5jb25zdCBzb3J0ID0gKGxpc3QsIGxvb3NlKSA9PiBsaXN0LnNvcnQoKGEsIGIpID0+IGNvbXBhcmVCdWlsZChhLCBiLCBsb29zZSkpXG5tb2R1bGUuZXhwb3J0cyA9IHNvcnRcbiIsImNvbnN0IGNvbXBhcmVCdWlsZCA9IHJlcXVpcmUoJy4vY29tcGFyZS1idWlsZCcpXG5jb25zdCByc29ydCA9IChsaXN0LCBsb29zZSkgPT4gbGlzdC5zb3J0KChhLCBiKSA9PiBjb21wYXJlQnVpbGQoYiwgYSwgbG9vc2UpKVxubW9kdWxlLmV4cG9ydHMgPSByc29ydFxuIiwiY29uc3QgU2VtVmVyID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9zZW12ZXInKVxuY29uc3QgcGFyc2UgPSByZXF1aXJlKCcuL3BhcnNlJylcbmNvbnN0IHtyZSwgdH0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9yZScpXG5cbmNvbnN0IGNvZXJjZSA9ICh2ZXJzaW9uLCBvcHRpb25zKSA9PiB7XG4gIGlmICh2ZXJzaW9uIGluc3RhbmNlb2YgU2VtVmVyKSB7XG4gICAgcmV0dXJuIHZlcnNpb25cbiAgfVxuXG4gIGlmICh0eXBlb2YgdmVyc2lvbiA9PT0gJ251bWJlcicpIHtcbiAgICB2ZXJzaW9uID0gU3RyaW5nKHZlcnNpb24pXG4gIH1cblxuICBpZiAodHlwZW9mIHZlcnNpb24gIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgbGV0IG1hdGNoID0gbnVsbFxuICBpZiAoIW9wdGlvbnMucnRsKSB7XG4gICAgbWF0Y2ggPSB2ZXJzaW9uLm1hdGNoKHJlW3QuQ09FUkNFXSlcbiAgfSBlbHNlIHtcbiAgICAvLyBGaW5kIHRoZSByaWdodC1tb3N0IGNvZXJjaWJsZSBzdHJpbmcgdGhhdCBkb2VzIG5vdCBzaGFyZVxuICAgIC8vIGEgdGVybWludXMgd2l0aCBhIG1vcmUgbGVmdC13YXJkIGNvZXJjaWJsZSBzdHJpbmcuXG4gICAgLy8gRWcsICcxLjIuMy40JyB3YW50cyB0byBjb2VyY2UgJzIuMy40Jywgbm90ICczLjQnIG9yICc0J1xuICAgIC8vXG4gICAgLy8gV2FsayB0aHJvdWdoIHRoZSBzdHJpbmcgY2hlY2tpbmcgd2l0aCBhIC9nIHJlZ2V4cFxuICAgIC8vIE1hbnVhbGx5IHNldCB0aGUgaW5kZXggc28gYXMgdG8gcGljayB1cCBvdmVybGFwcGluZyBtYXRjaGVzLlxuICAgIC8vIFN0b3Agd2hlbiB3ZSBnZXQgYSBtYXRjaCB0aGF0IGVuZHMgYXQgdGhlIHN0cmluZyBlbmQsIHNpbmNlIG5vXG4gICAgLy8gY29lcmNpYmxlIHN0cmluZyBjYW4gYmUgbW9yZSByaWdodC13YXJkIHdpdGhvdXQgdGhlIHNhbWUgdGVybWludXMuXG4gICAgbGV0IG5leHRcbiAgICB3aGlsZSAoKG5leHQgPSByZVt0LkNPRVJDRVJUTF0uZXhlYyh2ZXJzaW9uKSkgJiZcbiAgICAgICAgKCFtYXRjaCB8fCBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCAhPT0gdmVyc2lvbi5sZW5ndGgpXG4gICAgKSB7XG4gICAgICBpZiAoIW1hdGNoIHx8XG4gICAgICAgICAgICBuZXh0LmluZGV4ICsgbmV4dFswXS5sZW5ndGggIT09IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoKSB7XG4gICAgICAgIG1hdGNoID0gbmV4dFxuICAgICAgfVxuICAgICAgcmVbdC5DT0VSQ0VSVExdLmxhc3RJbmRleCA9IG5leHQuaW5kZXggKyBuZXh0WzFdLmxlbmd0aCArIG5leHRbMl0ubGVuZ3RoXG4gICAgfVxuICAgIC8vIGxlYXZlIGl0IGluIGEgY2xlYW4gc3RhdGVcbiAgICByZVt0LkNPRVJDRVJUTF0ubGFzdEluZGV4ID0gLTFcbiAgfVxuXG4gIGlmIChtYXRjaCA9PT0gbnVsbClcbiAgICByZXR1cm4gbnVsbFxuXG4gIHJldHVybiBwYXJzZShgJHttYXRjaFsyXX0uJHttYXRjaFszXSB8fCAnMCd9LiR7bWF0Y2hbNF0gfHwgJzAnfWAsIG9wdGlvbnMpXG59XG5tb2R1bGUuZXhwb3J0cyA9IGNvZXJjZVxuIiwiY29uc3QgUmFuZ2UgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3JhbmdlJylcblxuLy8gTW9zdGx5IGp1c3QgZm9yIHRlc3RpbmcgYW5kIGxlZ2FjeSBBUEkgcmVhc29uc1xuY29uc3QgdG9Db21wYXJhdG9ycyA9IChyYW5nZSwgb3B0aW9ucykgPT5cbiAgbmV3IFJhbmdlKHJhbmdlLCBvcHRpb25zKS5zZXRcbiAgICAubWFwKGNvbXAgPT4gY29tcC5tYXAoYyA9PiBjLnZhbHVlKS5qb2luKCcgJykudHJpbSgpLnNwbGl0KCcgJykpXG5cbm1vZHVsZS5leHBvcnRzID0gdG9Db21wYXJhdG9yc1xuIiwiY29uc3QgU2VtVmVyID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9zZW12ZXInKVxuY29uc3QgUmFuZ2UgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3JhbmdlJylcblxuY29uc3QgbWF4U2F0aXNmeWluZyA9ICh2ZXJzaW9ucywgcmFuZ2UsIG9wdGlvbnMpID0+IHtcbiAgbGV0IG1heCA9IG51bGxcbiAgbGV0IG1heFNWID0gbnVsbFxuICBsZXQgcmFuZ2VPYmogPSBudWxsXG4gIHRyeSB7XG4gICAgcmFuZ2VPYmogPSBuZXcgUmFuZ2UocmFuZ2UsIG9wdGlvbnMpXG4gIH0gY2F0Y2ggKGVyKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICB2ZXJzaW9ucy5mb3JFYWNoKCh2KSA9PiB7XG4gICAgaWYgKHJhbmdlT2JqLnRlc3QodikpIHtcbiAgICAgIC8vIHNhdGlzZmllcyh2LCByYW5nZSwgb3B0aW9ucylcbiAgICAgIGlmICghbWF4IHx8IG1heFNWLmNvbXBhcmUodikgPT09IC0xKSB7XG4gICAgICAgIC8vIGNvbXBhcmUobWF4LCB2LCB0cnVlKVxuICAgICAgICBtYXggPSB2XG4gICAgICAgIG1heFNWID0gbmV3IFNlbVZlcihtYXgsIG9wdGlvbnMpXG4gICAgICB9XG4gICAgfVxuICB9KVxuICByZXR1cm4gbWF4XG59XG5tb2R1bGUuZXhwb3J0cyA9IG1heFNhdGlzZnlpbmdcbiIsImNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvc2VtdmVyJylcbmNvbnN0IFJhbmdlID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9yYW5nZScpXG5jb25zdCBtaW5TYXRpc2Z5aW5nID0gKHZlcnNpb25zLCByYW5nZSwgb3B0aW9ucykgPT4ge1xuICBsZXQgbWluID0gbnVsbFxuICBsZXQgbWluU1YgPSBudWxsXG4gIGxldCByYW5nZU9iaiA9IG51bGxcbiAgdHJ5IHtcbiAgICByYW5nZU9iaiA9IG5ldyBSYW5nZShyYW5nZSwgb3B0aW9ucylcbiAgfSBjYXRjaCAoZXIpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG4gIHZlcnNpb25zLmZvckVhY2goKHYpID0+IHtcbiAgICBpZiAocmFuZ2VPYmoudGVzdCh2KSkge1xuICAgICAgLy8gc2F0aXNmaWVzKHYsIHJhbmdlLCBvcHRpb25zKVxuICAgICAgaWYgKCFtaW4gfHwgbWluU1YuY29tcGFyZSh2KSA9PT0gMSkge1xuICAgICAgICAvLyBjb21wYXJlKG1pbiwgdiwgdHJ1ZSlcbiAgICAgICAgbWluID0gdlxuICAgICAgICBtaW5TViA9IG5ldyBTZW1WZXIobWluLCBvcHRpb25zKVxuICAgICAgfVxuICAgIH1cbiAgfSlcbiAgcmV0dXJuIG1pblxufVxubW9kdWxlLmV4cG9ydHMgPSBtaW5TYXRpc2Z5aW5nXG4iLCJjb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3NlbXZlcicpXG5jb25zdCBSYW5nZSA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvcmFuZ2UnKVxuY29uc3QgZ3QgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMvZ3QnKVxuXG5jb25zdCBtaW5WZXJzaW9uID0gKHJhbmdlLCBsb29zZSkgPT4ge1xuICByYW5nZSA9IG5ldyBSYW5nZShyYW5nZSwgbG9vc2UpXG5cbiAgbGV0IG1pbnZlciA9IG5ldyBTZW1WZXIoJzAuMC4wJylcbiAgaWYgKHJhbmdlLnRlc3QobWludmVyKSkge1xuICAgIHJldHVybiBtaW52ZXJcbiAgfVxuXG4gIG1pbnZlciA9IG5ldyBTZW1WZXIoJzAuMC4wLTAnKVxuICBpZiAocmFuZ2UudGVzdChtaW52ZXIpKSB7XG4gICAgcmV0dXJuIG1pbnZlclxuICB9XG5cbiAgbWludmVyID0gbnVsbFxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJhbmdlLnNldC5sZW5ndGg7ICsraSkge1xuICAgIGNvbnN0IGNvbXBhcmF0b3JzID0gcmFuZ2Uuc2V0W2ldXG5cbiAgICBjb21wYXJhdG9ycy5mb3JFYWNoKChjb21wYXJhdG9yKSA9PiB7XG4gICAgICAvLyBDbG9uZSB0byBhdm9pZCBtYW5pcHVsYXRpbmcgdGhlIGNvbXBhcmF0b3IncyBzZW12ZXIgb2JqZWN0LlxuICAgICAgY29uc3QgY29tcHZlciA9IG5ldyBTZW1WZXIoY29tcGFyYXRvci5zZW12ZXIudmVyc2lvbilcbiAgICAgIHN3aXRjaCAoY29tcGFyYXRvci5vcGVyYXRvcikge1xuICAgICAgICBjYXNlICc+JzpcbiAgICAgICAgICBpZiAoY29tcHZlci5wcmVyZWxlYXNlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY29tcHZlci5wYXRjaCsrXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbXB2ZXIucHJlcmVsZWFzZS5wdXNoKDApXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbXB2ZXIucmF3ID0gY29tcHZlci5mb3JtYXQoKVxuICAgICAgICAgIC8qIGZhbGx0aHJvdWdoICovXG4gICAgICAgIGNhc2UgJyc6XG4gICAgICAgIGNhc2UgJz49JzpcbiAgICAgICAgICBpZiAoIW1pbnZlciB8fCBndChtaW52ZXIsIGNvbXB2ZXIpKSB7XG4gICAgICAgICAgICBtaW52ZXIgPSBjb21wdmVyXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJzwnOlxuICAgICAgICBjYXNlICc8PSc6XG4gICAgICAgICAgLyogSWdub3JlIG1heGltdW0gdmVyc2lvbnMgKi9cbiAgICAgICAgICBicmVha1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBvcGVyYXRpb246ICR7Y29tcGFyYXRvci5vcGVyYXRvcn1gKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBpZiAobWludmVyICYmIHJhbmdlLnRlc3QobWludmVyKSkge1xuICAgIHJldHVybiBtaW52ZXJcbiAgfVxuXG4gIHJldHVybiBudWxsXG59XG5tb2R1bGUuZXhwb3J0cyA9IG1pblZlcnNpb25cbiIsImNvbnN0IFJhbmdlID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9yYW5nZScpXG5jb25zdCB2YWxpZFJhbmdlID0gKHJhbmdlLCBvcHRpb25zKSA9PiB7XG4gIHRyeSB7XG4gICAgLy8gUmV0dXJuICcqJyBpbnN0ZWFkIG9mICcnIHNvIHRoYXQgdHJ1dGhpbmVzcyB3b3Jrcy5cbiAgICAvLyBUaGlzIHdpbGwgdGhyb3cgaWYgaXQncyBpbnZhbGlkIGFueXdheVxuICAgIHJldHVybiBuZXcgUmFuZ2UocmFuZ2UsIG9wdGlvbnMpLnJhbmdlIHx8ICcqJ1xuICB9IGNhdGNoIChlcikge1xuICAgIHJldHVybiBudWxsXG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gdmFsaWRSYW5nZVxuIiwiLy8gRGV0ZXJtaW5lIGlmIHZlcnNpb24gaXMgZ3JlYXRlciB0aGFuIGFsbCB0aGUgdmVyc2lvbnMgcG9zc2libGUgaW4gdGhlIHJhbmdlLlxuY29uc3Qgb3V0c2lkZSA9IHJlcXVpcmUoJy4vb3V0c2lkZScpXG5jb25zdCBndHIgPSAodmVyc2lvbiwgcmFuZ2UsIG9wdGlvbnMpID0+IG91dHNpZGUodmVyc2lvbiwgcmFuZ2UsICc+Jywgb3B0aW9ucylcbm1vZHVsZS5leHBvcnRzID0gZ3RyXG4iLCJjb25zdCBvdXRzaWRlID0gcmVxdWlyZSgnLi9vdXRzaWRlJylcbi8vIERldGVybWluZSBpZiB2ZXJzaW9uIGlzIGxlc3MgdGhhbiBhbGwgdGhlIHZlcnNpb25zIHBvc3NpYmxlIGluIHRoZSByYW5nZVxuY29uc3QgbHRyID0gKHZlcnNpb24sIHJhbmdlLCBvcHRpb25zKSA9PiBvdXRzaWRlKHZlcnNpb24sIHJhbmdlLCAnPCcsIG9wdGlvbnMpXG5tb2R1bGUuZXhwb3J0cyA9IGx0clxuIiwiY29uc3Qge01BWF9MRU5HVEh9ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvY29uc3RhbnRzJylcbmNvbnN0IHsgcmUsIHQgfSA9IHJlcXVpcmUoJy4uL2ludGVybmFsL3JlJylcbmNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvc2VtdmVyJylcblxuY29uc3QgcGFyc2UgPSAodmVyc2lvbiwgb3B0aW9ucykgPT4ge1xuICBpZiAoIW9wdGlvbnMgfHwgdHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIGxvb3NlOiAhIW9wdGlvbnMsXG4gICAgICBpbmNsdWRlUHJlcmVsZWFzZTogZmFsc2VcbiAgICB9XG4gIH1cblxuICBpZiAodmVyc2lvbiBpbnN0YW5jZW9mIFNlbVZlcikge1xuICAgIHJldHVybiB2ZXJzaW9uXG4gIH1cblxuICBpZiAodHlwZW9mIHZlcnNpb24gIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGlmICh2ZXJzaW9uLmxlbmd0aCA+IE1BWF9MRU5HVEgpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgY29uc3QgciA9IG9wdGlvbnMubG9vc2UgPyByZVt0LkxPT1NFXSA6IHJlW3QuRlVMTF1cbiAgaWYgKCFyLnRlc3QodmVyc2lvbikpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gbmV3IFNlbVZlcih2ZXJzaW9uLCBvcHRpb25zKVxuICB9IGNhdGNoIChlcikge1xuICAgIHJldHVybiBudWxsXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZVxuIiwiY29uc3QgUmFuZ2UgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3JhbmdlJylcbmNvbnN0IGludGVyc2VjdHMgPSAocjEsIHIyLCBvcHRpb25zKSA9PiB7XG4gIHIxID0gbmV3IFJhbmdlKHIxLCBvcHRpb25zKVxuICByMiA9IG5ldyBSYW5nZShyMiwgb3B0aW9ucylcbiAgcmV0dXJuIHIxLmludGVyc2VjdHMocjIpXG59XG5tb2R1bGUuZXhwb3J0cyA9IGludGVyc2VjdHNcbiIsImltcG9ydCBsb2cgZnJvbSAnbG9nbGV2ZWwnO1xuaW1wb3J0IHRocm90dGxlIGZyb20gJ2xvZGFzaC90aHJvdHRsZSc7XG5pbXBvcnQgVGFiTWFuYWdlclN0YXRlIGZyb20gJy4vdGFiTWFuYWdlclN0YXRlJztcbmltcG9ydCB7IFN0YXRlUmVmLCBhZGRTdGF0ZUNoYW5nZUxpc3RlbmVyIH0gZnJvbSAnb25lcmVmJztcbmltcG9ydCAqIGFzIEltbXV0YWJsZSBmcm9tICdpbW11dGFibGUnO1xuaW1wb3J0IHsgVGFiV2luZG93LCBUYWJJdGVtIH0gZnJvbSAnLi90YWJXaW5kb3cnO1xuY29uc3QgXyA9IHsgdGhyb3R0bGUgfTtcblxuLy8gU2F2ZSBwcmV2aW91cyBib29rbWFya0lkTWFwIGZvciBlZmZpY2llbnQgZGlmZlxubGV0IHByZXZCb29rbWFya0lkTWFwOiBJbW11dGFibGUuTWFwPHN0cmluZywgVGFiV2luZG93PiB8IG51bGwgPSBudWxsOyAvLyBsYXN0IGJvb2ttYXJrSWRNYXAgd3JpdHRlblxuXG5sZXQgbGF0ZXN0Qm9va21hcmtJZE1hcDogSW1tdXRhYmxlLk1hcDxzdHJpbmcsIFRhYldpbmRvdz4gfCBudWxsID0gbnVsbDsgLy8gbW9zdCByZWNlbnQgYm9va21hcmsgbWFwXG5cbi8qKlxuICogZ2V0IGRpZmZzIGJldHdlZW4gb2xkIGFuZCBuZXcgdmVyc2lvbiBvZiBib29rbWFyayBpZCBtYXAuXG4gKiBBc3N1bWVzIGFuIEltbXV0YWJsZS5NYXAoKSBvZiBzdHJpbmcgdG8gSW1tdXRhYmxlLlJlY29yZFxuICogcmV0dXJuczpcbiAqICB7IGRlbGV0ZXM6IEltbXV0YWJsZS5TZXQ8c3RyaW5nPiwgdXBkYXRlczogSW1tdXRhYmxlLlNlcTxyZWNvcmQ+IH1cbiAqL1xuY29uc3QgZ2V0RGlmZnMgPSAoXG4gICAgcHJldk1hcDogSW1tdXRhYmxlLk1hcDxzdHJpbmcsIFRhYldpbmRvdz4sXG4gICAgY3VyTWFwOiBJbW11dGFibGUuTWFwPHN0cmluZywgVGFiV2luZG93PlxuKSA9PiB7XG4gICAgLy8gZmluZCBkZWxldGVkIGtleXM6XG4gICAgY29uc3QgcHJldktleVNldCA9IHByZXZNYXAua2V5U2VxKCkudG9TZXQoKTtcbiAgICBjb25zdCBjdXJLZXlTZXQgPSBjdXJNYXAua2V5U2VxKCkudG9TZXQoKTtcbiAgICBjb25zdCBkZWxldGVzID0gcHJldktleVNldC5zdWJ0cmFjdChjdXJLZXlTZXQpO1xuXG4gICAgY29uc3QgdXBkYXRlZEtleXMgPSBjdXJNYXBcbiAgICAgICAgLmtleVNlcSgpXG4gICAgICAgIC5maWx0ZXIoayA9PiAhZGVsZXRlcy5oYXMoaykgJiYgcHJldk1hcC5nZXQoaykgIT09IGN1ck1hcC5nZXQoaykpO1xuICAgIGNvbnN0IHVwZGF0ZXMgPSB1cGRhdGVkS2V5cy5tYXAoayA9PiBjdXJNYXAuZ2V0KGspKTtcblxuICAgIHJldHVybiB7IGRlbGV0ZXMsIHVwZGF0ZXMgfTtcbn07XG5cbi8qKlxuICogZGV0ZXJtaW5lcyBpZiB0aGVyZSBhcmUgYW55IGRpZmZzIGJldHdlZW4gcHJldk1hcCBhbmQgY3VyTWFwXG4gKi9cbmNvbnN0IGhhc0RpZmZzID0gKFxuICAgIHByZXZNYXA6IEltbXV0YWJsZS5NYXA8c3RyaW5nLCBUYWJXaW5kb3c+LFxuICAgIGN1ck1hcDogSW1tdXRhYmxlLk1hcDxzdHJpbmcsIFRhYldpbmRvdz5cbikgPT4ge1xuICAgIGNvbnN0IGRpZmZzID0gZ2V0RGlmZnMocHJldk1hcCwgY3VyTWFwKTtcbiAgICByZXR1cm4gZGlmZnMuZGVsZXRlcy5jb3VudCgpID4gMCB8fCBkaWZmcy51cGRhdGVzLmNvdW50KCkgPiAwO1xufTtcblxuY29uc3Qgc2F2ZWRXaW5kb3dTdGF0ZVZlcnNpb24gPSAxO1xuXG4vLyBwZXJzaXN0IGJvb2ttYXJrSWRNYXAgdG8gbG9jYWwgc3RvcmFnZVxuY29uc3Qgc2F2ZVN0YXRlID0gKCkgPT4ge1xuICAgIHByZXZCb29rbWFya0lkTWFwID0gbGF0ZXN0Qm9va21hcmtJZE1hcDtcbiAgICAvLyBuZXZlciBwZXJzaXN0IGEgY2hyb21lIHNlc3Npb24gaWQgLS0gd2UnbGwgc2V0IGR1cmluZyBzdGFydHVwIGZyb20gc2Vzc2lvbnMgQVBJXG4gICAgY29uc3Qgc2VyQm9va21hcmtJZE1hcCA9IGxhdGVzdEJvb2ttYXJrSWRNYXAhLm1hcCh0dyA9PlxuICAgICAgICB0dy5yZW1vdmUoJ2Nocm9tZVNlc3Npb25JZCcpXG4gICAgKTtcbiAgICBjb25zdCBzYXZlZFdpbmRvd1N0YXRlID0gSlNPTi5zdHJpbmdpZnkoc2VyQm9va21hcmtJZE1hcCwgbnVsbCwgMik7XG4gICAgY29uc3Qgc2F2ZWRTdGF0ZSA9IHsgc2F2ZWRXaW5kb3dTdGF0ZVZlcnNpb24sIHNhdmVkV2luZG93U3RhdGUgfTtcbiAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoc2F2ZWRTdGF0ZSwgKCkgPT4ge1xuICAgICAgICBsb2cuZGVidWcobmV3IERhdGUoKS50b1N0cmluZygpICsgJyBzdWNjZXNmdWxseSB3cm90ZSB3aW5kb3cgc3RhdGUnKTtcbiAgICAgICAgLy8gbG9nLmRlYnVnKCd3aW5kb3cgc3RhdGU6ICcsIHNlckJvb2ttYXJrSWRNYXAudG9KUygpKTtcbiAgICB9KTtcbn07XG5cbi8vIEEgdGhyb3R0bGVkIHZlcnNpb24gb2Ygc2F2ZVN0YXRlIHRoYXQgd2lsbCB1cGRhdGUgb3VyIHNhdmVkXG4vLyBib29rbWFyayBzdGF0ZSBhdCBtb3N0IG9uY2UgZXZlcnkgMzAgc2VjXG5jb25zdCB0aHJvdHRsZWRTYXZlU3RhdGUgPSBfLnRocm90dGxlKHNhdmVTdGF0ZSwgMzAgKiAxMDAwKTtcblxuZXhwb3J0IGNvbnN0IGluaXQgPSAoc3RSZWY6IFN0YXRlUmVmPFRhYk1hbmFnZXJTdGF0ZT4pID0+IHtcbiAgICBjb25zdCBsaXN0ZW5lciA9IChhcHBTdGF0ZTogVGFiTWFuYWdlclN0YXRlKSA9PiB7XG4gICAgICAgIGxhdGVzdEJvb2ttYXJrSWRNYXAgPSBhcHBTdGF0ZS5ib29rbWFya0lkTWFwO1xuICAgICAgICBpZiAocHJldkJvb2ttYXJrSWRNYXAgPT0gbnVsbCkge1xuICAgICAgICAgICAgcHJldkJvb2ttYXJrSWRNYXAgPSBsYXRlc3RCb29rbWFya0lkTWFwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGhhc0RpZmZzKHByZXZCb29rbWFya0lkTWFwLCBsYXRlc3RCb29rbWFya0lkTWFwKSkge1xuICAgICAgICAgICAgICAgIHRocm90dGxlZFNhdmVTdGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBhZGRTdGF0ZUNoYW5nZUxpc3RlbmVyKHN0UmVmLCBsaXN0ZW5lcik7XG4gICAgbG9nLmRlYnVnKCdzYXZlZFN0YXRlLmluaXQ6IHJlZ2lzdGVyZWQgc3RhdGUgY2hhbmdlIGxpc3RlbmVyJyk7XG59O1xuIiwiLyoqXG4gKiBCYWNrZ3JvdW5kIGhlbHBlciBwYWdlLlxuICogR2F0aGVyaW5nIGJvb2ttYXJrIGFuZCB3aW5kb3cgc3RhdGUgYW5kIHBsYWNlcyBpbiBsb2NhbCBzdG9yYWdlIHNvIHRoYXRcbiAqIHBvcHVwIHJlbmRlcmluZyB3aWxsIGJlIGFzIGZhc3QgYXMgcG9zc2libGVcbiAqL1xuXG5pbXBvcnQgaGFzIGZyb20gJ2xvZGFzaC9oYXMnO1xuaW1wb3J0IGZyb21QYWlycyBmcm9tICdsb2Rhc2gvZnJvbVBhaXJzJztcbmltcG9ydCAqIGFzIEltbXV0YWJsZSBmcm9tICdpbW11dGFibGUnO1xuaW1wb3J0ICogYXMgc2VtdmVyIGZyb20gJ3NlbXZlcic7XG5pbXBvcnQgbG9nIGZyb20gJ2xvZ2xldmVsJztcbmltcG9ydCBUYWJNYW5hZ2VyU3RhdGUgZnJvbSAnLi90YWJNYW5hZ2VyU3RhdGUnO1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgKiBhcyBhY3Rpb25zIGZyb20gJy4vYWN0aW9ucyc7XG5pbXBvcnQgKiBhcyBzYXZlZFN0YXRlIGZyb20gJy4vc2F2ZWRTdGF0ZSc7XG5pbXBvcnQgY2hyb21lcCBmcm9tICdjaHJvbWUtcHJvbWlzZSc7XG5pbXBvcnQgeyBUYWJXaW5kb3csIFRhYkl0ZW0gfSBmcm9tICcuL3RhYldpbmRvdyc7XG5pbXBvcnQgKiBhcyB0YWJXaW5kb3dVdGlscyBmcm9tICcuL3RhYldpbmRvd1V0aWxzJztcbmltcG9ydCB7XG4gICAgU3RhdGVSZWYsXG4gICAgdXBkYXRlLFxuICAgIHJlbW92ZVN0YXRlQ2hhbmdlTGlzdGVuZXIsXG4gICAgbWtSZWYsXG4gICAgYXdhaXRhYmxlVXBkYXRlXG59IGZyb20gJ29uZXJlZic7XG5pbXBvcnQgQ2hyb21lUHJvbWlzZSBmcm9tICdjaHJvbWUtcHJvbWlzZS9jaHJvbWUtcHJvbWlzZSc7XG5pbXBvcnQgeyBpbmplY3RHbG9iYWwgfSBmcm9tICdlbW90aW9uJztcbmNvbnN0IF8gPSB7XG4gICAgaGFzLFxuICAgIGZyb21QYWlyc1xufTtcbmNvbnN0IGNocm9tZUV2ZW50TG9nID0gbG9nLmdldExvZ2dlcignY2hyb21lLWV2ZW50cycpO1xuY29uc3QgdGFibGlGb2xkZXJUaXRsZSA9ICdUYWJsaSBTYXZlZCBXaW5kb3dzJztcbmNvbnN0IGFyY2hpdmVGb2xkZXJUaXRsZSA9ICdfQXJjaGl2ZSc7XG5sZXQgdGFibGlGb2xkZXJJZDogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG5sZXQgYXJjaGl2ZUZvbGRlcklkOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuY29uc3QgaXNWYWxpZFdpbmRvd0ZvbGRlciA9IChcbiAgICBib29rbWFya05vZGU6IGNocm9tZS5ib29rbWFya3MuQm9va21hcmtUcmVlTm9kZVxuKSA9PiB7XG4gICAgaWYgKF8uaGFzKGJvb2ttYXJrTm9kZSwgJ3VybCcpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoYm9va21hcmtOb2RlLnRpdGxlWzBdID09PSAnXycpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufTtcblxuLyogT24gc3RhcnR1cCBsb2FkIG1hbmFnZWQgd2luZG93cyBmcm9tIGJvb2ttYXJrcyBmb2xkZXIgKi9cblxuZnVuY3Rpb24gbG9hZE1hbmFnZWRXaW5kb3dzKFxuICAgIHdpblN0b3JlOiBUYWJNYW5hZ2VyU3RhdGUsXG4gICAgdGFibGlGb2xkZXI6IGNocm9tZS5ib29rbWFya3MuQm9va21hcmtUcmVlTm9kZVxuKTogVGFiTWFuYWdlclN0YXRlIHtcbiAgICBsb2cuZGVidWcoJ2xvYWRNYW5hZ2VkV2luZG93czogIHRhYmxpRm9sZGVyOiAnLCB0YWJsaUZvbGRlcik7XG5cbiAgICB2YXIgZm9sZGVyVGFiV2luZG93cyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YWJsaUZvbGRlci5jaGlsZHJlbiEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHdpbmRvd0ZvbGRlciA9IHRhYmxpRm9sZGVyLmNoaWxkcmVuIVtpXTtcblxuICAgICAgICBpZiAoaXNWYWxpZFdpbmRvd0ZvbGRlcih3aW5kb3dGb2xkZXIpKSB7XG4gICAgICAgICAgICBmb2xkZXJUYWJXaW5kb3dzLnB1c2goXG4gICAgICAgICAgICAgICAgdGFiV2luZG93VXRpbHMubWFrZUZvbGRlclRhYldpbmRvdyh3aW5kb3dGb2xkZXIpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHdpblN0b3JlLnJlZ2lzdGVyVGFiV2luZG93cyhmb2xkZXJUYWJXaW5kb3dzKTtcbn1cbi8qXG4gKiBnaXZlbiBhIHNwZWNpZmljIHBhcmVudCBGb2xkZXIgbm9kZSwgZW5zdXJlIGEgcGFydGljdWxhciBjaGlsZCBleGlzdHMuXG4gKiByZXR1cm5zOiBQcm9taXNlPEJvb2ttYXJrVHJlZU5vZGU+XG4gKi9cblxuYXN5bmMgZnVuY3Rpb24gZW5zdXJlQ2hpbGRGb2xkZXIoXG4gICAgcGFyZW50Tm9kZTogY2hyb21lLmJvb2ttYXJrcy5Cb29rbWFya1RyZWVOb2RlLFxuICAgIGNoaWxkRm9sZGVyTmFtZTogc3RyaW5nXG4pIHtcbiAgICBpZiAocGFyZW50Tm9kZS5jaGlsZHJlbikge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmVudE5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjaGlsZEZvbGRlciA9IHBhcmVudE5vZGUuY2hpbGRyZW5baV07XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBjaGlsZEZvbGRlci50aXRsZS50b0xvd2VyQ2FzZSgpID09PVxuICAgICAgICAgICAgICAgIGNoaWxkRm9sZGVyTmFtZS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAvLyBleGlzdHNcbiAgICAgICAgICAgICAgICAvLyBsb2cuZGVidWcoJ2ZvdW5kIHRhcmdldCBjaGlsZCBmb2xkZXI6ICcsIGNoaWxkRm9sZGVyTmFtZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGRGb2xkZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsb2cuaW5mbygnQ2hpbGQgZm9sZGVyICcsIGNoaWxkRm9sZGVyTmFtZSwgJyBOb3QgZm91bmQsIGNyZWF0aW5nLi4uJyk7IC8vIElmIHdlIGdvdCBoZXJlLCBjaGlsZCBGb2xkZXIgZG9lc24ndCBleGlzdFxuXG4gICAgdmFyIGZvbGRlck9iaiA9IHtcbiAgICAgICAgcGFyZW50SWQ6IHBhcmVudE5vZGUuaWQsXG4gICAgICAgIHRpdGxlOiBjaGlsZEZvbGRlck5hbWVcbiAgICB9O1xuICAgIHJldHVybiBjaHJvbWVwLmJvb2ttYXJrcy5jcmVhdGUoZm9sZGVyT2JqKTtcbn1cbi8qKlxuICpcbiAqIGluaXRpYWxpemUgc2hvd1JlbE5vdGVzIGZpZWxkIG9mIFRhYk1hbmFnZXJTdGF0ZSBiYXNlZCBvbiBjb21wYXJpbmdcbiAqIHJlbE5vdGVzIHZlcnNpb24gZnJvbSBsb2NhbFN0b3JhZ2Ugd2l0aCB0aGlzIGV4dGVuc2lvbiBtYW5pZmVzdFxuICpcbiAqIEByZXR1cm4ge1RhYk1hbmFnZXJTdGF0ZX0gcG9zc2libHkgdXBkYXRlZCBUYWJNYW5hZ2VyU3RhdGVcbiAqL1xuXG5mdW5jdGlvbiBpbml0UmVsTm90ZXMoc3Q6IFRhYk1hbmFnZXJTdGF0ZSwgc3RvcmVkVmVyc2lvbjogc3RyaW5nKSB7XG4gICAgY29uc3QgbWFuaWZlc3QgPSBjaHJvbWUucnVudGltZS5nZXRNYW5pZmVzdCgpOyAvLyAgbG9nLmRlYnVnKFwiaW5pdFJlbE5vdGVzOiBzdG9yZWRWZXJzaW9uOiBcIiwgc3RvcmVkVmVyc2lvbiwgXCIsIG1hbmlmZXN0OiBcIiwgbWFuaWZlc3QudmVyc2lvbilcblxuICAgIGNvbnN0IHNob3dSZWxOb3RlcyA9XG4gICAgICAgICFzZW12ZXIudmFsaWQoc3RvcmVkVmVyc2lvbikgfHxcbiAgICAgICAgc2VtdmVyLmd0KG1hbmlmZXN0LnZlcnNpb24sIHN0b3JlZFZlcnNpb24pO1xuICAgIHJldHVybiBzdC5zZXQoJ3Nob3dSZWxOb3RlcycsIHNob3dSZWxOb3Rlcyk7XG59XG4vKipcbiAqIGFjcXVpcmUgbWFpbiBmb2xkZXIgYW5kIGFyY2hpdmUgZm9sZGVyIGFuZCBpbml0aWFsaXplXG4gKiB3aW5kb3cgc3RvcmVcbiAqXG4gKiByZXR1cm5zOiBQcm9taXNlPFRhYk1hbmFnZXJTdGF0ZT5cbiAqL1xuXG5jb25zdCBpbml0V2luU3RvcmUgPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdHJlZSA9IGF3YWl0IGNocm9tZXAuYm9va21hcmtzLmdldFRyZWUoKTtcbiAgICAvLyBsb2cuZGVidWcoJ2luaXRXaW5TdG9yZTogY2hyb21lIGJvb2ttYXJrcyB0cmVlOiAnLCB0cmVlKTtcblxuICAgIGNvbnN0IHJvb3RDaGlsZHJlbiA9IHRyZWVbMF0uY2hpbGRyZW4hO1xuICAgIC8vIFRyeSB0aGUgZml4ZWQgY2hpbGQgaW5kZXggZm9yIENocm9tZTpcbiAgICBsZXQgb3RoZXJCb29rbWFya3NOb2RlID0gcm9vdENoaWxkcmVuWzFdO1xuICAgIGlmIChvdGhlckJvb2ttYXJrc05vZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb2cud2FybihcbiAgICAgICAgICAgIFwiQ291bGQgbm90IGF0dGFjaCB0byBDaHJvbWUgcHJlZGVmaW5lZCAnT3RoZXIgQm9va21hcmtzJyBmb2xkZXJcIlxuICAgICAgICApO1xuICAgICAgICBsb2cud2FybihcbiAgICAgICAgICAgICdBdHRlbXB0aW5nIHRvIGF0dGFjaCB0byByb290IChCb29tYXJrcyBCYXIpIGFzIGEgd29ya2Fyb3VuZCBmb3IgQnJhdmUgQnJvd3NlciBpc3N1ZSdcbiAgICAgICAgKTtcbiAgICAgICAgbG9nLndhcm4oXG4gICAgICAgICAgICAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9icmF2ZS9icmF2ZS1icm93c2VyL2lzc3Vlcy83NjM5IGZvciBhZGRpdGlvbmFsIGluZm8nXG4gICAgICAgICk7XG4gICAgICAgIG90aGVyQm9va21hcmtzTm9kZSA9IHJvb3RDaGlsZHJlbltyb290Q2hpbGRyZW4ubGVuZ3RoIC0gMV07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbG9nLmRlYnVnKFwiJ090aGVyIEJvb2ttYXJrcycgZm9sZGVyIGFjcXVpcmVkXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IHRhYmxpRm9sZGVyID0gYXdhaXQgZW5zdXJlQ2hpbGRGb2xkZXIoXG4gICAgICAgIG90aGVyQm9va21hcmtzTm9kZSxcbiAgICAgICAgdGFibGlGb2xkZXJUaXRsZVxuICAgICk7IC8vIGxvZy5kZWJ1ZygndGFiIG1hbmFnZXIgZm9sZGVyIGFjcXVpcmVkLicpXG5cbiAgICB0YWJsaUZvbGRlcklkID0gdGFibGlGb2xkZXIuaWQ7XG4gICAgY29uc3QgYXJjaGl2ZUZvbGRlciA9IGF3YWl0IGVuc3VyZUNoaWxkRm9sZGVyKFxuICAgICAgICB0YWJsaUZvbGRlcixcbiAgICAgICAgYXJjaGl2ZUZvbGRlclRpdGxlXG4gICAgKTsgLy8gbG9nLmRlYnVnKCdhcmNoaXZlIGZvbGRlciBhY3F1aXJlZC4nKVxuXG4gICAgYXJjaGl2ZUZvbGRlcklkID0gYXJjaGl2ZUZvbGRlci5pZDtcbiAgICBjb25zdCBzdWJUcmVlTm9kZXMgPSBhd2FpdCBjaHJvbWVwLmJvb2ttYXJrcy5nZXRTdWJUcmVlKHRhYmxpRm9sZGVyLmlkKTsgLy8gbG9nLmRlYnVnKFwiYm9va21hcmtzLmdldFN1YlRyZWUgZm9yIHRhYmxpRm9sZGVyOiBcIiwgc3ViVHJlZU5vZGVzKVxuXG4gICAgY29uc3QgYmFzZVdpblN0b3JlID0gbmV3IFRhYk1hbmFnZXJTdGF0ZSh7XG4gICAgICAgIGZvbGRlcklkOiB0YWJsaUZvbGRlcklkLFxuICAgICAgICBhcmNoaXZlRm9sZGVySWRcbiAgICB9KTtcbiAgICBjb25zdCBsb2FkZWRXaW5TdG9yZSA9IGxvYWRNYW5hZ2VkV2luZG93cyhiYXNlV2luU3RvcmUsIHN1YlRyZWVOb2Rlc1swXSk7XG4gICAgY29uc3QgaXRlbXMgPSBhd2FpdCBjaHJvbWVwLnN0b3JhZ2UubG9jYWwuZ2V0KHtcbiAgICAgICAgcmVhZFJlbE5vdGVzVmVyc2lvbjogJydcbiAgICB9KTtcbiAgICBjb25zdCByZWxOb3Rlc1N0b3JlID0gaW5pdFJlbE5vdGVzKFxuICAgICAgICBsb2FkZWRXaW5TdG9yZSxcbiAgICAgICAgaXRlbXMucmVhZFJlbE5vdGVzVmVyc2lvblxuICAgICk7XG4gICAgcmV0dXJuIHJlbE5vdGVzU3RvcmU7XG59O1xuXG5mdW5jdGlvbiBzZXR1cENvbm5lY3Rpb25MaXN0ZW5lcihzdGF0ZVJlZjogU3RhdGVSZWY8VGFiTWFuYWdlclN0YXRlPikge1xuICAgIGNocm9tZS5ydW50aW1lLm9uQ29ubmVjdC5hZGRMaXN0ZW5lcihwb3J0ID0+IHtcbiAgICAgICAgY2hyb21lRXZlbnRMb2cuZGVidWcoJ0Nocm9tZSBFdmVudDogb25Db25uZWN0Jyk7XG5cbiAgICAgICAgcG9ydC5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoKG1zZzogYW55KSA9PiB7XG4gICAgICAgICAgICBjaHJvbWVFdmVudExvZy5kZWJ1ZygnQ2hyb21lIEV2ZW50OiBvbk1lc3NhZ2UgJywgbXNnKTtcbiAgICAgICAgICAgIHZhciBsaXN0ZW5lcklkID0gbXNnLmxpc3RlbmVySWQ7XG4gICAgICAgICAgICBwb3J0Lm9uRGlzY29ubmVjdC5hZGRMaXN0ZW5lcigoKSA9PiB7XG4gICAgICAgICAgICAgICAgY2hyb21lRXZlbnRMb2cuZGVidWcoJ0Nocm9tZSBFdmVudDogb25EaXNjb25uZWN0Jyk7XG4gICAgICAgICAgICAgICAgcmVtb3ZlU3RhdGVDaGFuZ2VMaXN0ZW5lcihzdGF0ZVJlZiwgbGlzdGVuZXJJZCk7XG4gICAgICAgICAgICAgICAgbG9nLmRlYnVnKCdSZW1vdmVkIHZpZXcgbGlzdGVuZXIgJywgbGlzdGVuZXJJZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vKipcbiAqIERvd25sb2FkIHRoZSBzcGVjaWZpZWQgb2JqZWN0IGFzIEpTT04gKGZvciB0ZXN0aW5nKVxuICovXG5cbmZ1bmN0aW9uIGRvd25sb2FkSlNPTihkdW1wT2JqOiBhbnksIGZpbGVuYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCBkdW1wU3RyID0gSlNPTi5zdHJpbmdpZnkoZHVtcE9iaiwgbnVsbCwgMik7XG4gICAgY29uc3Qgd2luQmxvYiA9IG5ldyBCbG9iKFtkdW1wU3RyXSwge1xuICAgICAgICB0eXBlOiAnYXBwbGljYXRpb24vanNvbidcbiAgICB9KTtcbiAgICBjb25zdCB1cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKHdpbkJsb2IpO1xuICAgIGNocm9tZS5kb3dubG9hZHMuZG93bmxvYWQoe1xuICAgICAgICB1cmwsXG4gICAgICAgIGZpbGVuYW1lXG4gICAgfSk7XG59XG4vKipcbiAqIGR1bXAgYWxsIHdpbmRvd3MgLS0gdXNlZnVsIGZvciBjcmVhdGluZyBwZXJmb3JtYW5jZSB0ZXN0c1xuICpcbiAqIE5PVEU6ICBSZXF1aXJlcyB0aGUgXCJkb3dubG9hZHNcIiBwZXJtaXNzaW9uIGluIHRoZSBtYW5pZmVzdCFcbiAqL1xuXG5mdW5jdGlvbiBkdW1wQWxsKHdpblN0b3JlOiBUYWJNYW5hZ2VyU3RhdGUpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgY29uc3QgYWxsV2luZG93cyA9IHdpblN0b3JlLmdldEFsbCgpO1xuICAgIGNvbnN0IGpzV2luZG93cyA9IGFsbFdpbmRvd3MubWFwKHR3ID0+IHR3LnRvSlMoKSk7XG4gICAgY29uc3QgZHVtcE9iaiA9IHtcbiAgICAgICAgYWxsV2luZG93czoganNXaW5kb3dzXG4gICAgfTtcbiAgICBkb3dubG9hZEpTT04oZHVtcE9iaiwgJ3dpblN0b3JlU25hcC5qc29uJyk7XG59XG5cbmZ1bmN0aW9uIGR1bXBDaHJvbWVXaW5kb3dzKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBjaHJvbWUud2luZG93cy5nZXRBbGwoXG4gICAgICAgIHtcbiAgICAgICAgICAgIHBvcHVsYXRlOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIGNocm9tZVdpbmRvd3MgPT4ge1xuICAgICAgICAgICAgZG93bmxvYWRKU09OKFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY2hyb21lV2luZG93c1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ2Nocm9tZVdpbmRvd1NuYXAuanNvbidcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICApO1xufVxuXG5hc3luYyBmdW5jdGlvbiBvblRhYkNyZWF0ZWQoXG4gICAgc3RhdGVSZWY6IFN0YXRlUmVmPFRhYk1hbmFnZXJTdGF0ZT4sXG4gICAgdGFiOiBjaHJvbWUudGFicy5UYWIsXG4gICAgbWFya0FjdGl2ZTogYm9vbGVhbiA9IGZhbHNlXG4pIHtcbiAgICBjaHJvbWVFdmVudExvZy5kZWJ1ZygnQ2hyb21lIEV2ZW50OiB0YWJzLm9uQ3JlYXRlZDogJywgdGFiKTtcbiAgICBjb25zdCBbc3QsIF9dID0gYXdhaXQgYXdhaXRhYmxlVXBkYXRlKHN0YXRlUmVmLCBzdGF0ZSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYldpbmRvdyA9IHN0YXRlLmdldFRhYldpbmRvd0J5Q2hyb21lSWQodGFiLndpbmRvd0lkKTtcblxuICAgICAgICBpZiAoIXRhYldpbmRvdykge1xuICAgICAgICAgICAgbG9nLndhcm4oJ3RhYnMub25DcmVhdGVkOiB3aW5kb3cgaWQgbm90IGZvdW5kOiAnLCB0YWIud2luZG93SWQpO1xuICAgICAgICAgICAgcmV0dXJuIFtzdGF0ZSwgbnVsbF07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG9wZW5lclVybDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAodGFiLm9wZW5lclRhYklkKSB7XG4gICAgICAgICAgICBjb25zdCBlbnRyeSA9IHRhYldpbmRvdy5maW5kQ2hyb21lVGFiSWQodGFiLm9wZW5lclRhYklkKTtcblxuICAgICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgW18sIG9wZW5lclRhYkl0ZW1dID0gZW50cnk7XG4gICAgICAgICAgICAgICAgb3BlbmVyVXJsID0gb3BlbmVyVGFiSXRlbS51cmw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3QgPSBzdGF0ZS5oYW5kbGVUYWJDcmVhdGVkKHRhYldpbmRvdywgdGFiLCBvcGVuZXJVcmwpO1xuICAgICAgICBjb25zdCBudyA9IHN0LmdldFRhYldpbmRvd0J5Q2hyb21lSWQodGFiLndpbmRvd0lkKTtcbiAgICAgICAgY29uc3QgYXN0ID0gbWFya0FjdGl2ZSA/IHN0LmhhbmRsZVRhYkFjdGl2YXRlZChudyEsIHRhYi5pZCEpIDogc3Q7XG4gICAgICAgIHJldHVybiBbYXN0LCBudWxsXTtcbiAgICB9KTtcblxuICAgIGlmIChzdC5wcmVmZXJlbmNlcy5kZWR1cGVUYWJzICYmIHRhYi5pZCkge1xuICAgICAgICAvLyBsZXQncyB0cnkgcGFzc2luZyB0YWIgYXMgY2hhbmdlSW5mbyBzaW5jZSBwcmVzdW1hYnkgdGhlXG4gICAgICAgIC8vIGtleXMgYXJlIHRoZSBzYW1lOlxuICAgICAgICBkZWR1cGVUYWIoc3QsIHN0YXRlUmVmLCB0YWIuaWQsIHRhYiwgdGFiKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG9uVGFiUmVtb3ZlZChcbiAgICBzdGF0ZVJlZjogU3RhdGVSZWY8VGFiTWFuYWdlclN0YXRlPixcbiAgICB3aW5kb3dJZDogbnVtYmVyLFxuICAgIHRhYklkOiBudW1iZXJcbikge1xuICAgIGxvZy5kZWJ1Zygnb25UYWJSZW1vdmVkOiAnLCB3aW5kb3dJZCwgdGFiSWQpO1xuICAgIHVwZGF0ZShzdGF0ZVJlZiwgc3RhdGUgPT4ge1xuICAgICAgICBjb25zdCB0YWJXaW5kb3cgPSBzdGF0ZS5nZXRUYWJXaW5kb3dCeUNocm9tZUlkKHdpbmRvd0lkKTtcblxuICAgICAgICBpZiAoIXRhYldpbmRvdykge1xuICAgICAgICAgICAgbG9nLmluZm8oJ3RhYnMub25UYWJSZW1vdmVkOiB3aW5kb3cgaWQgbm90IGZvdW5kOiAnLCB3aW5kb3dJZCk7XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3RhdGUuaGFuZGxlVGFiQ2xvc2VkKHRhYldpbmRvdywgdGFiSWQpO1xuICAgIH0pO1xufVxuXG5jb25zdCBkZWR1cGVUYWIgPSBhc3luYyAoXG4gICAgc3Q6IFRhYk1hbmFnZXJTdGF0ZSxcbiAgICBzdGF0ZVJlZjogU3RhdGVSZWY8VGFiTWFuYWdlclN0YXRlPixcbiAgICB0YWJJZDogbnVtYmVyLFxuICAgIGNoYW5nZUluZm86IGNocm9tZS50YWJzLlRhYkNoYW5nZUluZm8sXG4gICAgdGFiOiBjaHJvbWUudGFicy5UYWJcbikgPT4ge1xuICAgIC8vIGZvciBkZWJ1Z2dpbmc6XG4gICAgY29uc3QganNpZnlQYWlycyA9IChwYWlyczogW2FueSwgYW55XVtdKSA9PlxuICAgICAgICBwYWlycy5tYXAoKFthLCBiXSkgPT4gW2EudG9KUygpLCBiLnRvSlMoKV0pO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdXJsID0gY2hhbmdlSW5mby51cmw7XG5cbiAgICAgICAgLy8gVE9ETzogV2Ugc2hvdWxkIHJlYWxseSBsb29rIGF0IHBlbmRpbmdVcmwsIHRvIHRyeSBhbmQgZGVkdXBlIHRhYnMgZWFybGllci4uLlxuICAgICAgICBpZiAodXJsICE9IG51bGwgJiYgdXJsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHRhYkl0ZW0gPSBzdC5nZXRUYWJJdGVtQnlDaHJvbWVUYWJJZCh0YWJJZCk7XG5cbiAgICAgICAgICAgIC8vIElmIHVybCBtYXRjaGVzIHRhYkl0ZW0ub3BlbmVyVXJsLCB0aGlzIGlzIHVzdWFsbHkgYSB1c2VyLWluaXRpYXRlZCBEdXBsaWNhdGVcbiAgICAgICAgICAgIC8vIG9wZXJhdGlvbiAodmlhIHRhYiBjb250ZXh0IG1lbnUpLCBzbyBza2lwIGRlLWR1cCdpbmc6XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgdGFiSXRlbSAmJlxuICAgICAgICAgICAgICAgIHRhYkl0ZW0ub3BlbiAmJlxuICAgICAgICAgICAgICAgIHRhYkl0ZW0ub3BlblN0YXRlIS5vcGVuZXJVcmwgPT09IHVybFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgbG9nLmRlYnVnKFxuICAgICAgICAgICAgICAgICAgICAnZGVkdXBlVGFiOiB1c2VyLWluaXRpYXRlZCBEdXBsaWNhdGUgb2YgJyxcbiAgICAgICAgICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgICAgICAgICAnLCBza2lwcGluZy4uLidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgbWF0Y2hQYWlycyA9IHN0LmZpbmRVUkwodXJsKTsgLy8gYW5kIGZpbHRlciBvdXQgdGhlIHRhYiB3ZSdyZSBjaGVja2luZzpcblxuICAgICAgICAgICAgY29uc3QgaXNTZWxmID0gKHR3OiBUYWJXaW5kb3csIHRpOiBUYWJJdGVtKSA9PlxuICAgICAgICAgICAgICAgIHR3Lm9wZW4gJiZcbiAgICAgICAgICAgICAgICB0dy5vcGVuV2luZG93SWQgPT09IHRhYi53aW5kb3dJZCAmJlxuICAgICAgICAgICAgICAgIHRpLm9wZW4gJiZcbiAgICAgICAgICAgICAgICB0aS5vcGVuU3RhdGUhLm9wZW5UYWJJZCA9PT0gdGFiSWQ7XG5cbiAgICAgICAgICAgIGNvbnN0IGZpbHRlcmVkTWF0Y2hQYWlycyA9IG1hdGNoUGFpcnMuZmlsdGVyKFxuICAgICAgICAgICAgICAgIChbdHcsIHRpXSkgPT4gIWlzU2VsZih0dywgdGkpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAvKiAgICAgICAgICAgICBsb2cuZGVidWcoJ2RlZHVwZVRhYjogJywge1xuICAgICAgICAgICAgICAgIG1hdGNoUGFpcnM6IGpzaWZ5UGFpcnMobWF0Y2hQYWlycyksXG4gICAgICAgICAgICAgICAgZmlsdGVyZWRNYXRjaFBhaXJzOiBqc2lmeVBhaXJzKGZpbHRlcmVkTWF0Y2hQYWlycylcbiAgICAgICAgICAgIH0pOyAqL1xuXG4gICAgICAgICAgICBpZiAoZmlsdGVyZWRNYXRjaFBhaXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBbb3JpZ1RhYldpbmRvdywgb3JpZ1RhYl0gPSBmaWx0ZXJlZE1hdGNoUGFpcnNbMF07XG4gICAgICAgICAgICAgICAgLy8gaWYgd2Ugd2FudGVkIHRvIHByb2dyYW1hdGljYWxseSBnbyBiYWNrIGluc3RlYWQgb2YgY2xvc2luZzpcbiAgICAgICAgICAgICAgICAvLyAocmVxdWlyZWQgPGFsbF91cmxzPiBwZXJtaXNzaW9uIGluIG1hbmlmZXN0KVxuICAgICAgICAgICAgICAgIC8vIGNvbnN0IHJldmVydFNjcmlwdCA9IHtjb2RlOiAnaGlzdG9yeS5iYWNrKCk7J31cbiAgICAgICAgICAgICAgICAvLyBhd2FpdCBjaHJvbWVwLnRhYnMuZXhlY3V0ZVNjcmlwdCh0YWJJZCwgcmV2ZXJ0U2NyaXB0KVxuXG4gICAgICAgICAgICAgICAgbG9nLmRlYnVnKFxuICAgICAgICAgICAgICAgICAgICAnKioqIGRlZHVwZVRhYjogY2xvc2luZyBkZXRlY3RlZCBkdXBsaWNhdGUgdGFiICcsXG4gICAgICAgICAgICAgICAgICAgIHRhYklkXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0YWJXaW5kb3cgPSBzdC5nZXRUYWJXaW5kb3dCeUNocm9tZUlkKHRhYi53aW5kb3dJZCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFiQ2xvc2VkU3QgPSBhd2FpdCBhY3Rpb25zLmNsb3NlVGFiKFxuICAgICAgICAgICAgICAgICAgICB0YWJXaW5kb3chLFxuICAgICAgICAgICAgICAgICAgICB0YWJJZCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVSZWZcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGFjdGlvbnMuYWN0aXZhdGVPclJlc3RvcmVUYWIoXG4gICAgICAgICAgICAgICAgICAgIG9yaWdUYWJXaW5kb3csXG4gICAgICAgICAgICAgICAgICAgIG9yaWdUYWIsXG4gICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlUmVmXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgbG9nLndhcm4oJ2NhdWdodCBlcnJvciBkdXJpbmcgdGFiIGRlLWR1cCAoaWdub3JpbmcuLi4pOiAnLCBlKTtcbiAgICB9XG59O1xuXG5jb25zdCBvblRhYlVwZGF0ZWQgPSBhc3luYyAoXG4gICAgc3RhdGVSZWY6IFN0YXRlUmVmPFRhYk1hbmFnZXJTdGF0ZT4sXG4gICAgdGFiSWQ6IG51bWJlcixcbiAgICBjaGFuZ2VJbmZvOiBjaHJvbWUudGFicy5UYWJDaGFuZ2VJbmZvLFxuICAgIHRhYjogY2hyb21lLnRhYnMuVGFiXG4pID0+IHtcbiAgICBjaHJvbWVFdmVudExvZy5kZWJ1ZyhcbiAgICAgICAgJ0Nocm9tZSBFdmVudDogdGFicy5vblVwZGF0ZWQ6ICcsXG4gICAgICAgIHRhYklkLFxuICAgICAgICBjaGFuZ2VJbmZvLFxuICAgICAgICB0YWJcbiAgICApO1xuICAgIGNvbnN0IFtzdCwgX10gPSBhd2FpdCBhd2FpdGFibGVVcGRhdGUoc3RhdGVSZWYsIHN0YXRlID0+IHtcbiAgICAgICAgY29uc3QgdGFiV2luZG93ID0gc3RhdGUuZ2V0VGFiV2luZG93QnlDaHJvbWVJZCh0YWIud2luZG93SWQpO1xuXG4gICAgICAgIGlmICghdGFiV2luZG93KSB7XG4gICAgICAgICAgICBsb2cud2FybigndGFicy5vblVwZGF0ZWQ6IHdpbmRvdyBpZCBub3QgZm91bmQ6ICcsIHRhYi53aW5kb3dJZCk7XG4gICAgICAgICAgICByZXR1cm4gW3N0YXRlLCBudWxsXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbc3RhdGUuaGFuZGxlVGFiVXBkYXRlZCh0YWJXaW5kb3csIHRhYklkLCBjaGFuZ2VJbmZvKSwgbnVsbF07XG4gICAgfSk7XG5cbiAgICBpZiAoc3QucHJlZmVyZW5jZXMuZGVkdXBlVGFicykge1xuICAgICAgICBkZWR1cGVUYWIoc3QsIHN0YXRlUmVmLCB0YWJJZCwgY2hhbmdlSW5mbywgdGFiKTtcbiAgICB9XG59O1xuXG5jb25zdCBvbkJvb2ttYXJrQ3JlYXRlZCA9IChcbiAgICBzdGF0ZVJlZjogU3RhdGVSZWY8VGFiTWFuYWdlclN0YXRlPixcbiAgICBpZDogc3RyaW5nLFxuICAgIGJvb2ttYXJrOiBjaHJvbWUuYm9va21hcmtzLkJvb2ttYXJrVHJlZU5vZGVcbikgPT4ge1xuICAgIGNocm9tZUV2ZW50TG9nLmRlYnVnKCdDaHJvbWUgRXZlbnQ6IGJvb21hcmtzLm9uQ3JlYXRlZDogJywgaWQsIGJvb2ttYXJrKTtcbiAgICB1cGRhdGUoc3RhdGVSZWYsIHN0YXRlID0+IHtcbiAgICAgICAgbGV0IG5leHRTdCA9IHN0YXRlO1xuICAgICAgICAvKiBpcyB0aGlzIGJvb2ttYXJrIGEgZm9sZGVyPyAqL1xuXG4gICAgICAgIGlmICghaXNWYWxpZFdpbmRvd0ZvbGRlcihib29rbWFyaykpIHtcbiAgICAgICAgICAgIC8vIE9yZGluYXJ5IChub24tZm9sZGVyKSBib29rbWFya1xuICAgICAgICAgICAgLy8gSXMgcGFyZW50IGEgVGFibGkgd2luZG93IGZvbGRlcj9cbiAgICAgICAgICAgIGNvbnN0IHRhYldpbmRvdyA9IHN0YXRlLmdldFNhdmVkV2luZG93QnlCb29rbWFya0lkKFxuICAgICAgICAgICAgICAgIGJvb2ttYXJrLnBhcmVudElkIVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgaWYgKHRhYldpbmRvdykge1xuICAgICAgICAgICAgICAgIC8vIERvIHdlIGFscmVhZHkgaGF2ZSB0aGlzIGFzIGEgc2F2ZWQgdGFiP1xuICAgICAgICAgICAgICAgIGNvbnN0IGVudHJ5ID0gdGFiV2luZG93LmZpbmRDaHJvbWVCb29rbWFya0lkKGJvb2ttYXJrLmlkKTtcblxuICAgICAgICAgICAgICAgIGlmICghZW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnKCduZXcgYm9va21hcmsgaW4gc2F2ZWQgd2luZG93OiAnLCBib29rbWFyayk7XG4gICAgICAgICAgICAgICAgICAgIG5leHRTdCA9IHN0YXRlLmhhbmRsZUJvb2ttYXJrQ3JlYXRlZCh0YWJXaW5kb3csIGJvb2ttYXJrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBmb2xkZXIgKHdpbmRvdykgYm9va21hcmtcbiAgICAgICAgICAgIC8vIElzIHRoaXMgYSBUYWJsaSB3aW5kb3cgZm9sZGVyIChwYXJlbnQgaXMgVGFibGkgZm9sZGVyPylcbiAgICAgICAgICAgIGlmIChib29rbWFyay5wYXJlbnRJZCA9PT0gdGFibGlGb2xkZXJJZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhYldpbmRvdyA9IHN0YXRlLmdldFNhdmVkV2luZG93QnlCb29rbWFya0lkKGJvb2ttYXJrLmlkKTtcblxuICAgICAgICAgICAgICAgIGlmICghdGFiV2luZG93KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG5ldyBzYXZlZCB3aW5kb3cgKGJvb2ttYXJrIGZvbGRlcikgbm90IGluIGxvY2FsIHN0YXRlXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHR3ID0gdGFiV2luZG93VXRpbHMubWFrZUZvbGRlclRhYldpbmRvdyhib29rbWFyayk7XG4gICAgICAgICAgICAgICAgICAgIG5leHRTdCA9IHN0YXRlLnJlZ2lzdGVyVGFiV2luZG93KHR3KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dFN0O1xuICAgIH0pO1xufTtcbi8qXG4gKiBoaWdoZXItb3JkZXIgaGVscGVyIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIGEgYm9va21hcmsgbm9kZVxuICogaXMgZWl0aGVyIGEgc2F2ZWQgd2luZG93IGZvbGRlciBvciBzYXZlZCB0YWIsIGFuZCBpbnZva2VzXG4gKiBoYW5kbGVzIGZvciBlYWNoIGNhc2VcbiAqL1xuXG50eXBlIFRhYkhhbmRsZXIgPSAoXG4gICAgc3RhdGU6IFRhYk1hbmFnZXJTdGF0ZSxcbiAgICB0YWJXaW5kb3c6IFRhYldpbmRvdyxcbiAgICBpbmRleDogbnVtYmVyLFxuICAgIHRhYkl0ZW06IFRhYkl0ZW1cbikgPT4gVGFiTWFuYWdlclN0YXRlO1xudHlwZSBXaW5kb3dIYW5kbGVyID0gKFxuICAgIHN0YXRlOiBUYWJNYW5hZ2VyU3RhdGUsXG4gICAgdGFiV2luZG93OiBUYWJXaW5kb3dcbikgPT4gVGFiTWFuYWdlclN0YXRlO1xuY29uc3QgaGFuZGxlQm9va21hcmtVcGRhdGUgPSAoXG4gICAgc3RhdGVSZWY6IFN0YXRlUmVmPFRhYk1hbmFnZXJTdGF0ZT4sXG4gICAgcGFyZW50SWQ6IHN0cmluZyxcbiAgICBib29rbWFyazogY2hyb21lLmJvb2ttYXJrcy5Cb29rbWFya1RyZWVOb2RlLFxuICAgIGhhbmRsZVRhYjogVGFiSGFuZGxlcixcbiAgICBoYW5kbGVUYWJXaW5kb3c6IFdpbmRvd0hhbmRsZXJcbikgPT4ge1xuICAgIGxvZy5kZWJ1ZygnaGFuZGxlQm9va21hcmtVcGRhdGU6ICcsIGJvb2ttYXJrKTtcbiAgICB1cGRhdGUoc3RhdGVSZWYsIHN0YXRlID0+IHtcbiAgICAgICAgbGV0IG5leHRTdCA9IHN0YXRlO1xuICAgICAgICAvKiBpcyB0aGlzIGJvb2ttYXJrIGEgZm9sZGVyPyAqL1xuXG4gICAgICAgIGlmICghaXNWYWxpZFdpbmRvd0ZvbGRlcihib29rbWFyaykpIHtcbiAgICAgICAgICAgIC8vIE9yZGluYXJ5IChub24tZm9sZGVyKSBib29rbWFya1xuICAgICAgICAgICAgLy8gSXMgcGFyZW50IGEgVGFibGkgd2luZG93IGZvbGRlcj9cbiAgICAgICAgICAgIGNvbnN0IHRhYldpbmRvdyA9IHN0YXRlLmdldFNhdmVkV2luZG93QnlCb29rbWFya0lkKHBhcmVudElkKTtcblxuICAgICAgICAgICAgaWYgKHRhYldpbmRvdykge1xuICAgICAgICAgICAgICAgIC8vIERvIHdlIGFscmVhZHkgaGF2ZSB0aGlzIGFzIGEgc2F2ZWQgdGFiP1xuICAgICAgICAgICAgICAgIGNvbnN0IGVudHJ5ID0gdGFiV2luZG93LmZpbmRDaHJvbWVCb29rbWFya0lkKGJvb2ttYXJrLmlkKTtcblxuICAgICAgICAgICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBbaW5kZXgsIHRhYkl0ZW1dID0gZW50cnk7XG4gICAgICAgICAgICAgICAgICAgIG5leHRTdCA9IGhhbmRsZVRhYihzdGF0ZSwgdGFiV2luZG93LCBpbmRleCwgdGFiSXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gZm9sZGVyICh3aW5kb3cpIGJvb2ttYXJrXG4gICAgICAgICAgICAvLyBJcyB0aGlzIGEgVGFibGkgd2luZG93IGZvbGRlciAocGFyZW50IGlzIFRhYmxpIGZvbGRlcj8pXG4gICAgICAgICAgICBpZiAocGFyZW50SWQgPT09IHRhYmxpRm9sZGVySWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0YWJXaW5kb3cgPSBzdGF0ZS5nZXRTYXZlZFdpbmRvd0J5Qm9va21hcmtJZChib29rbWFyay5pZCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGFiV2luZG93KSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHRTdCA9IGhhbmRsZVRhYldpbmRvdyhzdGF0ZSwgdGFiV2luZG93KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dFN0O1xuICAgIH0pO1xufTtcblxuY29uc3Qgb25Cb29rbWFya1JlbW92ZWQgPSAoXG4gICAgc3RhdGVSZWY6IFN0YXRlUmVmPFRhYk1hbmFnZXJTdGF0ZT4sXG4gICAgaWQ6IHN0cmluZyxcbiAgICByZW1vdmVJbmZvOiBjaHJvbWUuYm9va21hcmtzLkJvb2ttYXJrUmVtb3ZlSW5mb1xuKSA9PiB7XG4gICAgY2hyb21lRXZlbnRMb2cuZGVidWcoJ0Nocm9tZSBFdmVudDogYm9va21hcmtzLm9uUmVtb3ZlZDogJywgaWQsIHJlbW92ZUluZm8pO1xuICAgIGhhbmRsZUJvb2ttYXJrVXBkYXRlKFxuICAgICAgICBzdGF0ZVJlZixcbiAgICAgICAgcmVtb3ZlSW5mby5wYXJlbnRJZCxcbiAgICAgICAgcmVtb3ZlSW5mby5ub2RlLFxuICAgICAgICAoc3QsIHRhYldpbmRvdywgaW5kZXgsIHRhYkl0ZW0pID0+XG4gICAgICAgICAgICBzdC5oYW5kbGVUYWJVbnNhdmVkKHRhYldpbmRvdywgdGFiSXRlbSksXG4gICAgICAgIChzdCwgdGFiV2luZG93KSA9PiBzdC51bm1hbmFnZVdpbmRvdyh0YWJXaW5kb3cpXG4gICAgKTtcbn07XG5cbmNvbnN0IHNhZmVVcGRhdGVXaW5kb3dUaXRsZSA9IChcbiAgICBzdDogVGFiTWFuYWdlclN0YXRlLFxuICAgIHRhYldpbmRvdzogVGFiV2luZG93LFxuICAgIHRpdGxlOiBzdHJpbmcgfCBudWxsXG4pID0+IHtcbiAgICByZXR1cm4gdGl0bGUgPT0gbnVsbCA/IHN0IDogc3QudXBkYXRlU2F2ZWRXaW5kb3dUaXRsZSh0YWJXaW5kb3csIHRpdGxlKTtcbn07XG5cbmNvbnN0IG9uQm9va21hcmtDaGFuZ2VkID0gYXN5bmMgKFxuICAgIHN0YXRlUmVmOiBTdGF0ZVJlZjxUYWJNYW5hZ2VyU3RhdGU+LFxuICAgIGlkOiBzdHJpbmcsXG4gICAgY2hhbmdlSW5mbzogY2hyb21lLmJvb2ttYXJrcy5Cb29rbWFya0NoYW5nZUluZm9cbikgPT4ge1xuICAgIGNocm9tZUV2ZW50TG9nLmRlYnVnKCdDaHJvbWUgRXZlbnQ6IGJvb2ttYXJrcy5PbmNoYW5nZWQ6ICcsIGlkLCBjaGFuZ2VJbmZvKTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBjaHJvbWVwLmJvb2ttYXJrcy5nZXQoaWQpO1xuXG4gICAgaWYgKHJlcyAmJiByZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBib29rbWFyayA9IHJlc1swXTtcbiAgICAgICAgaGFuZGxlQm9va21hcmtVcGRhdGUoXG4gICAgICAgICAgICBzdGF0ZVJlZixcbiAgICAgICAgICAgIGJvb2ttYXJrLnBhcmVudElkISxcbiAgICAgICAgICAgIGJvb2ttYXJrLFxuICAgICAgICAgICAgKHN0LCB0YWJXaW5kb3csIGluZGV4LCB0YWJJdGVtKSA9PlxuICAgICAgICAgICAgICAgIHN0LmhhbmRsZUJvb2ttYXJrVXBkYXRlZCh0YWJXaW5kb3csIHRhYkl0ZW0sIGNoYW5nZUluZm8pLFxuICAgICAgICAgICAgKHN0LCB0YWJXaW5kb3cpID0+XG4gICAgICAgICAgICAgICAgc2FmZVVwZGF0ZVdpbmRvd1RpdGxlKHN0LCB0YWJXaW5kb3csIGNoYW5nZUluZm8udGl0bGUpXG4gICAgICAgICk7XG4gICAgfVxufTtcblxuY29uc3Qgb25Cb29rbWFya01vdmVkID0gKFxuICAgIHN0YXRlUmVmOiBTdGF0ZVJlZjxUYWJNYW5hZ2VyU3RhdGU+LFxuICAgIGlkOiBzdHJpbmcsXG4gICAgbW92ZUluZm86IGNocm9tZS5ib29rbWFya3MuQm9va21hcmtNb3ZlSW5mb1xuKSA9PiB7XG4gICAgY2hyb21lRXZlbnRMb2cuZGVidWcoJ0Nocm9tZSBFdmVudDogYm9va21hcmtzLm9uTW92ZWQ6ICcsIGlkLCBtb3ZlSW5mbyk7XG5cbiAgICBpZiAoXG4gICAgICAgIG1vdmVJbmZvLm9sZFBhcmVudElkID09PSB0YWJsaUZvbGRlcklkICYmXG4gICAgICAgIG1vdmVJbmZvLnBhcmVudElkID09PSBhcmNoaXZlRm9sZGVySWRcbiAgICApIHtcbiAgICAgICAgLy8gbG9va3MgbGlrZSB3aW5kb3cgd2FzIHVubWFuYWdlZDpcbiAgICAgICAgdXBkYXRlKHN0YXRlUmVmLCBzdGF0ZSA9PiB7XG4gICAgICAgICAgICBsZXQgbmV4dFN0ID0gc3RhdGU7XG4gICAgICAgICAgICBjb25zdCB0YWJXaW5kb3cgPSBzdGF0ZS5nZXRTYXZlZFdpbmRvd0J5Qm9va21hcmtJZChpZC50b1N0cmluZygpKTtcblxuICAgICAgICAgICAgaWYgKHRhYldpbmRvdykge1xuICAgICAgICAgICAgICAgIG5leHRTdCA9IHN0YXRlLnVubWFuYWdlV2luZG93KHRhYldpbmRvdyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBuZXh0U3Q7XG4gICAgICAgIH0pO1xuICAgIH1cbn07XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyRXZlbnRIYW5kbGVycyhzdGF0ZVJlZjogU3RhdGVSZWY8VGFiTWFuYWdlclN0YXRlPikge1xuICAgIC8vIHdpbmRvdyBldmVudHM6XG4gICAgY2hyb21lLndpbmRvd3Mub25SZW1vdmVkLmFkZExpc3RlbmVyKHdpbmRvd0lkID0+IHtcbiAgICAgICAgY2hyb21lRXZlbnRMb2cuZGVidWcoJ0Nocm9tZSBFdmVudDo6IHdpbmRvd3Mub25SZW1vdmVkOiAnLCB3aW5kb3dJZCk7XG4gICAgICAgIHVwZGF0ZShzdGF0ZVJlZiwgc3RhdGUgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGFiV2luZG93ID0gc3RhdGUuZ2V0VGFiV2luZG93QnlDaHJvbWVJZCh3aW5kb3dJZCk7XG4gICAgICAgICAgICBjb25zdCBzdCA9IHRhYldpbmRvd1xuICAgICAgICAgICAgICAgID8gc3RhdGUuaGFuZGxlVGFiV2luZG93Q2xvc2VkKHRhYldpbmRvdylcbiAgICAgICAgICAgICAgICA6IHN0YXRlO1xuICAgICAgICAgICAgcmV0dXJuIHN0O1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBjaHJvbWUud2luZG93cy5vbkNyZWF0ZWQuYWRkTGlzdGVuZXIoY2hyb21lV2luZG93ID0+IHtcbiAgICAgICAgY2hyb21lRXZlbnRMb2cuZGVidWcoXG4gICAgICAgICAgICAnQ2hyb21lIEV2ZW50Ojogd2luZG93cy5vbkNyZWF0ZWQ6ICcsXG4gICAgICAgICAgICBjaHJvbWVXaW5kb3dcbiAgICAgICAgKTtcbiAgICAgICAgdXBkYXRlKHN0YXRlUmVmLCBzdGF0ZSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gc3RhdGUuc3luY0Nocm9tZVdpbmRvdyhjaHJvbWVXaW5kb3cpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICAvKiBUT0RPOiBUaGUgQ2hyb21lIGRvY3MgYXJlIHByZXR0eSBjb25mdXNpbmcgYW5kIHN1Z2dlc3QgdGhhdCBhbiBleHRyYSBmaWx0ZXIgcGFyYW1ldGVyIGNhbiBiZSBwYXNzZWRcbiAgICAgKiBpbiB0aGUgY2FsbCB0byBhZGRMaXN0ZW5lciwgYnV0IHRoZSBUeXBlU2NyaXB0IGJpbmRpbmdzIHN1Z2dlc3QgdGhpcyBpcyBhbiBhcmd1bWVudCB0byB0aGVcbiAgICAgKiBjYWxsYmFjaywgd2hpY2ggZG9lc24ndCBtYWtlIGEgdG9uIG9mIHNlbnNlLi4uXG4gICAgICovXG4gICAgY2hyb21lLndpbmRvd3Mub25Gb2N1c0NoYW5nZWQuYWRkTGlzdGVuZXIod2luZG93SWQgPT4ge1xuICAgICAgICBjaHJvbWVFdmVudExvZy5kZWJ1ZyhcbiAgICAgICAgICAgICdDaHJvbWUgRXZlbnQ6OiB3aW5kb3dzLm9uRm9jdXNDaGFuZ2VkOiAnLFxuICAgICAgICAgICAgd2luZG93SWRcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAod2luZG93SWQgPT09IGNocm9tZS53aW5kb3dzLldJTkRPV19JRF9OT05FKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB1cGRhdGUoc3RhdGVSZWYsIHN0YXRlID0+IHtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5zZXRDdXJyZW50V2luZG93SWQod2luZG93SWQpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICAvKiAgICAgIFxuICAgICAgICB7XG4gICAgICAgICAgICB3aW5kb3dUeXBlczogWydub3JtYWwnXVxuICAgICAgICB9XG4gICAgKTsgXG4gICAgKi9cblxuICAgIC8vIHRhYiBldmVudHM6XG4gICAgY2hyb21lLnRhYnMub25DcmVhdGVkLmFkZExpc3RlbmVyKHRhYiA9PiBvblRhYkNyZWF0ZWQoc3RhdGVSZWYsIHRhYikpO1xuICAgIGNocm9tZS50YWJzLm9uVXBkYXRlZC5hZGRMaXN0ZW5lcigodGFiSWQsIGNoYW5nZUluZm8sIHRhYikgPT5cbiAgICAgICAgb25UYWJVcGRhdGVkKHN0YXRlUmVmLCB0YWJJZCwgY2hhbmdlSW5mbywgdGFiKVxuICAgICk7XG4gICAgY2hyb21lLnRhYnMub25BY3RpdmF0ZWQuYWRkTGlzdGVuZXIoYWN0aXZlSW5mbyA9PiB7XG4gICAgICAgIGNocm9tZUV2ZW50TG9nLmRlYnVnKCdDaHJvbWUgRXZlbnQ6IHRhYnMub25BY3RpdmF0ZWQ6ICcsIGFjdGl2ZUluZm8pO1xuICAgICAgICB1cGRhdGUoc3RhdGVSZWYsIHN0YXRlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRhYldpbmRvdyA9IHN0YXRlLmdldFRhYldpbmRvd0J5Q2hyb21lSWQoYWN0aXZlSW5mby53aW5kb3dJZCk7XG5cbiAgICAgICAgICAgIGlmICghdGFiV2luZG93KSB7XG4gICAgICAgICAgICAgICAgbG9nLndhcm4oXG4gICAgICAgICAgICAgICAgICAgICd0YWJzLm9uQWN0aXZhdGVkOiB3aW5kb3cgaWQgbm90IGZvdW5kOiAnLFxuICAgICAgICAgICAgICAgICAgICBhY3RpdmVJbmZvLndpbmRvd0lkLFxuICAgICAgICAgICAgICAgICAgICBhY3RpdmVJbmZvXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHN0ID0gdGFiV2luZG93XG4gICAgICAgICAgICAgICAgPyBzdGF0ZS5oYW5kbGVUYWJBY3RpdmF0ZWQodGFiV2luZG93LCBhY3RpdmVJbmZvLnRhYklkKVxuICAgICAgICAgICAgICAgIDogc3RhdGU7XG4gICAgICAgICAgICByZXR1cm4gc3Q7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGNocm9tZS50YWJzLm9uUmVtb3ZlZC5hZGRMaXN0ZW5lcigodGFiSWQsIHJlbW92ZUluZm8pID0+IHtcbiAgICAgICAgY2hyb21lRXZlbnRMb2cuZGVidWcoXG4gICAgICAgICAgICAnQ2hyb21lIEV2ZW50OiB0YWJzLm9uUmVtb3ZlZDogJyxcbiAgICAgICAgICAgIHRhYklkLFxuICAgICAgICAgICAgcmVtb3ZlSW5mb1xuICAgICAgICApO1xuXG4gICAgICAgIGlmIChyZW1vdmVJbmZvLmlzV2luZG93Q2xvc2luZykge1xuICAgICAgICAgICAgLy8gd2luZG93IGNsb3NpbmcsIGlnbm9yZS4uLlxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgb25UYWJSZW1vdmVkKHN0YXRlUmVmLCByZW1vdmVJbmZvLndpbmRvd0lkLCB0YWJJZCk7XG4gICAgfSk7XG4gICAgY2hyb21lLnRhYnMub25SZXBsYWNlZC5hZGRMaXN0ZW5lcihcbiAgICAgICAgKGFkZGVkVGFiSWQ6IG51bWJlciwgcmVtb3ZlZFRhYklkOiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgIGNocm9tZUV2ZW50TG9nLmRlYnVnKFxuICAgICAgICAgICAgICAgICdDaHJvbWUgRXZlbnQ6IHRhYnMub25SZXBsYWNlZDogYWRkZWQ6ICcsXG4gICAgICAgICAgICAgICAgYWRkZWRUYWJJZCxcbiAgICAgICAgICAgICAgICAnLCByZW1vdmVkOiAnLFxuICAgICAgICAgICAgICAgIHJlbW92ZWRUYWJJZFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHVwZGF0ZShzdGF0ZVJlZiwgc3RhdGUgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhYldpbmRvdyA9IHN0YXRlLmdldFRhYldpbmRvd0J5Q2hyb21lVGFiSWQocmVtb3ZlZFRhYklkKTtcblxuICAgICAgICAgICAgICAgIGlmICghdGFiV2luZG93KSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZy5pbmZvKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3RhYnMub25SZXBsYWNlZDogY291bGQgbm90IGZpbmQgd2luZG93IGZvciByZW1vdmVkIHRhYjogJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWRUYWJJZFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dFN0ID0gc3RhdGUuaGFuZGxlVGFiQ2xvc2VkKHRhYldpbmRvdywgcmVtb3ZlZFRhYklkKTsgLy8gQW5kIGFycmFuZ2UgZm9yIHRoZSBhZGRlZCB0YWIgdG8gYmUgYWRkZWQgdG8gdGhlIHdpbmRvdzpcblxuICAgICAgICAgICAgICAgIGNocm9tZS50YWJzLmdldChhZGRlZFRhYklkLCB0YWIgPT4gb25UYWJDcmVhdGVkKHN0YXRlUmVmLCB0YWIpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dFN0O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICApO1xuICAgIGNocm9tZS50YWJzLm9uTW92ZWQuYWRkTGlzdGVuZXIoKHRhYklkLCBtb3ZlSW5mbykgPT4ge1xuICAgICAgICBjaHJvbWVFdmVudExvZy5kZWJ1ZygnQ2hyb21lIEV2ZW50OiB0YWJzLm9uTW92ZWQ6ICcsIHRhYklkLCBtb3ZlSW5mbyk7IC8vIExldCdzIGp1c3QgcmVmcmVzaCB0aGUgd2hvbGUgd2luZG93OlxuXG4gICAgICAgIGFjdGlvbnMuc3luY0Nocm9tZVdpbmRvd0J5SWQobW92ZUluZm8ud2luZG93SWQsIHN0YXRlUmVmKTtcbiAgICB9KTtcbiAgICBjaHJvbWUudGFicy5vbkRldGFjaGVkLmFkZExpc3RlbmVyKCh0YWJJZCwgZGV0YWNoSW5mbykgPT4ge1xuICAgICAgICBjaHJvbWVFdmVudExvZy5kZWJ1ZyhcbiAgICAgICAgICAgICdDaHJvbWUgRXZlbnQ6IHRhYnMub25EZXRhY2hlZDogJyxcbiAgICAgICAgICAgIHRhYklkLFxuICAgICAgICAgICAgZGV0YWNoSW5mb1xuICAgICAgICApOyAvLyBqdXN0IGhhbmRsZSBsaWtlIHRhYiBjbG9zaW5nOlxuXG4gICAgICAgIC8vIEkgYW0gYSBsaXR0bGUgc3VycHJpc2VkIHRoYXQgdGhpcyBkb2Vzbid0IGxvc2Ugc2F2ZWQgc3RhdGUgd2hlbiBkZXRhY2hpbmcgYVxuICAgICAgICAvLyBzYXZlZCB0YWIsIGJ1dCBpdCByZWFsbHkgZG9lc24ndCBzZWVtIHRvIVxuICAgICAgICBvblRhYlJlbW92ZWQoc3RhdGVSZWYsIGRldGFjaEluZm8ub2xkV2luZG93SWQsIHRhYklkKTtcbiAgICB9KTtcbiAgICBjaHJvbWUudGFicy5vbkF0dGFjaGVkLmFkZExpc3RlbmVyKCh0YWJJZDogbnVtYmVyLCBhdHRhY2hJbmZvKSA9PiB7XG4gICAgICAgIGNocm9tZUV2ZW50TG9nLmRlYnVnKFxuICAgICAgICAgICAgJ0Nocm9tZSBFdmVudDogdGFicy5vbkF0dGFjaGVkOiAnLFxuICAgICAgICAgICAgdGFiSWQsXG4gICAgICAgICAgICBhdHRhY2hJbmZvXG4gICAgICAgICk7IC8vIGhhbmRsZSBsaWtlIHRhYiBjcmVhdGlvbjpcblxuICAgICAgICBjaHJvbWUudGFicy5nZXQodGFiSWQsIHRhYiA9PiBvblRhYkNyZWF0ZWQoc3RhdGVSZWYsIHRhYiwgdHJ1ZSkpO1xuICAgIH0pO1xuICAgIGNocm9tZS5ib29rbWFya3Mub25DcmVhdGVkLmFkZExpc3RlbmVyKChpZCwgYm9va21hcmspID0+XG4gICAgICAgIG9uQm9va21hcmtDcmVhdGVkKHN0YXRlUmVmLCBpZCwgYm9va21hcmspXG4gICAgKTtcbiAgICBjaHJvbWUuYm9va21hcmtzLm9uUmVtb3ZlZC5hZGRMaXN0ZW5lcigoaW5kZXgsIGJvb2ttYXJrKSA9PlxuICAgICAgICBvbkJvb2ttYXJrUmVtb3ZlZChzdGF0ZVJlZiwgaW5kZXgsIGJvb2ttYXJrKVxuICAgICk7XG4gICAgY2hyb21lLmJvb2ttYXJrcy5vbk1vdmVkLmFkZExpc3RlbmVyKChpZCwgbW92ZUluZm8pID0+XG4gICAgICAgIG9uQm9va21hcmtNb3ZlZChzdGF0ZVJlZiwgaWQsIG1vdmVJbmZvKVxuICAgICk7XG4gICAgY2hyb21lLmJvb2ttYXJrcy5vbkNoYW5nZWQuYWRkTGlzdGVuZXIoKGlkLCBjaGFuZ2VJbmZvKSA9PlxuICAgICAgICBvbkJvb2ttYXJrQ2hhbmdlZChzdGF0ZVJlZiwgaWQsIGNoYW5nZUluZm8pXG4gICAgKTtcbn1cblxuY29uc3QgTUFUQ0hfVEhSRVNIT0xEID0gMC4yNTsgLy8gdHlwZSBjb25zdHJ1Y3RvciBmb3IgbWF0Y2ggaW5mbzpcblxuaW50ZXJmYWNlIE1hdGNoSW5mb1Byb3BzIHtcbiAgICB3aW5kb3dJZDogbnVtYmVyO1xuICAgIG1hdGNoZXM6IEltbXV0YWJsZS5NYXA8c3RyaW5nLCBudW1iZXI+O1xuICAgIGJlc3RNYXRjaDogc3RyaW5nIHwgbnVsbDtcbiAgICB0YWJDb3VudDogbnVtYmVyO1xufVxuXG5jb25zdCBkZWZhdWx0TWF0Y2hJbmZvUHJvcHM6IE1hdGNoSW5mb1Byb3BzID0ge1xuICAgIHdpbmRvd0lkOiAtMSxcbiAgICBtYXRjaGVzOiBJbW11dGFibGUuTWFwKCksXG4gICAgYmVzdE1hdGNoOiBudWxsLFxuICAgIHRhYkNvdW50OiAwXG59O1xuY2xhc3MgTWF0Y2hJbmZvIGV4dGVuZHMgSW1tdXRhYmxlLlJlY29yZChkZWZhdWx0TWF0Y2hJbmZvUHJvcHMpIHt9XG5cbmNvbnN0IGdldFdpbmRvd01hdGNoSW5mbyA9IChcbiAgICBibVN0b3JlOiBUYWJNYW5hZ2VyU3RhdGUsXG4gICAgdXJsSWRNYXA6IEltbXV0YWJsZS5NYXA8c3RyaW5nLCBJbW11dGFibGUuU2V0PHN0cmluZz4+LFxuICAgIHc6IGNocm9tZS53aW5kb3dzLldpbmRvd1xuKTogTWF0Y2hJbmZvID0+IHtcbiAgICBjb25zdCBtYXRjaFNldHMgPSB3XG4gICAgICAgIC50YWJzIS5tYXAodCA9PiB1cmxJZE1hcC5nZXQodC51cmwhLCBudWxsKSlcbiAgICAgICAgLmZpbHRlcih4ID0+IHggIT09IG51bGwpIGFzIEltbXV0YWJsZS5TZXQ8c3RyaW5nPltdO1xuXG4gICAgdHlwZSBDb3VudE1hcCA9IEltbXV0YWJsZS5NYXA8c3RyaW5nLCBudW1iZXI+O1xuXG4gICAgLy8gY291bnRNYXBzIDo6IEFycmF5PE1hcDxCb29rbWFya0lkLE51bT4+XG4gICAgY29uc3QgY291bnRNYXBzID0gbWF0Y2hTZXRzLm1hcChzID0+IHMuY291bnRCeSh2ID0+IHYpKTtcblxuICAgIC8vIE5vdyBsZXQncyByZWR1Y2UgYXJyYXksIG1lcmdpbmcgYWxsIG1hcHMgaW50byBhIHNpbmdsZSBtYXAsIGFnZ3JlZ2F0aW5nIGNvdW50czpcbiAgICBjb25zdCBhZ2dNZXJnZSA9IChtQTogQ291bnRNYXAsIG1COiBDb3VudE1hcCk6IENvdW50TWFwID0+XG4gICAgICAgIG1BLm1lcmdlV2l0aCgocHJldiwgbmV4dCkgPT4gcHJldiArIG5leHQsIG1CKTtcblxuICAgIC8vIG1hdGNoTWFwIDo6IE1hcDxCb29rbWFya0lkLE51bT5cbiAgICBjb25zdCBtYXRjaE1hcCA9IGNvdW50TWFwcy5yZWR1Y2UoYWdnTWVyZ2UsIEltbXV0YWJsZS5NYXAoKSk7XG4gICAgLypcbiAgICAgKiBUaGUgbG9naWMgaGVyZSBpcyBjb252b2x1dGVkIGJ1dCBzZWVtcyB0byB3b3JrIE9LXG4gICAgICogaW4gcHJhY3RpY2UuXG4gICAgICovXG4gICAgLy8gRW5zdXJlICgjIG1hdGNoZXMgLyAjIHNhdmVkIFVSTHMpIGZvciBlYWNoIGJvb2ttYXJrID4gTUFUQ0hfVEhSRVNIT0xEXG5cbiAgICBmdW5jdGlvbiBhYm92ZU1hdGNoVGhyZXNob2xkKG1hdGNoQ291bnQ6IG51bWJlciwgYm9va21hcmtJZDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHRhYkNvdW50ID0gdy50YWJzIS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHNhdmVkVGFiV2luZG93ID0gYm1TdG9yZS5ib29rbWFya0lkTWFwLmdldChib29rbWFya0lkKTtcbiAgICAgICAgY29uc3Qgc2F2ZWRVcmxDb3VudCA9IHNhdmVkVGFiV2luZG93IS50YWJJdGVtcy5jb3VudCgpO1xuICAgICAgICBjb25zdCBtYXRjaFJhdGlvID0gbWF0Y2hDb3VudCAvIHNhdmVkVXJsQ291bnQ7IC8vIGxvZy5kZWJ1ZyhcIm1hdGNoIHRocmVzaG9sZCBmb3IgJ1wiLCBzYXZlZFRhYldpbmRvdy50aXRsZSwgXCInOiBcIiwgbWF0Y2hSYXRpbywgbWF0Y2hDb3VudCwgc2F2ZWRVcmxDb3VudClcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgbWF0Y2hDb3VudCA+IDEgfHxcbiAgICAgICAgICAgIChzYXZlZFVybENvdW50ID09PSAxICYmIG1hdGNoQ291bnQgPT09IDEpIHx8XG4gICAgICAgICAgICBtYXRjaENvdW50ID09PSB0YWJDb3VudCB8fFxuICAgICAgICAgICAgbWF0Y2hSYXRpbyA+PSBNQVRDSF9USFJFU0hPTERcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCB0aHJlc2hNYXAgPSBtYXRjaE1hcC5maWx0ZXIoYWJvdmVNYXRjaFRocmVzaG9sZCk7XG4gICAgY29uc3QgYmVzdE1hdGNoID0gdXRpbHMuYmVzdE1hdGNoKHRocmVzaE1hcCk7XG4gICAgcmV0dXJuIG5ldyBNYXRjaEluZm8oe1xuICAgICAgICB3aW5kb3dJZDogdy5pZCxcbiAgICAgICAgbWF0Y2hlczogbWF0Y2hNYXAsXG4gICAgICAgIGJlc3RNYXRjaCxcbiAgICAgICAgdGFiQ291bnQ6IHcudGFicyEubGVuZ3RoXG4gICAgfSk7XG59O1xuLyoqXG4gKiBIZXVyaXN0aWMgc2NhbiB0byBmaW5kIGFueSBvcGVuIHdpbmRvd3MgdGhhdCBzZWVtIHRvIGhhdmUgY29tZSBmcm9tIHNhdmVkIHdpbmRvd3NcbiAqIGFuZCByZS1hdHRhY2ggdGhlbSBvbiBpbml0aWFsIGxvYWQgb2YgdGhlIGJhY2tncm91bmQgcGFnZS4gTWFpbmx5IHVzZWZ1bCBmb3JcbiAqIGRldmVsb3BtZW50IGFuZCBmb3IgcmUtc3RhcnRpbmcgVGFibGkuXG4gKlxuICogSGV1cmlzdGljcyBoZXJlIGFyZSBpbXBlcmZlY3Q7IG9ubHkgd2F5IHRvIGdldCB0aGlzIHRydWx5IHJpZ2h0IHdvdWxkIGJlIHdpdGggYSBwcm9wZXJcbiAqIHNlc3Npb24gbWFuYWdlbWVudCBBUEkuXG4gKlxuICogcmV0dXJuOiBQcm9taXNlPFRhYk1hbmFnZXJTdGF0ZT5cbiAqXG4gKi9cblxuZnVuY3Rpb24gYXR0YWNoV2luZG93TGlzdChcbiAgICBibVN0b3JlOiBUYWJNYW5hZ2VyU3RhdGUsXG4gICAgd2luZG93TGlzdDogY2hyb21lLndpbmRvd3MuV2luZG93W11cbikge1xuICAgIGNvbnN0IHVybElkTWFwID0gYm1TdG9yZS5nZXRVcmxCb29rbWFya0lkTWFwKCk7XG4gICAgLyoqXG4gICAgICogV2UgY291bGQgY29tZSB1cCB3aXRoIGJldHRlciBoZXVyaXN0aWNzIGhlcmUsIGJ1dCBmb3Igbm93IHdlJ2xsIGJlIGNvbnNlcnZhdGl2ZVxuICAgICAqIGFuZCBvbmx5IHJlLWF0dGFjaCB3aGVuIHRoZXJlIGlzIGFuIHVuYW1iaWd1b3VzIGJlc3QgbWF0Y2hcbiAgICAgKi9cbiAgICAvLyBPbmx5IGxvb2sgYXQgd2luZG93cyB0aGF0IG1hdGNoIGV4YWN0bHkgb25lIGJvb2ttYXJrIGZvbGRlclxuICAgIC8vIChDb3VsZCBiZSBpbXByb3ZlZCBieSBzb3J0aW5nIGVudHJpZXMgb24gbnVtYmVyIG9mIG1hdGNoZXMgYW5kIHBpY2tpbmcgYmVzdCAoaWYgdGhlcmUgaXMgb25lKSlcblxuICAgIGNvbnN0IHdpbmRvd01hdGNoSW5mbyA9IEltbXV0YWJsZS5TZXEod2luZG93TGlzdClcbiAgICAgICAgLm1hcCh3ID0+IGdldFdpbmRvd01hdGNoSW5mbyhibVN0b3JlLCB1cmxJZE1hcCwgdykpXG4gICAgICAgIC5maWx0ZXIobWkgPT4gbWkuYmVzdE1hdGNoKTsgLy8gbG9nLmRlYnVnKFwid2luZG93TWF0Y2hJbmZvOiBcIiwgd2luZG93TWF0Y2hJbmZvLnRvSlMoKSlcbiAgICAvLyBOb3cgZ2F0aGVyIGFuIGludmVyc2UgbWFwIG9mIHRoZSBmb3JtOlxuICAgIC8vIE1hcDxCb29rbWFya0lkLE1hcDxXaW5kb3dJZCxOdW0+PlxuXG4gICAgY29uc3QgYm1NYXRjaGVzID0gd2luZG93TWF0Y2hJbmZvLmdyb3VwQnkoXG4gICAgICAgIG1pID0+IG1pLmJlc3RNYXRjaFxuICAgICkgYXMgSW1tdXRhYmxlLlNlcS5LZXllZDxzdHJpbmcsIEltbXV0YWJsZS5TZXEuSW5kZXhlZDxNYXRjaEluZm8+PjsgLy8gbG9nLmRlYnVnKFwiYm1NYXRjaGVzOiBcIiwgYm1NYXRjaGVzLnRvSlMoKSlcbiAgICAvLyBibU1hdGNoTWFwczogTWFwPEJvb2ttYXJrSWQsTWFwPFdpbmRvd0lkLE51bT4+XG5cbiAgICBjb25zdCBibU1hdGNoTWFwcyA9IGJtTWF0Y2hlcy5tYXAobWlzID0+IHtcbiAgICAgICAgLy8gbWlzIDo6IFNlcTxNYXRjaEluZm8+XG4gICAgICAgIC8vIG1lcmNpZnVsbHkgZWFjaCBtaSB3aWxsIGhhdmUgYSBkaXN0aW5jdCB3aW5kb3dJZCBhdCB0aGlzIHBvaW50OlxuICAgICAgICBjb25zdCBlbnRyaWVzID0gbWlzLm1hcChtaSA9PiB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaFRhYkNvdW50ID0gbWkubWF0Y2hlcy5nZXQobWkuYmVzdE1hdGNoISk7XG4gICAgICAgICAgICByZXR1cm4gW21pLndpbmRvd0lkLCBtYXRjaFRhYkNvdW50XSBhcyBbbnVtYmVyLCBudW1iZXJdO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIEltbXV0YWJsZS5NYXA8bnVtYmVyLCBudW1iZXI+KGVudHJpZXMpO1xuICAgIH0pO1xuICAgIC8vIGxvZy5kZWJ1ZyhcImJtTWF0Y2hNYXBzOiBcIiwgYm1NYXRjaE1hcHMudG9KUygpKVxuXG4gICAgLy8gYmVzdEJNTWF0Y2hlcyA6OiBTZXEuS2V5ZWQ8Qm9va2Fya0lkLFdpbmRvd0lkPlxuICAgIGNvbnN0IGJlc3RCTU1hdGNoZXMgPSBibU1hdGNoTWFwc1xuICAgICAgICAubWFwKG1tID0+IHV0aWxzLmJlc3RNYXRjaChtbSkpXG4gICAgICAgIC5maWx0ZXIoY3QgPT4gY3QpOyAvLyBsb2cuZGVidWcoXCJiZXN0Qk1NYXRjaGVzOiBcIiwgYmVzdEJNTWF0Y2hlcy50b0pTKCkpXG4gICAgLy8gRm9ybSBhIG1hcCBmcm9tIGNocm9tZSB3aW5kb3cgaWRzIHRvIGNocm9tZSB3aW5kb3cgc25hcHNob3RzOlxuXG4gICAgY29uc3QgY2hyb21lV2luTWFwID0gXy5mcm9tUGFpcnMoXG4gICAgICAgIHdpbmRvd0xpc3QubWFwKHcgPT4gW3cuaWQsIHddIGFzIFtudW1iZXIsIGNocm9tZS53aW5kb3dzLldpbmRvd10pXG4gICAgKTsgLy8gQW5kIGJ1aWxkIHVwIG91ciBhdHRhY2hlZCBzdGF0ZSBieSBhdHRhY2hpbmcgdG8gZWFjaCB3aW5kb3cgaW4gYmVzdEJNTWF0Y2hlczpcblxuICAgIGNvbnN0IGF0dGFjaGVyID0gKFxuICAgICAgICBzdDogVGFiTWFuYWdlclN0YXRlLFxuICAgICAgICB3aW5kb3dJZDogbnVtYmVyIHwgbnVsbCxcbiAgICAgICAgYm9va21hcmtJZDogc3RyaW5nXG4gICAgKSA9PiB7XG4gICAgICAgIGNvbnN0IGNocm9tZVdpbmRvdyA9IGNocm9tZVdpbk1hcFt3aW5kb3dJZCFdO1xuICAgICAgICBjb25zdCBibVRhYldpbmRvdyA9IHN0LmJvb2ttYXJrSWRNYXAuZ2V0KGJvb2ttYXJrSWQpO1xuICAgICAgICBjb25zdCBuZXh0U3QgPSBzdC5hdHRhY2hDaHJvbWVXaW5kb3coYm1UYWJXaW5kb3chLCBjaHJvbWVXaW5kb3cpO1xuICAgICAgICByZXR1cm4gbmV4dFN0O1xuICAgIH07XG5cbiAgICBjb25zdCBhdHRhY2hlZFN0b3JlID0gYmVzdEJNTWF0Y2hlcy5yZWR1Y2UoYXR0YWNoZXIsIGJtU3RvcmUpO1xuICAgIHJldHVybiBhdHRhY2hlZFN0b3JlO1xufVxuLyoqXG4gKiBnZXQgYWxsIENocm9tZSB3aW5kb3dzIGFuZCBhdHRhY2ggdG8gYmVzdCBtYXRjaDpcbiAqL1xuXG5hc3luYyBmdW5jdGlvbiByZWF0dGFjaFdpbmRvd3MoYm1TdG9yZTogVGFiTWFuYWdlclN0YXRlKSB7XG4gICAgY29uc3Qgd2luZG93TGlzdCA9IGF3YWl0IGNocm9tZXAud2luZG93cy5nZXRBbGwoe1xuICAgICAgICBwb3B1bGF0ZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBhdHRhY2hXaW5kb3dMaXN0KGJtU3RvcmUsIHdpbmRvd0xpc3QpO1xufVxuLyoqXG4gKiBGb3IgYSBuZXdseSBjcmVhdGVkIHdpbmRvdywgY2hlY2sgaWYgd2Ugc2hvdWxkIGF0dGFjaCBpdCB0byBhbiBleGlzdGluZ1xuICogY2xvc2VkLCBzYXZlZCB3aW5kb3cuICBJbnRlbmRlZCBwcmltYXJpbHkgZm9yIFwiT3BlbiBpbiBOZXcgV2luZG93XCIgb25cbiAqIGEgc2F2ZWQgdGFiLlxuICogTk9URTogVGhpcyBpcyBmdWxseSBmdW5jdGlvbmFsLCBidXQgaXMgbm8gbG9uZ2VyIGFjdHVhbGx5IHVzZWQuXG4gKiBBZnRlciBidWlsZGluZyB0aGlzIG91dCwgZGVjaWRlZCBhIHNpbXBsZXIgYW4gbW9yZSBmbGV4aWJsZSBVWFxuICogaXMgdG8gYXR0YWNoIGEgc2F2ZWQgd2luZG93IHdoZW4gc2luZ2xlLWNsaWNraW5nIG9uIGEgc2F2ZWQsIGNsb3NlZCB0YWIsXG4gKiBidXQgYWxsb3cgdGhlIFwiT3BlbiBpbiBOZXcgV2luZG93XCIgY29udGV4dCBtZW51IGFjdGlvbiB0byByZW1haW4gZGV0YWNoZWQuXG4gKi9cblxuYXN5bmMgZnVuY3Rpb24gbWF5YmVBdHRhY2hOZXdXaW5kb3coXG4gICAgc3RSZWY6IFN0YXRlUmVmPFRhYk1hbmFnZXJTdGF0ZT4sXG4gICAgd2luZG93SWQ6IG51bWJlclxuKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNocm9tZVdpbmRvdyA9IGF3YWl0IGNocm9tZXAud2luZG93cy5nZXQod2luZG93SWQsIHtcbiAgICAgICAgICAgIHBvcHVsYXRlOiB0cnVlLFxuICAgICAgICAgICAgd2luZG93VHlwZXM6IFsnbm9ybWFsJ11cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFjaHJvbWVXaW5kb3cpIHtcbiAgICAgICAgICAgIGxvZy53YXJuKCdtYXliZUF0dGFjaE5ld1dpbmRvdzogbnVsbCB3aW5kb3csIGlnbm9yaW5nLi4uLicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdXBkYXRlKHN0UmVmLCBzdCA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYXR0YWNoV2luZG93TGlzdChzdCwgW2Nocm9tZVdpbmRvd10pO1xuICAgICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGxvZy53YXJuKCdjYXVnaHQgZXJyb3IgZ2V0dGluZyBjaHJvbWUgd2luZG93IChpZ25vcmluZy4uLik6ICcsIGUpO1xuICAgIH1cbn1cbi8qKlxuICogbG9hZCB3aW5kb3cgc3RhdGUgZm9yIHNhdmVkIHdpbmRvd3MgZnJvbSBsb2NhbCBzdG9yYWdlIGFuZCBhdHRhY2ggdG9cbiAqIGFueSBjbG9zZWQsIHNhdmVkIHdpbmRvd3NcbiAqL1xuXG5hc3luYyBmdW5jdGlvbiBsb2FkU25hcFN0YXRlKGJtU3RvcmU6IFRhYk1hbmFnZXJTdGF0ZSkge1xuICAgIGNvbnN0IGl0ZW1zID0gYXdhaXQgY2hyb21lcC5zdG9yYWdlLmxvY2FsLmdldCgnc2F2ZWRXaW5kb3dTdGF0ZScpO1xuXG4gICAgaWYgKCFpdGVtcykge1xuICAgICAgICByZXR1cm4gYm1TdG9yZTtcbiAgICB9XG5cbiAgICBjb25zdCBzYXZlZFdpbmRvd1N0YXRlU3RyID0gaXRlbXMuc2F2ZWRXaW5kb3dTdGF0ZTtcblxuICAgIGlmICghc2F2ZWRXaW5kb3dTdGF0ZVN0cikge1xuICAgICAgICBsb2cuZGVidWcoXG4gICAgICAgICAgICAnbG9hZFNuYXBTdGF0ZTogbm8gc2F2ZWQgd2luZG93IHN0YXRlIGZvdW5kIGluIGxvY2FsIHN0b3JhZ2UnXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBibVN0b3JlO1xuICAgIH1cblxuICAgIGNvbnN0IHNhdmVkV2luZG93U3RhdGUgPSBKU09OLnBhcnNlKHNhdmVkV2luZG93U3RhdGVTdHIpO1xuICAgIGxvZy5kZWJ1ZygnbG9hZFNuYXBTdGF0ZTogcmVhZDogJywgc2F2ZWRXaW5kb3dTdGF0ZSk7XG4gICAgY29uc3QgY2xvc2VkV2luZG93c01hcCA9IGJtU3RvcmUuYm9va21hcmtJZE1hcC5maWx0ZXIoYm1XaW4gPT4gIWJtV2luLm9wZW4pO1xuICAgIGNvbnN0IGNsb3NlZFdpbmRvd0lkcyA9IGNsb3NlZFdpbmRvd3NNYXAua2V5cygpO1xuICAgIGxldCBzYXZlZE9wZW5UYWJzTWFwOiB7IFtpZDogc3RyaW5nXTogSW1tdXRhYmxlLkxpc3Q8VGFiSXRlbT4gfSA9IHt9O1xuXG4gICAgZm9yIChsZXQgaWQgb2YgY2xvc2VkV2luZG93SWRzKSB7XG4gICAgICAgIGNvbnN0IHNhdmVkU3RhdGUgPSBzYXZlZFdpbmRvd1N0YXRlW2lkXTtcblxuICAgICAgICBpZiAoc2F2ZWRTdGF0ZSkge1xuICAgICAgICAgICAgY29uc3Qgb3BlblRhYkl0ZW1zOiBhbnlbXSA9IHNhdmVkU3RhdGUudGFiSXRlbXMuZmlsdGVyKFxuICAgICAgICAgICAgICAgICh0aTogYW55KSA9PiB0aS5vcGVuXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiAob3BlblRhYkl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb252VGFiSXRlbXMgPSBvcGVuVGFiSXRlbXMubWFwKCh0aTogYW55KSA9PlxuICAgICAgICAgICAgICAgICAgICB0YWJXaW5kb3dVdGlscy50YWJJdGVtRnJvbUpTKHRpKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY29uc3QgdGlMaXN0ID0gSW1tdXRhYmxlLkxpc3QoY29udlRhYkl0ZW1zKTtcbiAgICAgICAgICAgICAgICBzYXZlZE9wZW5UYWJzTWFwW2lkXSA9IHRpTGlzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGtleUNvdW50ID0gT2JqZWN0LmtleXMoc2F2ZWRPcGVuVGFic01hcCkubGVuZ3RoO1xuICAgIGxvZy5kZWJ1ZygncmVhZCB3aW5kb3cgc25hcHNob3Qgc3RhdGUgZm9yICcsIGtleUNvdW50LCAnIHNhdmVkIHdpbmRvd3MnKTtcbiAgICBjb25zdCB1cGRCb29rbWFya01hcCA9IGJtU3RvcmUuYm9va21hcmtJZE1hcC5tYXAoKHRhYldpbmRvdywgYm1JZCkgPT4ge1xuICAgICAgICBjb25zdCBzbmFwVGFicyA9IHNhdmVkT3BlblRhYnNNYXBbYm1JZF07XG5cbiAgICAgICAgaWYgKHNuYXBUYWJzID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0YWJXaW5kb3c7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBiYXNlU2F2ZWRJdGVtcyA9IHRhYldpbmRvdy50YWJJdGVtc1xuICAgICAgICAgICAgLmZpbHRlcih0aSA9PiB0aS5zYXZlZClcbiAgICAgICAgICAgIC5tYXAodGFiV2luZG93VXRpbHMucmVzZXRTYXZlZEl0ZW0pO1xuICAgICAgICBjb25zdCBtZXJnZWRUYWJzID0gdGFiV2luZG93VXRpbHMubWVyZ2VTYXZlZE9wZW5UYWJzKFxuICAgICAgICAgICAgYmFzZVNhdmVkSXRlbXMsXG4gICAgICAgICAgICBzbmFwVGFic1xuICAgICAgICApO1xuICAgICAgICByZXR1cm4gdGFiV2luZG93LnNldCgndGFiSXRlbXMnLCBtZXJnZWRUYWJzKS5zZXQoJ3NuYXBzaG90JywgdHJ1ZSk7XG4gICAgfSk7XG4gICAgY29uc3QgbmV4dFN0b3JlID0gYm1TdG9yZS5zZXQoJ2Jvb2ttYXJrSWRNYXAnLCB1cGRCb29rbWFya01hcCk7XG4gICAgbG9nLmRlYnVnKCdtZXJnZWQgd2luZG93IHN0YXRlIHNuYXBzaG90IGZyb20gbG9jYWwgc3RvcmFnZScpO1xuICAgIHJldHVybiBuZXh0U3RvcmU7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIG1haW4oKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgdXRpbHMuc2V0TG9nTGV2ZWwobG9nKTtcbiAgICAgICAgdXRpbHMuc2V0TG9nTGV2ZWwoY2hyb21lRXZlbnRMb2cpO1xuICAgICAgICAvLyBDYW4gYWxzbyBkbzpcbiAgICAgICAgLy8gY2hyb21lRXZlbnRMb2cuc2V0TGV2ZWwoJ2RlYnVnJyk7XG5cbiAgICAgICAgbG9nLmluZm8oJ2JnSGVscGVyIHN0YXJ0ZWQsIGVudjogJywgcHJvY2Vzcy5lbnYuTk9ERV9FTlYpO1xuICAgICAgICBhY3Rpb25zLnNldFJlbG9hZEhhbmRsZXIobWFpbik7XG4gICAgICAgIGNvbnN0IHJhd0JNU3RvcmUgPSBhd2FpdCBpbml0V2luU3RvcmUoKTtcbiAgICAgICAgY29uc3QgYXR0YWNoQk1TdG9yZSA9IGF3YWl0IHJlYXR0YWNoV2luZG93cyhyYXdCTVN0b3JlKTtcbiAgICAgICAgY29uc3QgYm1TdG9yZSA9IGF3YWl0IGxvYWRTbmFwU3RhdGUoYXR0YWNoQk1TdG9yZSk7XG4gICAgICAgIGNvbnN0IHN0YXRlUmVmID0gbWtSZWYoYm1TdG9yZSk7XG4gICAgICAgICh3aW5kb3cgYXMgYW55KS5zdGF0ZVJlZiA9IHN0YXRlUmVmO1xuICAgICAgICAod2luZG93IGFzIGFueSkuaXNFeHRlbnNpb24gPSB0cnVlO1xuICAgICAgICBhd2FpdCBhY3Rpb25zLmxvYWRQcmVmZXJlbmNlcyhzdGF0ZVJlZik7XG4gICAgICAgIGF3YWl0IGFjdGlvbnMuc3luY0Nocm9tZVdpbmRvd3Moc3RhdGVSZWYpO1xuICAgICAgICBsb2cuZGVidWcoJ2luaXRpYWwgc3luYyBvZiBjaHJvbWUgd2luZG93cyBjb21wbGV0ZS4nKTtcbiAgICAgICAgbG9nLmRlYnVnKCdiZWZvcmUgc3luYzogc3RhdGVSZWY6ICcsIHN0YXRlUmVmKTtcbiAgICAgICAgY29uc3Qgc3luY2VkU3RvcmUgPSBhd2FpdCBhY3Rpb25zLnN5bmNDdXJyZW50KHN0YXRlUmVmKTsgLy8gZHVtcEFsbChzeW5jZWRTdG9yZSlcbiAgICAgICAgLy8gZHVtcENocm9tZVdpbmRvd3MoKVxuXG4gICAgICAgIHNldHVwQ29ubmVjdGlvbkxpc3RlbmVyKHN0YXRlUmVmKTtcbiAgICAgICAgcmVnaXN0ZXJFdmVudEhhbmRsZXJzKHN0YXRlUmVmKTsgLy8gSW4gY2FzZSBvZiByZXN0YXJ0OiBoaWRlIGFueSBwcmV2aW91c2x5IG9wZW4gcG9wb3V0IHRoYXRcbiAgICAgICAgLy8gbWlnaHQgYmUgaGFuZ2luZyBhcm91bmQuLi5cbiAgICAgICAgLy8gbG9nLmRlYnVnKCdzdG9yZSBiZWZvcmUgaGlkaW5nIHBvcG91dDogJywgc3luY2VkU3RvcmUudG9KUygpKVxuXG4gICAgICAgIGNvbnN0IG5vUG9wU3RvcmUgPSBhd2FpdCBhY3Rpb25zLmhpZGVQb3BvdXQoc3RhdGVSZWYpOyAvLyBsb2cuZGVidWcoJ25vUG9wU3RvcmU6ICcsIG5vUG9wU3RvcmUpXG5cbiAgICAgICAgbG9nLmluZm8oJ21haW46IHBvcG91dE9uU3RhcnQ6ICcsIG5vUG9wU3RvcmUucHJlZmVyZW5jZXMucG9wb3V0T25TdGFydCk7XG4gICAgICAgIGlmIChub1BvcFN0b3JlLnByZWZlcmVuY2VzLnBvcG91dE9uU3RhcnQpIHtcbiAgICAgICAgICAgIGFjdGlvbnMuc2hvd1BvcG91dChzdGF0ZVJlZik7XG4gICAgICAgIH1cblxuICAgICAgICBjaHJvbWUuY29tbWFuZHMub25Db21tYW5kLmFkZExpc3RlbmVyKGNvbW1hbmQgPT4ge1xuICAgICAgICAgICAgY2hyb21lRXZlbnRMb2cuZGVidWcoJ0Nocm9tZSBFdmVudDogb25Db21tYW5kOiAnLCBjb21tYW5kKTtcblxuICAgICAgICAgICAgaWYgKGNvbW1hbmQgPT09ICdzaG93X3BvcG91dCcpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb25zLnNob3dQb3BvdXQoc3RhdGVSZWYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgc2F2ZWRTdGF0ZS5pbml0KHN0YXRlUmVmKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGxvZy5lcnJvcignKioqIGNhdWdodCB0b3AgbGV2ZWwgZXhjZXB0aW9uOiAnLCBlKTtcbiAgICB9XG59XG5cbm1haW4oKTtcbiIsIi8vIE5vdGU6IHRoaXMgaXMgdGhlIHNlbXZlci5vcmcgdmVyc2lvbiBvZiB0aGUgc3BlYyB0aGF0IGl0IGltcGxlbWVudHNcbi8vIE5vdCBuZWNlc3NhcmlseSB0aGUgcGFja2FnZSB2ZXJzaW9uIG9mIHRoaXMgY29kZS5cbmNvbnN0IFNFTVZFUl9TUEVDX1ZFUlNJT04gPSAnMi4wLjAnXG5cbmNvbnN0IE1BWF9MRU5HVEggPSAyNTZcbmNvbnN0IE1BWF9TQUZFX0lOVEVHRVIgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiB8fFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyA5MDA3MTk5MjU0NzQwOTkxXG5cbi8vIE1heCBzYWZlIHNlZ21lbnQgbGVuZ3RoIGZvciBjb2VyY2lvbi5cbmNvbnN0IE1BWF9TQUZFX0NPTVBPTkVOVF9MRU5HVEggPSAxNlxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgU0VNVkVSX1NQRUNfVkVSU0lPTixcbiAgTUFYX0xFTkdUSCxcbiAgTUFYX1NBRkVfSU5URUdFUixcbiAgTUFYX1NBRkVfQ09NUE9ORU5UX0xFTkdUSFxufVxuIiwiY29uc3QgZGVidWcgPSAoXG4gIHR5cGVvZiBwcm9jZXNzID09PSAnb2JqZWN0JyAmJlxuICBwcm9jZXNzLmVudiAmJlxuICBwcm9jZXNzLmVudi5OT0RFX0RFQlVHICYmXG4gIC9cXGJzZW12ZXJcXGIvaS50ZXN0KHByb2Nlc3MuZW52Lk5PREVfREVCVUcpXG4pID8gKC4uLmFyZ3MpID0+IGNvbnNvbGUuZXJyb3IoJ1NFTVZFUicsIC4uLmFyZ3MpXG4gIDogKCkgPT4ge31cblxubW9kdWxlLmV4cG9ydHMgPSBkZWJ1Z1xuIiwiY29uc3QgY29tcGFyZSA9IHJlcXVpcmUoJy4vY29tcGFyZScpXG5jb25zdCBndCA9IChhLCBiLCBsb29zZSkgPT4gY29tcGFyZShhLCBiLCBsb29zZSkgPiAwXG5tb2R1bGUuZXhwb3J0cyA9IGd0XG4iLCJjb25zdCBudW1lcmljID0gL15bMC05XSskL1xuY29uc3QgY29tcGFyZUlkZW50aWZpZXJzID0gKGEsIGIpID0+IHtcbiAgY29uc3QgYW51bSA9IG51bWVyaWMudGVzdChhKVxuICBjb25zdCBibnVtID0gbnVtZXJpYy50ZXN0KGIpXG5cbiAgaWYgKGFudW0gJiYgYm51bSkge1xuICAgIGEgPSArYVxuICAgIGIgPSArYlxuICB9XG5cbiAgcmV0dXJuIGEgPT09IGIgPyAwXG4gICAgOiAoYW51bSAmJiAhYm51bSkgPyAtMVxuICAgIDogKGJudW0gJiYgIWFudW0pID8gMVxuICAgIDogYSA8IGIgPyAtMVxuICAgIDogMVxufVxuXG5jb25zdCByY29tcGFyZUlkZW50aWZpZXJzID0gKGEsIGIpID0+IGNvbXBhcmVJZGVudGlmaWVycyhiLCBhKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY29tcGFyZUlkZW50aWZpZXJzLFxuICByY29tcGFyZUlkZW50aWZpZXJzXG59XG4iLCJjb25zdCBjb21wYXJlID0gcmVxdWlyZSgnLi9jb21wYXJlJylcbmNvbnN0IGVxID0gKGEsIGIsIGxvb3NlKSA9PiBjb21wYXJlKGEsIGIsIGxvb3NlKSA9PT0gMFxubW9kdWxlLmV4cG9ydHMgPSBlcVxuIiwiY29uc3QgU2VtVmVyID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9zZW12ZXInKVxuY29uc3QgY29tcGFyZUJ1aWxkID0gKGEsIGIsIGxvb3NlKSA9PiB7XG4gIGNvbnN0IHZlcnNpb25BID0gbmV3IFNlbVZlcihhLCBsb29zZSlcbiAgY29uc3QgdmVyc2lvbkIgPSBuZXcgU2VtVmVyKGIsIGxvb3NlKVxuICByZXR1cm4gdmVyc2lvbkEuY29tcGFyZSh2ZXJzaW9uQikgfHwgdmVyc2lvbkEuY29tcGFyZUJ1aWxkKHZlcnNpb25CKVxufVxubW9kdWxlLmV4cG9ydHMgPSBjb21wYXJlQnVpbGRcbiIsImNvbnN0IGNvbXBhcmUgPSByZXF1aXJlKCcuL2NvbXBhcmUnKVxuY29uc3QgbHQgPSAoYSwgYiwgbG9vc2UpID0+IGNvbXBhcmUoYSwgYiwgbG9vc2UpIDwgMFxubW9kdWxlLmV4cG9ydHMgPSBsdFxuIiwiY29uc3QgY29tcGFyZSA9IHJlcXVpcmUoJy4vY29tcGFyZScpXG5jb25zdCBndGUgPSAoYSwgYiwgbG9vc2UpID0+IGNvbXBhcmUoYSwgYiwgbG9vc2UpID49IDBcbm1vZHVsZS5leHBvcnRzID0gZ3RlXG4iLCJjb25zdCBjb21wYXJlID0gcmVxdWlyZSgnLi9jb21wYXJlJylcbmNvbnN0IGx0ZSA9IChhLCBiLCBsb29zZSkgPT4gY29tcGFyZShhLCBiLCBsb29zZSkgPD0gMFxubW9kdWxlLmV4cG9ydHMgPSBsdGVcbiIsImNvbnN0IEFOWSA9IFN5bWJvbCgnU2VtVmVyIEFOWScpXG4vLyBob2lzdGVkIGNsYXNzIGZvciBjeWNsaWMgZGVwZW5kZW5jeVxuY2xhc3MgQ29tcGFyYXRvciB7XG4gIHN0YXRpYyBnZXQgQU5ZICgpIHtcbiAgICByZXR1cm4gQU5ZXG4gIH1cbiAgY29uc3RydWN0b3IgKGNvbXAsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMgfHwgdHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICBsb29zZTogISFvcHRpb25zLFxuICAgICAgICBpbmNsdWRlUHJlcmVsZWFzZTogZmFsc2VcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29tcCBpbnN0YW5jZW9mIENvbXBhcmF0b3IpIHtcbiAgICAgIGlmIChjb21wLmxvb3NlID09PSAhIW9wdGlvbnMubG9vc2UpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXAgPSBjb21wLnZhbHVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgZGVidWcoJ2NvbXBhcmF0b3InLCBjb21wLCBvcHRpb25zKVxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnNcbiAgICB0aGlzLmxvb3NlID0gISFvcHRpb25zLmxvb3NlXG4gICAgdGhpcy5wYXJzZShjb21wKVxuXG4gICAgaWYgKHRoaXMuc2VtdmVyID09PSBBTlkpIHtcbiAgICAgIHRoaXMudmFsdWUgPSAnJ1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZhbHVlID0gdGhpcy5vcGVyYXRvciArIHRoaXMuc2VtdmVyLnZlcnNpb25cbiAgICB9XG5cbiAgICBkZWJ1ZygnY29tcCcsIHRoaXMpXG4gIH1cblxuICBwYXJzZSAoY29tcCkge1xuICAgIGNvbnN0IHIgPSB0aGlzLm9wdGlvbnMubG9vc2UgPyByZVt0LkNPTVBBUkFUT1JMT09TRV0gOiByZVt0LkNPTVBBUkFUT1JdXG4gICAgY29uc3QgbSA9IGNvbXAubWF0Y2gocilcblxuICAgIGlmICghbSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBjb21wYXJhdG9yOiAke2NvbXB9YClcbiAgICB9XG5cbiAgICB0aGlzLm9wZXJhdG9yID0gbVsxXSAhPT0gdW5kZWZpbmVkID8gbVsxXSA6ICcnXG4gICAgaWYgKHRoaXMub3BlcmF0b3IgPT09ICc9Jykge1xuICAgICAgdGhpcy5vcGVyYXRvciA9ICcnXG4gICAgfVxuXG4gICAgLy8gaWYgaXQgbGl0ZXJhbGx5IGlzIGp1c3QgJz4nIG9yICcnIHRoZW4gYWxsb3cgYW55dGhpbmcuXG4gICAgaWYgKCFtWzJdKSB7XG4gICAgICB0aGlzLnNlbXZlciA9IEFOWVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNlbXZlciA9IG5ldyBTZW1WZXIobVsyXSwgdGhpcy5vcHRpb25zLmxvb3NlKVxuICAgIH1cbiAgfVxuXG4gIHRvU3RyaW5nICgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZVxuICB9XG5cbiAgdGVzdCAodmVyc2lvbikge1xuICAgIGRlYnVnKCdDb21wYXJhdG9yLnRlc3QnLCB2ZXJzaW9uLCB0aGlzLm9wdGlvbnMubG9vc2UpXG5cbiAgICBpZiAodGhpcy5zZW12ZXIgPT09IEFOWSB8fCB2ZXJzaW9uID09PSBBTlkpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2ZXJzaW9uID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmVyc2lvbiA9IG5ldyBTZW1WZXIodmVyc2lvbiwgdGhpcy5vcHRpb25zKVxuICAgICAgfSBjYXRjaCAoZXIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNtcCh2ZXJzaW9uLCB0aGlzLm9wZXJhdG9yLCB0aGlzLnNlbXZlciwgdGhpcy5vcHRpb25zKVxuICB9XG5cbiAgaW50ZXJzZWN0cyAoY29tcCwgb3B0aW9ucykge1xuICAgIGlmICghKGNvbXAgaW5zdGFuY2VvZiBDb21wYXJhdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYSBDb21wYXJhdG9yIGlzIHJlcXVpcmVkJylcbiAgICB9XG5cbiAgICBpZiAoIW9wdGlvbnMgfHwgdHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICBsb29zZTogISFvcHRpb25zLFxuICAgICAgICBpbmNsdWRlUHJlcmVsZWFzZTogZmFsc2VcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcGVyYXRvciA9PT0gJycpIHtcbiAgICAgIGlmICh0aGlzLnZhbHVlID09PSAnJykge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBSYW5nZShjb21wLnZhbHVlLCBvcHRpb25zKS50ZXN0KHRoaXMudmFsdWUpXG4gICAgfSBlbHNlIGlmIChjb21wLm9wZXJhdG9yID09PSAnJykge1xuICAgICAgaWYgKGNvbXAudmFsdWUgPT09ICcnKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IFJhbmdlKHRoaXMudmFsdWUsIG9wdGlvbnMpLnRlc3QoY29tcC5zZW12ZXIpXG4gICAgfVxuXG4gICAgY29uc3Qgc2FtZURpcmVjdGlvbkluY3JlYXNpbmcgPVxuICAgICAgKHRoaXMub3BlcmF0b3IgPT09ICc+PScgfHwgdGhpcy5vcGVyYXRvciA9PT0gJz4nKSAmJlxuICAgICAgKGNvbXAub3BlcmF0b3IgPT09ICc+PScgfHwgY29tcC5vcGVyYXRvciA9PT0gJz4nKVxuICAgIGNvbnN0IHNhbWVEaXJlY3Rpb25EZWNyZWFzaW5nID1cbiAgICAgICh0aGlzLm9wZXJhdG9yID09PSAnPD0nIHx8IHRoaXMub3BlcmF0b3IgPT09ICc8JykgJiZcbiAgICAgIChjb21wLm9wZXJhdG9yID09PSAnPD0nIHx8IGNvbXAub3BlcmF0b3IgPT09ICc8JylcbiAgICBjb25zdCBzYW1lU2VtVmVyID0gdGhpcy5zZW12ZXIudmVyc2lvbiA9PT0gY29tcC5zZW12ZXIudmVyc2lvblxuICAgIGNvbnN0IGRpZmZlcmVudERpcmVjdGlvbnNJbmNsdXNpdmUgPVxuICAgICAgKHRoaXMub3BlcmF0b3IgPT09ICc+PScgfHwgdGhpcy5vcGVyYXRvciA9PT0gJzw9JykgJiZcbiAgICAgIChjb21wLm9wZXJhdG9yID09PSAnPj0nIHx8IGNvbXAub3BlcmF0b3IgPT09ICc8PScpXG4gICAgY29uc3Qgb3Bwb3NpdGVEaXJlY3Rpb25zTGVzc1RoYW4gPVxuICAgICAgY21wKHRoaXMuc2VtdmVyLCAnPCcsIGNvbXAuc2VtdmVyLCBvcHRpb25zKSAmJlxuICAgICAgKHRoaXMub3BlcmF0b3IgPT09ICc+PScgfHwgdGhpcy5vcGVyYXRvciA9PT0gJz4nKSAmJlxuICAgICAgICAoY29tcC5vcGVyYXRvciA9PT0gJzw9JyB8fCBjb21wLm9wZXJhdG9yID09PSAnPCcpXG4gICAgY29uc3Qgb3Bwb3NpdGVEaXJlY3Rpb25zR3JlYXRlclRoYW4gPVxuICAgICAgY21wKHRoaXMuc2VtdmVyLCAnPicsIGNvbXAuc2VtdmVyLCBvcHRpb25zKSAmJlxuICAgICAgKHRoaXMub3BlcmF0b3IgPT09ICc8PScgfHwgdGhpcy5vcGVyYXRvciA9PT0gJzwnKSAmJlxuICAgICAgICAoY29tcC5vcGVyYXRvciA9PT0gJz49JyB8fCBjb21wLm9wZXJhdG9yID09PSAnPicpXG5cbiAgICByZXR1cm4gKFxuICAgICAgc2FtZURpcmVjdGlvbkluY3JlYXNpbmcgfHxcbiAgICAgIHNhbWVEaXJlY3Rpb25EZWNyZWFzaW5nIHx8XG4gICAgICAoc2FtZVNlbVZlciAmJiBkaWZmZXJlbnREaXJlY3Rpb25zSW5jbHVzaXZlKSB8fFxuICAgICAgb3Bwb3NpdGVEaXJlY3Rpb25zTGVzc1RoYW4gfHxcbiAgICAgIG9wcG9zaXRlRGlyZWN0aW9uc0dyZWF0ZXJUaGFuXG4gICAgKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcGFyYXRvclxuXG5jb25zdCB7cmUsIHR9ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvcmUnKVxuY29uc3QgY21wID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zL2NtcCcpXG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoJy4uL2ludGVybmFsL2RlYnVnJylcbmNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4vc2VtdmVyJylcbmNvbnN0IFJhbmdlID0gcmVxdWlyZSgnLi9yYW5nZScpXG4iLCJjb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3NlbXZlcicpXG5jb25zdCBDb21wYXJhdG9yID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9jb21wYXJhdG9yJylcbmNvbnN0IHtBTll9ID0gQ29tcGFyYXRvclxuY29uc3QgUmFuZ2UgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3JhbmdlJylcbmNvbnN0IHNhdGlzZmllcyA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucy9zYXRpc2ZpZXMnKVxuY29uc3QgZ3QgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMvZ3QnKVxuY29uc3QgbHQgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMvbHQnKVxuY29uc3QgbHRlID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zL2x0ZScpXG5jb25zdCBndGUgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMvZ3RlJylcblxuY29uc3Qgb3V0c2lkZSA9ICh2ZXJzaW9uLCByYW5nZSwgaGlsbywgb3B0aW9ucykgPT4ge1xuICB2ZXJzaW9uID0gbmV3IFNlbVZlcih2ZXJzaW9uLCBvcHRpb25zKVxuICByYW5nZSA9IG5ldyBSYW5nZShyYW5nZSwgb3B0aW9ucylcblxuICBsZXQgZ3RmbiwgbHRlZm4sIGx0Zm4sIGNvbXAsIGVjb21wXG4gIHN3aXRjaCAoaGlsbykge1xuICAgIGNhc2UgJz4nOlxuICAgICAgZ3RmbiA9IGd0XG4gICAgICBsdGVmbiA9IGx0ZVxuICAgICAgbHRmbiA9IGx0XG4gICAgICBjb21wID0gJz4nXG4gICAgICBlY29tcCA9ICc+PSdcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnPCc6XG4gICAgICBndGZuID0gbHRcbiAgICAgIGx0ZWZuID0gZ3RlXG4gICAgICBsdGZuID0gZ3RcbiAgICAgIGNvbXAgPSAnPCdcbiAgICAgIGVjb21wID0gJzw9J1xuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTXVzdCBwcm92aWRlIGEgaGlsbyB2YWwgb2YgXCI8XCIgb3IgXCI+XCInKVxuICB9XG5cbiAgLy8gSWYgaXQgc2F0aXNpZmVzIHRoZSByYW5nZSBpdCBpcyBub3Qgb3V0c2lkZVxuICBpZiAoc2F0aXNmaWVzKHZlcnNpb24sIHJhbmdlLCBvcHRpb25zKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gRnJvbSBub3cgb24sIHZhcmlhYmxlIHRlcm1zIGFyZSBhcyBpZiB3ZSdyZSBpbiBcImd0clwiIG1vZGUuXG4gIC8vIGJ1dCBub3RlIHRoYXQgZXZlcnl0aGluZyBpcyBmbGlwcGVkIGZvciB0aGUgXCJsdHJcIiBmdW5jdGlvbi5cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJhbmdlLnNldC5sZW5ndGg7ICsraSkge1xuICAgIGNvbnN0IGNvbXBhcmF0b3JzID0gcmFuZ2Uuc2V0W2ldXG5cbiAgICBsZXQgaGlnaCA9IG51bGxcbiAgICBsZXQgbG93ID0gbnVsbFxuXG4gICAgY29tcGFyYXRvcnMuZm9yRWFjaCgoY29tcGFyYXRvcikgPT4ge1xuICAgICAgaWYgKGNvbXBhcmF0b3Iuc2VtdmVyID09PSBBTlkpIHtcbiAgICAgICAgY29tcGFyYXRvciA9IG5ldyBDb21wYXJhdG9yKCc+PTAuMC4wJylcbiAgICAgIH1cbiAgICAgIGhpZ2ggPSBoaWdoIHx8IGNvbXBhcmF0b3JcbiAgICAgIGxvdyA9IGxvdyB8fCBjb21wYXJhdG9yXG4gICAgICBpZiAoZ3Rmbihjb21wYXJhdG9yLnNlbXZlciwgaGlnaC5zZW12ZXIsIG9wdGlvbnMpKSB7XG4gICAgICAgIGhpZ2ggPSBjb21wYXJhdG9yXG4gICAgICB9IGVsc2UgaWYgKGx0Zm4oY29tcGFyYXRvci5zZW12ZXIsIGxvdy5zZW12ZXIsIG9wdGlvbnMpKSB7XG4gICAgICAgIGxvdyA9IGNvbXBhcmF0b3JcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgLy8gSWYgdGhlIGVkZ2UgdmVyc2lvbiBjb21wYXJhdG9yIGhhcyBhIG9wZXJhdG9yIHRoZW4gb3VyIHZlcnNpb25cbiAgICAvLyBpc24ndCBvdXRzaWRlIGl0XG4gICAgaWYgKGhpZ2gub3BlcmF0b3IgPT09IGNvbXAgfHwgaGlnaC5vcGVyYXRvciA9PT0gZWNvbXApIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIC8vIElmIHRoZSBsb3dlc3QgdmVyc2lvbiBjb21wYXJhdG9yIGhhcyBhbiBvcGVyYXRvciBhbmQgb3VyIHZlcnNpb25cbiAgICAvLyBpcyBsZXNzIHRoYW4gaXQgdGhlbiBpdCBpc24ndCBoaWdoZXIgdGhhbiB0aGUgcmFuZ2VcbiAgICBpZiAoKCFsb3cub3BlcmF0b3IgfHwgbG93Lm9wZXJhdG9yID09PSBjb21wKSAmJlxuICAgICAgICBsdGVmbih2ZXJzaW9uLCBsb3cuc2VtdmVyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIGlmIChsb3cub3BlcmF0b3IgPT09IGVjb21wICYmIGx0Zm4odmVyc2lvbiwgbG93LnNlbXZlcikpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG91dHNpZGVcbiIsIi8vIGp1c3QgcHJlLWxvYWQgYWxsIHRoZSBzdHVmZiB0aGF0IGluZGV4LmpzIGxhemlseSBleHBvcnRzXG5jb25zdCBpbnRlcm5hbFJlID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9yZScpXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcmU6IGludGVybmFsUmUucmUsXG4gIHNyYzogaW50ZXJuYWxSZS5zcmMsXG4gIHRva2VuczogaW50ZXJuYWxSZS50LFxuICBTRU1WRVJfU1BFQ19WRVJTSU9OOiByZXF1aXJlKCcuL2ludGVybmFsL2NvbnN0YW50cycpLlNFTVZFUl9TUEVDX1ZFUlNJT04sXG4gIFNlbVZlcjogcmVxdWlyZSgnLi9jbGFzc2VzL3NlbXZlcicpLFxuICBjb21wYXJlSWRlbnRpZmllcnM6IHJlcXVpcmUoJy4vaW50ZXJuYWwvaWRlbnRpZmllcnMnKS5jb21wYXJlSWRlbnRpZmllcnMsXG4gIHJjb21wYXJlSWRlbnRpZmllcnM6IHJlcXVpcmUoJy4vaW50ZXJuYWwvaWRlbnRpZmllcnMnKS5yY29tcGFyZUlkZW50aWZpZXJzLFxuICBwYXJzZTogcmVxdWlyZSgnLi9mdW5jdGlvbnMvcGFyc2UnKSxcbiAgdmFsaWQ6IHJlcXVpcmUoJy4vZnVuY3Rpb25zL3ZhbGlkJyksXG4gIGNsZWFuOiByZXF1aXJlKCcuL2Z1bmN0aW9ucy9jbGVhbicpLFxuICBpbmM6IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2luYycpLFxuICBkaWZmOiByZXF1aXJlKCcuL2Z1bmN0aW9ucy9kaWZmJyksXG4gIG1ham9yOiByZXF1aXJlKCcuL2Z1bmN0aW9ucy9tYWpvcicpLFxuICBtaW5vcjogcmVxdWlyZSgnLi9mdW5jdGlvbnMvbWlub3InKSxcbiAgcGF0Y2g6IHJlcXVpcmUoJy4vZnVuY3Rpb25zL3BhdGNoJyksXG4gIHByZXJlbGVhc2U6IHJlcXVpcmUoJy4vZnVuY3Rpb25zL3ByZXJlbGVhc2UnKSxcbiAgY29tcGFyZTogcmVxdWlyZSgnLi9mdW5jdGlvbnMvY29tcGFyZScpLFxuICByY29tcGFyZTogcmVxdWlyZSgnLi9mdW5jdGlvbnMvcmNvbXBhcmUnKSxcbiAgY29tcGFyZUxvb3NlOiByZXF1aXJlKCcuL2Z1bmN0aW9ucy9jb21wYXJlLWxvb3NlJyksXG4gIGNvbXBhcmVCdWlsZDogcmVxdWlyZSgnLi9mdW5jdGlvbnMvY29tcGFyZS1idWlsZCcpLFxuICBzb3J0OiByZXF1aXJlKCcuL2Z1bmN0aW9ucy9zb3J0JyksXG4gIHJzb3J0OiByZXF1aXJlKCcuL2Z1bmN0aW9ucy9yc29ydCcpLFxuICBndDogcmVxdWlyZSgnLi9mdW5jdGlvbnMvZ3QnKSxcbiAgbHQ6IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2x0JyksXG4gIGVxOiByZXF1aXJlKCcuL2Z1bmN0aW9ucy9lcScpLFxuICBuZXE6IHJlcXVpcmUoJy4vZnVuY3Rpb25zL25lcScpLFxuICBndGU6IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2d0ZScpLFxuICBsdGU6IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2x0ZScpLFxuICBjbXA6IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2NtcCcpLFxuICBjb2VyY2U6IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2NvZXJjZScpLFxuICBDb21wYXJhdG9yOiByZXF1aXJlKCcuL2NsYXNzZXMvY29tcGFyYXRvcicpLFxuICBSYW5nZTogcmVxdWlyZSgnLi9jbGFzc2VzL3JhbmdlJyksXG4gIHNhdGlzZmllczogcmVxdWlyZSgnLi9mdW5jdGlvbnMvc2F0aXNmaWVzJyksXG4gIHRvQ29tcGFyYXRvcnM6IHJlcXVpcmUoJy4vcmFuZ2VzL3RvLWNvbXBhcmF0b3JzJyksXG4gIG1heFNhdGlzZnlpbmc6IHJlcXVpcmUoJy4vcmFuZ2VzL21heC1zYXRpc2Z5aW5nJyksXG4gIG1pblNhdGlzZnlpbmc6IHJlcXVpcmUoJy4vcmFuZ2VzL21pbi1zYXRpc2Z5aW5nJyksXG4gIG1pblZlcnNpb246IHJlcXVpcmUoJy4vcmFuZ2VzL21pbi12ZXJzaW9uJyksXG4gIHZhbGlkUmFuZ2U6IHJlcXVpcmUoJy4vcmFuZ2VzL3ZhbGlkJyksXG4gIG91dHNpZGU6IHJlcXVpcmUoJy4vcmFuZ2VzL291dHNpZGUnKSxcbiAgZ3RyOiByZXF1aXJlKCcuL3Jhbmdlcy9ndHInKSxcbiAgbHRyOiByZXF1aXJlKCcuL3Jhbmdlcy9sdHInKSxcbiAgaW50ZXJzZWN0czogcmVxdWlyZSgnLi9yYW5nZXMvaW50ZXJzZWN0cycpLFxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==
!function(e){function t(t){for(var r,c,l=t[0],u=t[1],i=t[2],f=0,b=[];f<l.length;f++)c=l[f],Object.prototype.hasOwnProperty.call(a,c)&&a[c]&&b.push(a[c][0]),a[c]=0;for(r in u)Object.prototype.hasOwnProperty.call(u,r)&&(e[r]=u[r]);for(s&&s(t);b.length;)b.shift()();return o.push.apply(o,i||[]),n()}function n(){for(var e,t=0;t<o.length;t++){for(var n=o[t],r=!0,l=1;l<n.length;l++){var u=n[l];0!==a[u]&&(r=!1)}r&&(o.splice(t--,1),e=c(c.s=n[0]))}return e}var r={},a={3:0},o=[];function c(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,c),n.l=!0,n.exports}c.m=e,c.c=r,c.d=function(e,t,n){c.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},c.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},c.t=function(e,t){if(1&t&&(e=c(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(c.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)c.d(n,r,function(t){return e[t]}.bind(null,r));return n},c.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return c.d(t,"a",t),t},c.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},c.p="";var l=window.webpackJsonp=window.webpackJsonp||[],u=l.push.bind(l);l.push=t,l=l.slice();for(var i=0;i<l.length;i++)t(l[i]);var s=u;o.push([284,0]),n()}({284:function(e,t,n){e.exports=n(312)},312:function(e,t,n){"use strict";n.r(t);var r=n(1),a=n.n(r),o=n(0),c=n(23),l=n(3),u=n(5),i=n(21),s=n(9),f=n(2),b=n(14),m=n(34),p=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),c=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)c.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return c},d=Object(f.a)({width:120,marginLeft:5}),v=Object(f.a)({width:120,marginLeft:5}),h=Object(f.a)({marginTop:0,marginBottom:0,marginLeft:0,marginRight:4}),g=Object(f.a)({marginTop:0,marginBottom:0,marginLeft:0,marginRight:0}),y=Object(f.a)({marginLeft:8,marginRight:4,marginTop:"auto",marginBottom:"auto"}),O=Object(f.a)({display:"flex",alignContent:"flex-start"}),w=function(e){var t=e.initialPrefs,n=e.onClose,r=e.onApply,c=e.onSubmit;a.a.debug("PreferencesModal: initialPrefs: ",t.toJS());var w=p(Object(o.useState)(t),2),E=w[0],x=w[1],S=function(e){e.keyCode===u.g?(e.preventDefault(),n()):e.keyCode===u.f&&k(e)},k=function(e){e.preventDefault(),c(E)},N=E.popoutOnStart,j=E.dedupeTabs,C=E.revertOnOpen,P=E.theme,T=Object.keys(s.b).map((function(e){return o.createElement("option",{key:e,value:e},e)})),A=o.createElement("select",{className:d,name:"theme",value:P,onChange:function(e){return function(e){var t=E.set("theme",e.target.value);a.a.debug("handleThemeChange: nextPrefs:",t.toJS()),x(t)}(e)}},T),B=E.layout,D=Object.keys(b.b).map((function(e){return o.createElement("option",{key:e,value:e},e)})),J=o.createElement("select",{className:d,name:"layout",value:B,onChange:function(e){return function(e){var t=E.set("layout",e.target.value);a.a.debug("handleThemeChange: nextPrefs:",t.toJS()),x(t)}(e)}},D),L=Object(m.a)(E.fontScaleFactor),_=m.c.map((function(e){return o.createElement("option",{key:e.toString(),value:e},e.toString())})),z=o.createElement("select",{className:v,name:"fontSize",value:L,onChange:function(e){return function(e){var t=E,n=Object(m.b)(Number.parseInt(e.target.value)),r=t.set("fontScaleFactor",n);a.a.debug("handleFontSizeChange: fontSize: ",e.target.value,", nextPrefs:",r.toJS()),x(r)}(e)}},_),I=l.B;return o.createElement(i.b,{className:l.x,title:"Tabli Preferences",onClose:n},o.createElement(i.a,null,o.createElement("div",{className:l.t},o.createElement("form",{className:l.y,onSubmit:k},o.createElement("div",{className:l.z},o.createElement("div",{className:Object(f.b)("checkbox",I,O)},o.createElement("input",{type:"checkbox",className:y,checked:N,onChange:function(e){return n=(t=E).set("popoutOnStart",!t.popoutOnStart),void x(n);var t,n}}),o.createElement("label",{className:g},"Show Tabli popout window at startup")),o.createElement("div",{className:Object(f.b)("checkbox",I,O)},o.createElement("input",{type:"checkbox",className:y,checked:j,onChange:function(e){return n=(t=E).set("dedupeTabs",!t.dedupeTabs),void x(n);var t,n}}),o.createElement("label",{className:g},"Automatically close duplicate tabs")),o.createElement("div",{className:Object(f.b)("checkbox",I,O)},o.createElement("input",{type:"checkbox",className:y,checked:C,onChange:function(e){return n=(t=E).set("revertOnOpen",!t.revertOnOpen),void x(n);var t,n}}),o.createElement("label",{className:g},"Only re-open saved tabs when re-opening saved windows")),o.createElement("div",null),o.createElement("div",null),o.createElement("div",{className:l.A},o.createElement("label",{className:h},"Theme")),A,o.createElement("div",{className:l.A},o.createElement("label",{className:h},"Layout")),J,o.createElement("div",{className:l.A},o.createElement("label",{className:h},"Font Size")),z)),o.createElement("hr",null),o.createElement("div",{className:l.g},o.createElement("button",{type:"button",className:"btn btn-default btn-light tabli-dialog-button",onClick:function(e){!function(e){e.preventDefault(),r(t)}(e),n()},tabIndex:0},"Cancel"),o.createElement("button",{type:"button",className:"btn btn-info tabli-dialog-button",onClick:function(e){return function(e){e.preventDefault(),r(E)}(e)},tabIndex:0,onKeyDown:S},"Apply"),o.createElement("button",{type:"button",className:"btn btn-primary btn-default tabli-dialog-button",onClick:function(e){return k(e)},tabIndex:0,onKeyDown:S},"OK")))))},E=n(6),x=n(17),S=n.n(x),k=n(4),N=function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function c(e){try{u(r.next(e))}catch(e){o(e)}}function l(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,l)}u((r=r.apply(e,t||[])).next())}))},j=function(e,t){var n,r,a,o,c={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;c;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return c.label++,{value:o[1],done:!1};case 5:c.label++,r=o[1],o=[0];continue;case 7:o=c.ops.pop(),c.trys.pop();continue;default:if(!(a=c.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){c=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){c.label=o[1];break}if(6===o[0]&&c.label<a[1]){c.label=a[1],a=o;break}if(a&&c.label<a[2]){c.label=a[2],c.ops.push(o);break}a[2]&&c.ops.pop(),c.trys.pop();continue}o=t.call(e,c)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},C=S.a,P=function(){return N(void 0,void 0,void 0,(function(){var e;return j(this,(function(t){switch(t.label){case 0:return a.a.debug("onClose"),[4,C.tabs.getCurrent()];case 1:return e=t.sent(),a.a.debug("onClose tab: ",e),e.id&&chrome.tabs.remove([e.id]),[2]}}))}))},T=function(e,t){return N(void 0,void 0,void 0,(function(){return j(this,(function(n){switch(n.label){case 0:return[4,E.n(t,e)];case 1:return n.sent(),[2]}}))}))},A=function(){return N(void 0,void 0,void 0,(function(){var e,t,n,r,l;return j(this,(function(u){try{e=chrome.extension.getBackgroundPage(),t=e.stateRef,n=Object(k.mutableGet)(t),r=document.getElementById("prefsContent"),l=o.createElement(w,{onClose:P,initialPrefs:n.preferences,onApply:function(e){return T(t,e)},onSubmit:function(e){return n=t,r=e,N(void 0,void 0,void 0,(function(){return j(this,(function(e){switch(e.label){case 0:return[4,T(n,r)];case 1:return e.sent(),[4,P()];case 2:return e.sent(),[2]}}))}));var n,r}}),c.render(l,r)}catch(e){throw a.a.error("caught exception rendering preferences page:"),a.a.error(e.stack),e}return[2]}))}))};window.onload=function(){return A()}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,